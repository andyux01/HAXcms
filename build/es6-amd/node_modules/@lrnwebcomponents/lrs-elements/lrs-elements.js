define(["exports", "../../lit-element/lit-element.js"], function (_exports, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrsElements = void 0;

  /**
   * Copyright 2020 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `lrs-elements`
   * `elements for interfacing with learning record stores`
   * @demo demo/index.html
   * @element lrs-elements
   */
  class LrsElements extends _litElement.LitElement {
    //styles function
    static get styles() {
      return [(0, _litElement.css)`
        :host {
          display: block;
        }

        :host([hidden]) {
          display: none;
        }
      `];
    } // Template return function


    render() {
      return (0, _litElement.html)` <slot></slot>`;
    } // properties available to the custom element for data binding


    static get properties() {
      return { ...super.properties
      };
    }
    /**
     * Convention we use
     */


    static get tag() {
      return "lrs-elements";
    }
    /**
     * HTMLElement
     */


    constructor() {
      super();
    }
    /**
     * LitElement ready
     */


    firstUpdated(changedProperties) {}
    /**
     * LitElement life cycle - property changed
     */


    updated(changedProperties) {
      changedProperties.forEach((oldValue, propName) => {
        /* notify example
        // notify
        if (propName == 'format') {
          this.dispatchEvent(
            new CustomEvent(`${propName}-changed`, {
              detail: {
                value: this[propName],
              }
            })
          );
        }
        */

        /* observer example
        if (propName == 'activeNode') {
          this._activeNodeChanged(this[propName], oldValue);
        }
        */

        /* computed example
        if (['id', 'selected'].includes(propName)) {
          this.__selectedChanged(this.selected, this.id);
        }
        */
      });
    }

  }

  _exports.LrsElements = LrsElements;
  customElements.define(LrsElements.tag, LrsElements);
});