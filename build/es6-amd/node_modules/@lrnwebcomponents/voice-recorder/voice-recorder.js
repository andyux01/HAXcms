define(["exports", "meta", "../../lit-element/lit-element.js", "./lib/vmsg-fork.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js"], function (_exports, meta, _litElement, _vmsgFork, _simpleIcon, _simpleIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.VoiceRecorder = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `voice-recorder`
   * `LAME bridge`
   *
   * @demo demo/index.html
   * @element voice-recorder
   */
  class VoiceRecorder extends _litElement.LitElement {
    static get styles() {
      return [(0, _litElement.css)`
        :host {
          display: inline-flex;
        }
      `];
    }

    render() {
      return (0, _litElement.html)`
      <button @click="${this.recordState}">
        <simple-icon icon="${this.iconState}"></simple-icon>${this.textState}
      </button>
      <slot></slot>
    `;
    }

    static get properties() {
      return {
        iconState: {
          type: String
        },
        textState: {
          type: String
        },
        recording: {
          type: Boolean
        }
      };
    }
    /**
     * Convention we use
     */


    static get tag() {
      return "voice-recorder";
    }
    /**
     * HTMLElement
     */


    constructor() {
      super();
      this.recording = false;
      setTimeout(() => {
        this.addEventListener("vmsg-ready", this.vmsgReady.bind(this));
      }, 0);
    }

    recordState(e) {
      this.recording = !this.recording;
    }
    /**
     * LitElement life cycle - property changed
     */


    updated(changedProperties) {
      changedProperties.forEach((oldValue, propName) => {
        if (propName == "recording") {
          if (this[propName]) {
            this.textState = "stop";
            this.iconState = "av:stop";
          } else {
            this.textState = "Record";
            this.iconState = "av:play-arrow";
          } // observer to act on the recording piece


          this.toggleRecording(this[propName], oldValue);
        }
      });
    }

    vmsgReady(e) {
      console.warn(e.detail.value);
    }
    /**
     * Toggle the LAME bridge
     */


    toggleRecording(newValue, oldValue) {
      if (newValue) {
        // need to start...
        (0, _vmsgFork.record)({
          wasmURL: this.pathFromUrl(decodeURIComponent(meta.url)) + "../../node_modules/vmsg/vmsg.wasm"
        }, this).then(blob => {
          this.dispatchEvent(new CustomEvent("voice-recorder-recording", {
            value: blob
          }));
        });
      }
    }

    pathFromUrl(url) {
      return url.substring(0, url.lastIndexOf("/") + 1);
    }

  }

  _exports.VoiceRecorder = VoiceRecorder;
  customElements.define(VoiceRecorder.tag, VoiceRecorder);
});