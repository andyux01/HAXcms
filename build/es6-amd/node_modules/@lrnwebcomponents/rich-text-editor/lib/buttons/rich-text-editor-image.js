define(["exports", "../../../../lit-element/lit-element.js", "./rich-text-editor-prompt-button.js"], function (_exports, _litElement, _richTextEditorPromptButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorImage = void 0;

  /**
   * Copyright 2019 Penn State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `rich-text-editor-image`
   * an inline image button for rich text editor
   *
   * @element rich-text-editor-image
   * @demo ./demo/buttons.html
   */
  class RichTextEditorImage extends (0, _richTextEditorPromptButton.RichTextEditorPromptButtonBehaviors)(_litElement.LitElement) {
    /**
     * Store the tag name to make it easier to obtain directly.
     */
    static get tag() {
      return "rich-text-editor-image";
    } // render function for template


    render() {
      return super.render();
    } // properties available to the custom element for data binding


    static get properties() {
      return { ...super.properties
      };
    }

    constructor() {
      super();
      this.fields = [{
        property: "src",
        title: "Image URL",
        description: "The image URL. (Leave blank to remove.)",
        inputMethod: "textfield"
      }, {
        property: "alt",
        title: "Alt Text",
        inputMethod: "textfield"
      }, {
        property: "width",
        title: "Width",
        inputMethod: "textfield",
        inline: true
      }, {
        property: "height",
        title: "Height",
        inputMethod: "textfield",
        inline: true
      }];
      this.command = "insertHTML";
      this.label = "Insert Inline Image";
      this.icon = "editor:insert-photo";
      this.tag = "img";
      this.value = {};
    }
    /**
     * overrides default block selectors
     *
     * @readonly
     * @memberof RichTextEditorLink
     */


    get blockSelectors() {
      return "img";
    }
    /**
     * whether button is toggled
     *
     * @readonly
     * @memberof RichTextEditorButton
     */


    get isToggled() {
      return this.toggled;
    }
    /**
     * determaines commandVal based on values passed from prompt
     */


    get promptCommandVal() {
      let alt = this.getPropValue("alt"),
          src = this.getPropValue("src"),
          width = this.getPropValue("width"),
          height = this.getPropValue("height");
      return !src ? "" : `<img src="${src}"${!alt ? "" : ` alt="${alt}"`}${!width ? "" : ` width="${width}"`}${!height ? "" : ` width="${height}"`}>`;
    }
    /**
     * updates prompt fields with selected range data
     */


    getValue() {
      let img = this.rangeQuery();
      return !img ? undefined : {
        alt: img.getAttribute("alt"),
        src: img.getAttribute("src"),
        width: img.getAttribute("width"),
        height: img.getAttribute("height")
      };
    }

    setToggled() {
      this.toggled = !!this.value;
    }

  }

  _exports.RichTextEditorImage = RichTextEditorImage;
  window.customElements.define(RichTextEditorImage.tag, RichTextEditorImage);
});