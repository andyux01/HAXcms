define(["exports", "../../../lit-element/lit-element.js", "../../simple-icon/simple-icon.js", "../../simple-icon/lib/simple-icons.js", "../../hax-iconset/lib/simple-hax-iconset.js", "../../paper-avatar/paper-avatar.js"], function (_exports, _litElement, _simpleIcon, _simpleIcons, _simpleHaxIconset, _paperAvatar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnsysButtonInner = void 0;

  /**
   * `lrnsys-button-inner`
   * @element lrnsys-button-inner
   */
  class LrnsysButtonInner extends _litElement.LitElement {
    /**
     * LitElement constructable styles enhancement
     */
    static get styles() {
      return [(0, _litElement.css)`
        :host {
          display: block;
        }
        :host > div > * {
          vertical-align: middle;
        }
        .text-label {
          margin-left: 8px;
        }
        .text-label-only {
          margin-left: 0;
        }
      `];
    }

    constructor() {
      super();
      this.text = "";
      this.avatar = "";
      this.icon = "";
    }
    /**
     * LitElement render
     */


    render() {
      return (0, _litElement.html)`
      <div>
        ${this.avatar != "" ? (0, _litElement.html)` <paper-avatar src="${this.avatar}"></paper-avatar> ` : ""}
        ${this.icon != "" ? (0, _litElement.html)` <simple-icon icon="${this.icon}"></simple-icon> ` : ""}
        ${this.text != "" ? (0, _litElement.html)`
              <span class="${this._getTextLabelClass(this.avatar, this.icon)}"
                >${this.text}</span
              >
            ` : ""}
      </div>
      <div><slot name="button"></slot><slot></slot></div>
    `;
    }

    static get tag() {
      return "lrnsys-button-inner";
    }
    /**
     * LitElement / popular convention
     */


    static get properties() {
      return {
        /**
         * Icon to present for clicking.
         */
        icon: {
          type: String
        },

        /**
         * Icon to present for clicking.
         */
        avatar: {
          type: String
        },

        /**
         * Text to present for clicking.
         */
        text: {
          type: String
        }
      };
    }
    /**
     * Find out if the text does not have an avatar or an icon to the left,
     * and add a class to remove the left margin.
     */


    _getTextLabelClass(avatar, icon) {
      if (!avatar && !icon) {
        return "text-label-only";
      }

      return "text-label";
    }

  }

  _exports.LrnsysButtonInner = LrnsysButtonInner;
  window.customElements.define(LrnsysButtonInner.tag, LrnsysButtonInner);
});