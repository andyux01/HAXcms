import{_$LH as t,noChange as e}from"./lit-html.js";
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
<<<<<<< Updated upstream
 */const r={boundAttributeSuffix:t.O,marker:t.P,markerMatch:t.A,HTML_RESULT:t.C,getTemplateHtml:t.M,overrideDirectiveResolve:(t,e)=>class extends t{_$AS(t,r){return e(this,r)}},setDirectiveClass(t,e){t._$litDirective$=e},getAttributePartCommittedValue:(t,r,a)=>{let i=e;return t.j=t=>i=t,t._$AI(r,t,a),i},connectedDisconnectable:t=>({...t,_$AU:!0}),resolveDirective:t.R,AttributePart:t.V,PropertyPart:t.U,BooleanAttributePart:t.H,EventPart:t.N,ElementPart:t.F,TemplateInstance:t.L,isIterable:t.D,ChildPart:t.I};export{r as _$LH};
=======
 */const r={boundAttributeSuffix:t.j,marker:t.P,markerMatch:t.A,HTML_RESULT:t.C,getTemplateHtml:t.M,overrideDirectiveResolve:(t,e)=>class extends t{_$AS(t,r){return e(this,r)}},setDirectiveClass(t,e){t._$litDirective$=e},getAttributePartCommittedValue:(t,r,a)=>{let i=e;return t.O=t=>i=t,t._$AI(r,t,a),i},connectedDisconnectable:t=>({...t,_$AU:!0}),resolveDirective:t.V,AttributePart:t.I,PropertyPart:t.U,BooleanAttributePart:t.H,EventPart:t.N,ElementPart:t.B,TemplateInstance:t.L,isIterable:t.R,ChildPart:t.D};export{r as _$LH};
>>>>>>> Stashed changes
