import{LitElement as e,html as i,css as t,svg as r}from"../../../lit/index.js";import{SimpleColors as o}from"../../simple-colors/simple-colors.js";import{SchemaBehaviors as s}from"../../schema-behaviors/schema-behaviors.js";import{lazyImageLoader as d}from"../../lazy-image-helpers/lazy-image-helpers.js";import{I18NMixin as a}from"../../i18n-manager/lib/I18NMixin.js";import"../../simple-icon/simple-icon.js";import"../../simple-icon/lib/simple-icons.js";import"../../simple-icon/lib/simple-icon-button.js";import{DDD as n}from"../../d-d-d/d-d-d.js";class SelfCheckProposed extends(a(d(s(n)))){constructor(){super(),this.correct=!1,this.alt="",this.image="",this.question="",this.accentColor="blue",this.title="Self-Check",this.fullWidthImage=!1,this.t={revealAnswer:"Reveal Answer",close:"Close",moreInformation:"More information"},this.registerLocalization({context:this,basePath:import.meta.url,locales:["he","ja","es"]})}static get styles(){return[...super.styles,t`
        :host {
          display: block;
          margin: var(--ddd-spacing-4) 0;
        }
        :host([hidden]),
        *[hidden] {
          display: none !important;
        }

        div.card {
          overflow: hidden;
        }

        simple-icon-button {
          display: flex;
          --simple-icon-width: var(--ddd-icon-sm);
          --simple-icon-height: var(--ddd-icon-sm);
          height: var(--ddd-icon-xl);
          width: var(--ddd-icon-xl);
          margin: 0 var(--ddd-spacing-4) 0 var(--ddd-spacing-3);
          padding: var(--ddd-spacing-1);
        }

        .check_button {
          display: flex;
          justify-content: flex-end;
        }
        :host([link]) .close_button {
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        .close_button {
          display: flex;
          justify-content: flex-end;
        }

        simple-icon#questionmark {
          --simple-icon-width: var(--ddd-icon-lg);
          --simple-icon-height: var(--ddd-icon-lg);
          margin: 0 var(--ddd-spacing-4) 0 var(--ddd-spacing-3);
          padding: var(--ddd-spacing-2);
        }

        .heading {
          display: flex;
          align-items: center;
          text-transform: uppercase;
          font-size: var(--ddd-font-size-m);
          font-weight: var(--ddd-font-primary-medium);
          color: 
          var(--ddd-component-self-check-title-color,
            var(--ddd-theme-font-color,
              var(--simple-colors-default-theme-grey-12, #000)
            )
          );
        }

        #header_wrap {
          color: 
          var(--ddd-component-self-check-title-color,
            var(--ddd-theme-font-color,
              var(--simple-colors-default-theme-grey-12, #000)
            )
          );
          background-color: 
          var(--ddd-component-self-check-title-background,
            var(--ddd-theme-accent-color,
              var(--simple-colors-default-theme-grey-1, #fff)
            )
          );
          display: flex;
          align-items: center;
          width: 100%;
          margin:  calc(var(--ddd-spacing-6) * -1) 0 0;
          padding:var(--ddd-spacing-3);
        }

        #question_wrap {
          color: var(
            --ddd-component-self-check-question-text,
            var(--simple-colors-default-theme-grey-12, #000)
          );
          background-color: var(
            --ddd-component-self-check-question-background,
            var(--simple-colors-default-theme-grey-1, #fff)
          );
          position: relative;
        }

        .question {
          font-size: var(--ddd-theme-h5-font-size);
          line-height: var(--ddd-lh-120);
          padding: var(--ddd-spacing-5) var(--ddd-spacing-3) var(--ddd-spacing-5) var(--ddd-spacing-6);
        }

        :host([correct]) .question {
          display: none;
        }

        #answer_wrap {
          visibility: hidden;
          opacity: 0;
          color: var(
            --ddd-component-self-check-answer-text,
            var(--simple-colors-default-theme-grey-1, #fff)
          );
          background-color: var(
            --ddd-component-self-check-answer-background,
            var(--simple-colors-default-theme-light-green-11, #00762e)
          );
          width: 100%;
          top: 0;
          left: calc(100%);
          transition: all 0.2s ease;
          position: absolute;
        }

        :host([correct]) #answer_wrap {
          visibility: visible;
          opacity: 1;
          position: relative;
          left: 0;
        }

        .answer {
          font-size: var(--ddd-font-size-3xs);
          padding: var(--ddd-spacing-5) var(--ddd-spacing-3) var(--ddd-spacing-5) var(--ddd-spacing-6);
          line-height: var(--ddd-lh-120);
        }

        #quote_start {
          display: inline-flex;
          transform: rotateY(180deg);
        }

        #quote_end {
          display: inline-flex;
        }


        .triangle {
          width: 0;
          height: 0;
          border-left: var(--ddd-spacing-6) solid transparent;
          border-right: var(--ddd-spacing-6) solid transparent;
          border-bottom: var(--ddd-spacing-6) solid
          var(--ddd-component-self-check-title-background,
            var(--ddd-theme-accent-color,
              var(--simple-colors-default-theme-grey-1, #fff)
            )
          );
          position: relative;
          top: calc(var(--ddd-spacing-5) * -1);
          left: var(--ddd-spacing-9);
        }

        .more_info {
          display: inline;
        }

        .more_info a {
          color: var(
            --self-check-answer-text,
            var(--simple-colors-default-theme-grey-1, #fff)
          );
        }

        .more_info a:hover {
          text-decoration: none;
        }
        .image-wrap {
          max-height: 400px;
          overflow: hidden;
        }
        ::slotted([slot="heading"]) {
          margin: 0;
        }
        ::slotted(p:first-child) {
          margin-top: 0;
        }
        ::slotted(p:last-child) {
          margin-top: 0;
        }
      `]}render(){return i`
      <div class="card bs-lg b-sm">
        <div class="image-wrap">
          ${this.renderSVGLoader()}
          <img
            src="${this.image}"
            alt="${this.alt}"
            aria-describedby="${this.describedBy||""}"
            loading="lazy"
          />
        </div>
        <div class="triangle"></div>
        <div id="header_wrap">
          <simple-icon
            class="r-circle"
            id="questionmark"
            icon="icons:help"
            ?dark="${!this.dark}"
            contrast="4"
          ></simple-icon>
          <div class="heading" id="title">
            <slot name="heading">${this.title}</slot>
          </div>
        </div>
        <div id="question_wrap">
          <div
            class="question"
            aria-hidden="${this.correct?"true":"false"}"
          >
            <slot name="question"></slot>
            <div class="check_button">
              <simple-icon-button
                controls="answer_wrap"
                label="${this.t.revealAnswer}"
                id="checkBtn"
                class="check-btn"
                icon="image:remove-red-eye"
                ?dark="${this.dark}"
                @click="${this.openAnswer}"
              ></simple-icon-button>
              <simple-tooltip aria-hidden="true" for="checkBtn" position="left">
                ${this.t.revealAnswer}
              </simple-tooltip>
            </div>
          </div>
          <div
            id="answer_wrap"
            aria-hidden="${this.correct?"false":"true"}"
            aria-live="polite"
          >
            <div class="answer">
              <user-action track="visibility">
                <slot></slot>
              </user-action>
              <div class="close_button">
              ${this.link?i`
                    <div class="more_info">
                      <user-action track="click" every="every"
                        ><a href="${this.link}" target="_blank" rel="noopener"
                          >${this.t.moreInformation}...</a
                        ></user-action
                      >
                    </div>
                  `:""}
                <simple-icon-button
                  label="${this.t.close}"
                  id="closeBtn"
                  ?dark="${!this.dark}"
                  icon="icons:close"
                  @click="${this.openAnswer}"
                >
                </simple-icon-button>
                <simple-tooltip
                  aria-hidden="true"
                  for="closeBtn"
                  position="left"
                >
                  ${this.t.close}
                </simple-tooltip>
              </div>
            </div>
          </div>
        </div>
      </div>
    `}updated(e){super.updated&&super.updated(e),e.forEach(((e,i)=>{"elementVisible"==i&&this.elementVisible&&(import("../../user-action/user-action.js"),import("../../simple-tooltip/simple-tooltip.js"))}))}static get tag(){return"self-check-proposed"}static get properties(){return{...super.properties,title:{type:String},question:{type:String},image:{type:String,reflect:!0},alt:{type:String,reflect:!0},describedBy:{type:String,attribute:"described-by"},link:{type:String},correct:{type:Boolean,reflect:!0}}}haxHooks(){return{activeElementChanged:"haxactiveElementChanged"}}haxactiveElementChanged(e,i){let t=this.shadowRoot.querySelector("#title");return i?t.setAttribute("contenteditable",!0):(t.removeAttribute("contenteditable"),this.title=t.innerText),!1}openAnswer(e){this.correct=!this.correct}static get haxProperties(){return new URL(`./lib/${this.tag}.haxProperties.json`,import.meta.url).href}}customElements.define(SelfCheckProposed.tag,SelfCheckProposed);export{SelfCheckProposed};