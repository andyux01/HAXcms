import{LitElement as t,html as e,css as i}from"../../../lit/index.js";import{store as o}from"../../haxcms-elements/lib/core/haxcms-site-store.js";import{autorun as r,toJS as n}from"../../../mobx/dist/mobx.esm.js";import{HAXCMSThemeParts as s}from"../../haxcms-elements/lib/core/utils/HAXCMSThemeParts.js";export class TrainingButton extends(s(t)){constructor(){super(),this.title="",this.disabled=!1,this.index=null,this.active=!1,this.slug=null,r((t=>{this.editMode=n(o.editMode),this.__disposer.push(t)}))}static get tag(){return"training-button"}static get properties(){return{...super.properties,title:{type:String},index:{type:Number},slug:{type:String},editMode:{type:Boolean,reflect:!0,attribute:"edit-mode"},active:{type:Boolean,reflect:!0},disabled:{type:Boolean,reflect:!0}}}static get styles(){return[...super.styles,i`
      :host {
        display: block;
        margin: 8px 0px;
      }
      button {
        border: 1px solid rgb(218, 220, 224);
        background-color: rgb(255, 255, 255);
        border-radius: 5px;
        text-decoration: none;
        cursor: pointer;
        display: flex;
        -webkit-box-align: center;
        align-items: center;
        color: rgb(128, 134, 139);
        background-color: transparent;
        min-height: 52px;
        font-weight: bold;
        line-height: 20px;
        box-sizing: content-box;
        width: 100%;
        position: relative;
        margin: 0;
        padding: 0;
        font-family: Roboto, Noto, sans-serif;
        -webkit-font-smoothing: antialiased;
      }
      #title {
        font-size: 13px;
        text-align: left;
        font-weight: normal;
      }

      .dot div {
        font-size: 15px;
        align-items: center;
        margin-left: 10px;
        margin-top: auto;
        margin-bottom: auto;
        margin-right: 10px;
        color: white;
      }

      .dot {
        height: 25px;
        width: 25px;
        background-color: rgb(128 134 140);
        border-radius: 50%;
        margin: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      a,button {
        text-decoration: none;
      }

      :host([disabled]) {
        background-color: #dddddd;
        cursor: not-allowed;
        pointer-events: none;
        opacity: 0.8;
      }

      button:hover,
      button:focus,
      button:active {
        border: 1px solid grey;
        color: black;
      }

      :host([active]) button {
        color: white;
        background-color: #1a73e8;
      }
    `]}render(){return e`
    <a ?disabled="${this.disabled||this.editMode}" href="${this.slug}" tabindex="-1"
    @click="${this._editClick}"
        .part="${this.editMode?"edit-mode-active":""}">
      <button ?disabled="${this.disabled}" class="wrapper">
        <span class="dot">
          <div>${this.index}</div>
        </span>
        <span id="title">${this.title}</span>
        <slot></slot>
      </button>
    </a>
    `}_editClick(t){(this.disabled||this.editMode)&&t.preventDefault()}}customElements.define(TrainingButton.tag,TrainingButton);