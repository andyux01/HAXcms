import{LitElement as i,html as e,css as o}from"../../lit/index.js";import"../simple-icon/simple-icon.js";import"../simple-icon/lib/simple-icons.js";import"../simple-icon/lib/simple-icon-button.js";import"../hax-iconset/lib/simple-hax-iconset.js";export class InlineAudio extends i{static get tag(){return"inline-audio"}static get properties(){return{source:{type:String,reflect:!0},icon:{type:String},playing:{type:Boolean,reflect:!0},canPlay:{type:Boolean,reflect:!0}}}static get styles(){return[o`
        :host {
          display: inline;
          vertical-align: middle;
          color: #1a2b42;
          max-width: 960px;
          margin: 0 auto;
          background-color: var(--inline-audio-background-color);
        }
        .container {
          display: inline-flex;
          align-items: center;
          padding: 4px 4px 4px 0px;
          background: grey;
          border-radius: 4px;
          min-width: 64px;
          font-size: 18px;
          /* cursor: pointer; */
        }
        .icon-spacing {
          padding-right: 8px;
        }
      `]}constructor(){super(),this.source="",this.icon="av:play-arrow",this.playing=!1,this.canPlay=!1}handleProgress(){this.shadowRoot.querySelector(".player").ended&&this.audioController(!1);var i=this.shadowRoot.querySelector(".player").duration,e=this.shadowRoot.querySelector(".player").currentTime/i*100;this.shadowRoot.querySelector(".container").style.background=`linear-gradient(90deg, orange 0% ${e}%, grey ${e}% 100%)`}loadAudio(i){const e=this.shadowRoot.querySelector(".player");e.src=i,e.load()}handlePlaythrough(){setTimeout((()=>{console.log("Loading finished"),this.canPlay=!0,this.audioController(!0)}),500)}audioController(i){var e=this.shadowRoot.querySelector(".player");i?(e.play(),this.playing=!0,this.icon="av:pause",console.log(this.playing)):(e.pause(),this.playing=!1,this.icon="av:play-arrow",console.log(this.playing))}handleClickEvent(){var i=this.shadowRoot.querySelector(".player");i.hasAttribute("src")||(this.icon="hax:loading",this.loadAudio(this.source)),this.canPlay&&(i.paused?this.audioController(!0):this.audioController(!1))}render(){return e`
      <div class="container">
        <simple-icon-button
          class="icon-spacing"
          icon="${this.icon}"
          @click="${this.handleClickEvent}"
        ></simple-icon-button>
        <slot></slot>
        <audio
          class="player"
          type="audio/mpeg"
          @canplaythrough="${this.handlePlaythrough}"
          @timeupdate="${this.handleProgress}"
        ></audio>
        <div></div>
      </div>
    `}static get haxProperties(){return new URL(`./lib/${this.tag}.haxProperties.json`,import.meta.url).href}}customElements.define(InlineAudio.tag,InlineAudio);