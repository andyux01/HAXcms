/**
 * Copyright 2021 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 * @demo demo/index.html
 */
import{LitElement as t,html as e,css as s}from"../../lit/index.js";import"../simple-toolbar/lib/simple-toolbar-button.js";import{I18NMixin as r}from"../i18n-manager/lib/I18NMixin.js";export class MarkTheWords extends(r(t)){static get tag(){return"mark-the-words"}constructor(){super(),this.answers=null,this.correctAnswers=[],this.wordList=this.innerText.split(/\s+/g),this.question="Mark the words that are correct",this.isEnabled=!0,this.numberCorrect=0,this.numberGuessed=0,this._haxstate=!1,this.demoMode=!1,this.t={check:"Check",tryAgain:"Try Again",editMode:"Edit Mode",tryMode:"Try Mode"}}static get properties(){return{...super.properties,wordList:{type:Array},demoMode:{type:Boolean},answers:{type:String},correctAnswers:{type:Array},missedAnswers:{type:Array},question:{type:String},isEnabled:{type:Boolean},_haxstate:{type:Boolean},numberCorrect:{type:Number},numberGuessed:{type:Number}}}updated(t){super.updated(t),t.forEach(((t,e)=>{if("wordList"===e&&this.rebuildContents(this[e]),"answers"===e&&this[e]){this.correctAnswers=this[e].split(",");for(var s=0;s<this.correctAnswers.length;s++)this.correctAnswers[s]=this.correctAnswers[s].toUpperCase()}"numberCorrect"===e&&this.numberCorrect===this.numberGuessed&&0!==this.numberCorrect&&0!==this.numberGuessed&&import("../multiple-choice/lib/confetti-container.js").then((t=>{setTimeout((()=>{this.shadowRoot.querySelector("#confetti").setAttribute("popped","")}),0)}))}))}rebuildContents(t){this.shadowRoot.querySelector(".text").innerHTML="",t.forEach((t=>{let e=document.createElement("span");e.innerText=t,e.setAttribute("tabindex","-1"),e.addEventListener("click",this.selectWord.bind(this)),this.shadowRoot.querySelector(".text").appendChild(e)}))}static get styles(){return[s`
        :host {
          display: grid;
          padding: 16px;
          margin: 0px;
          border: 2px solid black;
        }
        span {
          display: inline-flex;
          font-size: var(--x-ample-font-size, 24px);
          padding: 2px;
          margin: 0 2px;
        }
        span:hover,
        span:focus {
          outline: 2px dashed blue;
          cursor: pointer;
        }
        span[data-selected] {
          outline: 2px solid purple;
        }
        span[data-selected]:hover,
        span[data-selected]:focus {
          outline: 2px solid blue;
        }
        span[data-status="correct"] {
          outline: 2px solid purple;
        }
        span[data-status="correct"]::after {
          content: "+1";
          font-size: 14px;
          color: green;
          font-weight: bold;
          border-radius: 50%;
          border: 2px solid purple;
          padding: 4px;
          margin-left: 8px;
          line-height: 14px;
        }
        span[data-status="incorrect"] {
          outline: 2px solid red;
        }
        span[data-status="incorrect"]::after {
          content: "-1";
          font-size: 14px;
          color: red;
          font-weight: bold;
          border-radius: 50%;
          border: 2px solid red;
          padding: 4px;
          margin-left: 8px;
          line-height: 14px;
        }
        span[check-mode="active"] {
          pointer-events: none;
        }
        .buttons {
          grid-column: 1;
          grid-row: 3;
          margin: 8px;
        }
        .correct {
          grid-column: 1;
          grid-row: 3;
          margin-top: 20px;
        }
        .question {
          margin-bottom: 0px;
          margin-top: 0px;
          grid-column: 1;
          grid-row: 1;
        }
        .text {
          grid-column: 1;
          grid-row: 2;
          margin-top: 0px;
        }
        .scoreExp {
          margin-top: 1px;
          margin-bottom: 1px;
          text-decoration: underline;
        }
      `]}selectWord(t){t.target.getAttribute("data-selected")?t.target.removeAttribute("data-selected"):t.target.setAttribute("data-selected","data-selected")}checkAnswer(t){if(this.isEnabled){this.isEnabled=!1;for(var e=0;e<this.wordList.length;e++)this.correctAnswers.includes(this.wordList[e].replace(/[&#^,+()$~%.":*?<>{}]/g,"").toUpperCase())&&this.numberCorrect++;const t=this.shadowRoot.querySelectorAll(".text span[data-selected]");for(e=0;e<t.length;e++){const s=t[e];this.correctAnswers.includes(s.innerText.replace(/[&#^,+()$~%.":*?<>{}]/g,"").toUpperCase())?(s.setAttribute("data-status","correct"),this.numberGuessed++):(s.setAttribute("data-status","incorrect"),this.numberGuessed>0&&this.numberGuessed--)}const s=this.shadowRoot.querySelectorAll(".text span");for(e=0;e<s.length;e++){s[e].setAttribute("check-mode","active")}}else{this.isEnabled=!0,this.numberGuessed=0,this.numberCorrect=0;const t=this.shadowRoot.querySelectorAll(".text span[data-selected]");for(e=0;e<t.length;e++){const s=t[e];s.getAttribute("data-status")&&(s.removeAttribute("data-status"),s.removeAttribute("data-selected"))}const s=this.shadowRoot.querySelectorAll(".text span");for(e=0;e<s.length;e++){s[e].setAttribute("check-mode","inactive")}}}render(){return e`
      <confetti-container id="confetti">
        <p class="question">${this.question}</p>
        ${this._haxstate&&this.demoMode?e`<slot></slot>`:e`<div class="text"></div>`}
        <div class="buttons">
          <simple-toolbar-button
            @click="${this.checkAnswer}"
            icon="check"
            label="${this.isEnabled?this.t.check:this.t.tryAgain}"
            show-text-label
            icon-position="left"
            align-vertical="center"
            align-horizontal="center"
          ></simple-toolbar-button>
          ${this.isEnabled?"":e`${this.numberGuessed}/${this.numberCorrect}
              ${Math.round(this.numberGuessed/this.numberCorrect*100*10)/10}%`}
          ${this._haxstate?e`<simple-toolbar-button
                @click="${this.toggleDemo}"
                icon="${this.demoMode?"av:play-circle-filled":"image:edit"}"
                label="${this.demoMode?this.t.tryMode:this.t.editMode}"
                show-text-label
                icon-position="left"
                align-vertical="center"
                align-horizontal="center"
              ></simple-toolbar-button>`:""}
        </div>
      </confetti-container>
    `}toggleDemo(){this.demoMode=!this.demoMode,this.demoMode||(this.wordList=this.innerText.split(/\s+/g))}haxHooks(){return{editModeChanged:"haxeditModeChanged",activeElementChanged:"haxactiveElementChanged"}}haxactiveElementChanged(t,e){e&&(this._haxstate=e)}haxeditModeChanged(t){this._haxstate=t}static get haxProperties(){return new URL(`./lib/${this.tag}.haxProperties.json`,import.meta.url).href}}customElements.define(MarkTheWords.tag,MarkTheWords);