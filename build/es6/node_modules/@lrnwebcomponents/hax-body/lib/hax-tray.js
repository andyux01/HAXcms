import{LitElement as t,html as e,css as a}from"../../../lit-element/lit-element.js";import{winEventsElement as i,camelCaseToDash as o,wipeSlot as s,nodeToHaxElement as n,haxElementToNode as r,normalizeEventPath as l}from"../../utils/utils.js";import{HaxSchematizer as d,HaxElementizer as c}from"../../hax-body-behaviors/lib/HAXFields.js";import{SimpleTourFinder as h}from"../../simple-popover/lib/SimpleTourFinder.js";import{HAXStore as p}from"./hax-store.js";import{autorun as u,toJS as m}from"../../../mobx/dist/mobx.esm.js";import{HaxComponentStyles as g,HaxTrayDetail as b}from"./hax-ui-styles.js";import"../../simple-fields/simple-fields.js";import"../../simple-icon/lib/simple-icons.js";import"../../hax-iconset/lib/simple-hax-iconset.js";import"../../simple-toolbar/simple-toolbar.js";import"../../simple-toolbar/lib/simple-button-grid.js";import"./hax-tray-upload.js";import"./hax-gizmo-browser.js";import"./hax-app-browser.js";import"./hax-stax-browser.js";import"./hax-map.js";import"./hax-preferences-dialog.js";import"./hax-toolbar.js";import"./hax-toolbar-menu.js";import{I18NMixin as v}from"../../i18n-manager/lib/I18NMixin.js";import{Undo as y}from"../../undo-manager/undo-manager.js";class HaxTray extends(v(h(i(t)))){static get tag(){return"hax-tray"}constructor(){super(),this.tourName="hax",this.__winEvents={"can-redo-changed":"_redoChanged","can-undo-changed":"_undoChanged","hax-drop-focus-event":"_expandSettingsPanel"},this.t={structure:"Structure",structureTip:"View Page Structure",editSelected:"Edit selected",edit:"Edit",save:"Save",move:"Move",moveMenu:"Move menu",menuAlignment:"Menu Alignment",topLeft:"Top Left",topRight:"Top Right",bottomLeft:"Bottom Left",bottomRight:"Bottom Right",menuPosition:"Menu position",changeSideVisually:"Change which side of the screen the menu is affixed to visually.",expand:"Expand",collapse:"Collapse",menuSize:"Menu size",menuSizeDescription:"Expand or collapse the menu visually.",takeATour:"Take a Tour",settings:"Settings",source:"Source",undo:"Undo",redo:"Redo",media:"Media",blocks:"Blocks",cancel:"Cancel",cancelWithoutSaving:"Cancel without saving",configure:"Configure",advanced:"Advanced",layout:"Layout",alignment:"Alignment",left:"Left",center:"Center",right:"Right",search:"Search",templates:"Templates",width:"Width"},this.registerLocalization({context:this,namespace:"hax",updateCallback:"_updateTrayDetail"}),this._initial=!0,this.activeValue={settings:{layout:{__position:"hax-align-left",__scale:100},configure:{},advanced:{}}},this.collapsed=!1,this.activeTab="item-0",this.activeSchema=[],this.canUndo=!1,this.canRedo=!1,this.elementAlign="right",this.trayDetail="content-edit",this.activeTagName="",this.traySizeIcon="hax:arrow-expand-right",this.__setup=!1,setTimeout(()=>{import("./hax-tray-button.js"),this.addEventListener("hax-tray-button-click",this._processTrayEvent.bind(this))},0),u(()=>{this.activeGizmo=m(p.activeGizmo)}),u(()=>{this.activeNode=m(p.activeNode)}),u(()=>{this.tourOpened=m(p.tourOpened)}),u(()=>{this.globalPreferences=m(p.globalPreferences),this.haxUiTheme=(this.globalPreferences||{}).haxUiTheme||"hax",document.body.setAttribute("hax-ui-theme",this.haxUiTheme)}),u(()=>{this.editMode=m(p.editMode)})}_expandSettingsPanel(t){this.shadowRoot.querySelector("#content-edit").click()}_redoChanged(t){this.canRedo=t.detail.value}_undoChanged(t){this.canUndo=t.detail.value}static get styles(){return[...super.styles||[],...b,...g,a`
        :host {
          display: block;
          z-index: 1000;
          position: absolute;
          height: calc(100vh - var(--hax-tray-top, 0px));
          top: var(--hax-tray-top, 0px);
          overflow: auto;
          font-family: var(--hax-ui-font-family);
          font-size: var(--hax-ui-font-size);
          color: var(--hax-ui-color);
          transition: 0.2s all ease-in-out;
          transition-delay: 0.3s;
          transition: 0s color linear !important;
        }
        :host(:focus-within),
        :host(:hover) {
          z-index: var(--hax-ui-focus-z-index);
        }
        :host([collapsed]) {
          height: unset;
          transition-delay: 0.3s;
        }
        .wrapper {
          position: fixed;
          top: 0;
          width: var(--hax-tray-width);
          transition: 0.2s all ease-in-out;
          opacity: 0;
          visibility: hidden;
          pointer-events: none;
          display: flex;
          flex-direction: column;
          max-height: 100%;
          margin: 0;
          padding: 0;
        }
        #wrapper,
        #wrapper > * {
          overflow-x: hidden;
          overflow-y: auto;
        }
        :host([element-align="left"]) .wrapper,
        :host([element-align="bottom-left"]) .wrapper {
          left: -1000px;
        }
        :host([element-align="right"]) .wrapper,
        :host([element-align="bottom-right"]) .wrapper {
          right: -1000px;
        }
        :host([edit-mode][element-align="left"]) .wrapper,
        :host([edit-mode][element-align="bottom-left"]) .wrapper {
          left: 0;
        }
        :host([edit-mode][element-align="right"])
          .wrapper
          :host([edit-mode][element-align="bottom-right"])
          .wrapper {
          right: 0;
        }
        :host([edit-mode][element-align="bottom-left"]) .wrapper,
        :host([edit-mode][element-align="bottom-right"]) .wrapper {
          top: unset;
          bottom: 0;
        }
        :host([edit-mode][element-align="custom"]) .wrapper {
          left: var(--hax-tray-custom-x);
          left: clamp(
            0px,
            var(--hax-tray-custom-x),
            calc(100vw - var(--hax-tray-width))
          );
        }
        :host([edit-mode][collapsed][element-align="custom"]) .wrapper {
          top: var(--hax-tray-custom-y);
          top: clamp(0px, var(--hax-tray-custom-y), calc(100vh - 34px));
        }
        :host([edit-mode]) .wrapper {
          opacity: 1;
          visibility: visible;
          right: 0;
          pointer-events: all;
        }
        #tray-detail {
          flex: 1 1 auto;
          overflow-y: auto;
          max-height: 100vh;
          border: 1px solid var(--hax-ui-border-color);
          border-top: 0px solid var(--hax-ui-border-color);
          max-width: calc(var(--hax-tray-width) - 2 * var(--hax-ui-spacing-xs));
          background-color: var(--hax-ui-background-color);
          padding: 0 var(--hax-ui-spacing-lg) var(--hax-ui-spacing);
          transition: all 0.3s linear;
          transition: 0s background-color linear !important;
          transition: 0s border-color linear !important;
        }
        :host([edit-mode][collapsed]) #tray-detail {
          left: unset !important;
          right: unset !important;
          max-height: 0vh;
          border-bottom: 0px solid var(--hax-ui-border-color);
          padding: 0 var(--hax-ui-spacing-lg) 0;
          max-width: calc(100% - 2 * var(--hax-ui-spacing-lg) - 2px);
          transition: all 0.3s linear;
          transition: 0s background-color linear !important;
          transition: 0s border-color linear !important;
        }
        #tray-detail[hidden] {
          height: 0px;
        }
        hax-toolbar {
          flex: 0 0 auto;
          border: none;
          background-color: var(--hax-ui-background-color);
          width: var(--hax-tray-width);
          transition: all 0.5s ease-in-out;
          transition: 0s color linear !important;
          transition: 0s background-color linear !important;
          transition: 0s border-color linear !important;
        }
        simple-button-grid {
          background-color: var(--hax-ui-background-color);
          padding: var(--hax-ui-spacing-xs);
          border-bottom: none;
        }
        hax-toolbar .group,
        simple-button-grid .group {
          border: none;
          margin: 0;
          padding: 0;
        }
        hax-toolbar .group {
          justify-content: space-around;
          flex: 0 0 auto;
        }
        hax-toolbar *[feature]::part(button) {
          border: 1px solid var(--hax-ui-color-accent-secondary);
        }
        :host([edit-mode][collapsed]) hax-toolbar.tray-detail-ops {
          border-bottom: 1px solid var(--hax-ui-border-color);
        }
        #menugroup {
          flex: 1 1 auto;
        }
        #menugroup > * {
          align-items: flex-start;
          flex: 0 0 50%;
        }
        #haxcancelbutton::part(dropdown-icon) {
          display: none;
        }
        #contentgroup > * {
          --simple-toolbar-button-white-space: wrap;
        }
        #top-left::part(icon),
        #bottom-right::part(icon) {
          transform: rotate(45deg);
        }
        #top-right::part(icon),
        #bottom-left::part(icon) {
          transform: rotate(-45deg);
        }
        #content-map::part(icon) {
          transform: rotate(180deg);
        }
        hax-toolbar,
        hax-tray-button,
        hax-app-browser,
        hax-gizmo-browser {
          transition: 0.2s all ease-in-out;
          transition: 0s color linear !important;
          transition: 0s background-color linear !important;
          transition: 0s border-color linear !important;
          visibility: visible;
        }
        #tray-grid {
          flex: 0 0 auto;
          border: 1px solid var(--hax-ui-border-color);
        }
        #tray-grid hax-tray-button::part(button) {
          border: 1px solid var(--hax-ui-border-color);
        }
        #tray-grid > hax-tray-button::part(button) {
          --simple-toolbar-button-white-space: normal !important;
        }
        #tray-grid #haxsavebutton {
          grid-column: 1 / 4;
        }
        hax-toolbar:not(:defined),
        hax-tray-button:not(:defined),
        hax-app-browser:not(:defined),
        hax-gizmo-browser:not(:defined) {
          visibility: hidden;
        }
        hax-tray-upload {
          flex: 0 0 auto;
        }
        *[hidden] {
          display: none;
        }
        #settingscollapse div[slot="content"] {
          padding: 0;
          margin: 0;
        }
        :host([element-align="right"]) #button {
          right: 0;
        }
        :host([element-align="left"]) #button {
          left: 0;
        }

        #button {
          position: fixed;
          top: 0;
          visibility: visible;
          margin: var(--hax-ui-spacing-xs);
        }
        :host([edit-mode]) #button {
          visibility: hidden;
          opacity: 0;
        }
        #button:hover {
          opacity: 1;
        }
        /** This is mobile layout for controls */
        @media screen and (max-width: 800px) {
          .wrapper {
            top: 0;
            left: 0;
            right: 0;
            margin: 0 !important;
          }
          #toggle-element-align {
            display: none;
          }
        }
        @media screen and (max-width: 600px) {
          :host([edit-mode]) .hide-small {
            display: none;
          }
        }
      `]}render(){return e`
      ${this.panelOpsTemplate}
      <div class="wrapper" part="hax-tray-wrapper">
        ${this.menuToolbarTemplate}
        ${this.gridTemplate}${this.trayDetailTemplate}
      </div>
    `}get panelOpsTemplate(){return this.hidePanelOps?"":e`
          <hax-tray-button
            large
            voice-command="edit page"
            .data-opened="${this.editMode}"
            @click="${this._clickEditButton}"
            icon="create"
            id="button"
            feature
            show-text-label
            label="${this.editMode?this.t.save:this.t.edit}"
          ></hax-tray-button>
        `}get toolbarsTemplate(){return e`${this.opsToolbarTemplate}${this.trayToolbarTemplate}`}get gridTemplate(){return e`<simple-button-grid id="tray-grid" columns="4" rows="3">
      ${this.saveButtons}${this.doButtons} ${this.sourceButton}
      ${this.settingsButton}
      <slot name="tray-buttons-pre"></slot>
      ${this.contentButtons} ${this.mapButton}
    </simple-button-grid>`}get menuButtons(){return e`
      <div id="menugroup" class="group collapse-menu">
        <hax-toolbar-menu
          ?disabled="${this.hasActiveEditingElement}"
          id="drag"
          feature
          action
          icon="hax:arrow-all"
          label="${this.t.moveMenu}"
          draggable="true"
          reset-on-select
          data-simple-tour-stop
          data-stop-title="${this.t.menuAlignment}"
          show-text-label
          @dragstart="${this._dragStart}"
          @dragend="${this._dragEnd}"
        >
          <simple-toolbar-menu-item slot="menuitem">
            <hax-tray-button
              role="menuitem"
              show-text-label
              align-horizontal="left"
              voice-command="toggle alignment"
              id="top-left"
              event-name="toggle-element-align"
              icon="arrow-back"
              label="${this.t.topLeft}"
              index="0"
              ?disabled="${"left"==this.elementAlign}"
              ?toggled="${"left"==this.elementAlign}"
            >
            </hax-tray-button>
          </simple-toolbar-menu-item>
          <simple-toolbar-menu-item slot="menuitem">
            <hax-tray-button
              role="menuitem"
              show-text-label
              align-horizontal="left"
              voice-command="toggle alignment"
              id="top-right"
              event-name="toggle-element-align"
              icon="arrow-forward"
              label="${this.t.topRight}"
              index="1"
              ?disabled="${"right"==this.elementAlign}"
              ?toggled="${"right"==this.elementAlign}"
            >
              >
            </hax-tray-button>
          </simple-toolbar-menu-item>
          <simple-toolbar-menu-item slot="menuitem">
            <hax-tray-button
              role="menuitem"
              show-text-label
              align-horizontal="left"
              voice-command="toggle alignment"
              id="bottom-left"
              event-name="toggle-element-align"
              icon="arrow-back"
              text-align="left"
              label="${this.t.bottomLeft}"
              ?disabled="${"bottom-left"==this.elementAlign}"
              ?toggled="${"bottom-left"==this.elementAlign}"
              index="2"
            >
            </hax-tray-button>
          </simple-toolbar-menu-item>
          <simple-toolbar-menu-item slot="menuitem">
            <hax-tray-button
              role="menuitem"
              show-text-label
              align-horizontal="left"
              voice-command="toggle alignment"
              id="bottom-right"
              event-name="toggle-element-align"
              icon="arrow-forward"
              label="${this.t.bottomRight}"
              text-align="left"
              ?disabled="${"bottom-right"==this.elementAlign}"
              ?toggled="${"bottom-right"==this.elementAlign}"
              index="3"
            >
              >
            </hax-tray-button>
          </simple-toolbar-menu-item>
          <div slot="tour" data-stop-title>${this.t.menuPosition}</div>
          <div slot="tour" data-stop-content>${this.t.changeSideVisually}</div>
        </hax-toolbar-menu>
        <hax-tray-button
          feature
          voice-command="toggle menu"
          id="toggle-tray-size"
          event-name="toggle-tray-size"
          show-text-label
          icon="${this.collapsed?"unfold-more":"unfold-less"}"
          label="${this.collapsed?this.t.expand:this.t.collapse}"
          data-simple-tour-stop
          show-text-label
          text-align="left"
        >
          <div data-stop-title>${this.t.menuSize}</div>
          <div data-stop-content>${this.t.menuSizeDescription}</div>
        </hax-tray-button>
      </div>
      <div class="group" id="tourgroup">
        <hax-tray-button
          feature
          event-name="${this.tourOpened?"stop-tour":"start-tour"}"
          icon="help"
          label="${this.t.takeATour}"
          voice-command="start tour"
          toggles
          ?toggled="${this.tourOpened}"
        ></hax-tray-button>
      </div>
    `}get menuToolbarTemplate(){return e` <hax-toolbar id="menubar" class="quick-buttons collapse-menu"
      >${this.menuButtons}</hax-toolbar
    >`}get saveButtons(){return this.hidePanelOps?"":e`
          <hax-tray-button
            @click="${this._clickSaveButton}"
            icon="save"
            icon-position="top"
            id="haxsavebutton"
            label="${this.editMode?this.t.save:this.t.edit}"
            event-name="save"
            voice-command="save (content)(page)"
            show-text-label
          ></hax-tray-button>
          <hax-toolbar-menu
            icon="close"
            id="haxcancelbutton"
            label="${this.t.cancel}"
            icon-position="top"
            show-text-label
            warning
          >
            <simple-toolbar-menu-item slot="menuitem">
              <hax-tray-button
                role="menuitem"
                danger
                align-horizontal="left"
                icon="close"
                id="haxcancelbutton"
                label="${this.t.cancelWithoutSaving}"
                event-name="cancel"
                voice-command="cancel"
                icon-position="left"
                show-text-label
              ></hax-tray-button>
            </simple-toolbar-menu-item>
          </hax-toolbar-menu>
        `}get doButtons(){return e` <hax-tray-button
        icon="icons:undo"
        ?disabled="${!this.canUndo}"
        label="${this.t.undo}"
        event-name="undo"
        voice-command="undo"
        class="hide-small"
        data-simple-tour-stop
        data-stop-title="label"
        icon-position="top"
        show-text-label
      >
        <div slot="tour" data-stop-content>
          Undo the previous operation in the content, whether typing or adding a
          widget.
        </div>
      </hax-tray-button>
      <hax-tray-button
        icon="icons:redo"
        ?disabled="${!this.canRedo}"
        label="${this.t.redo}"
        event-name="redo"
        voice-command="redo"
        class="hide-small"
        data-simple-tour-stop
        data-stop-title="label"
        icon-position="top"
        show-text-label
      >
        <div slot="tour" data-stop-content>
          Redo the last action that you hit Undo on.
        </div>
      </hax-tray-button>`}get sourceButton(){return e` <hax-tray-button
      id="exportbtn"
      icon="code"
      label="${this.t.source}"
      voice-command="view (page) source"
      data-simple-tour-stop
      data-stop-title="label"
      icon-position="top"
      show-text-label
    >
      <div data-stop-content>
        Every change you make in HAX is ultimately writing HTML. Know HTML?
        Awesome, pop open the source view and make any changes you like. HTML is
        always behind the scenes ensuring that content is portable, well
        formatted and easy to read.
      </div>
    </hax-tray-button>`}get opsToolbarTemplate(){return e` <hax-toolbar class="quick-buttons collapse-menu">
      <div id="savegroup" class="ops group">${this.saveButtons}</div>
      <div id="dogroup" class="group">${this.doButtons}</div>
      <slot name="tray-buttons-pre"></slot>
      <div id="source" class="group">${this.sourceButton}</div>
    </hax-toolbar>`}get contentButtons(){return e` <hax-tray-button
        event-name="content-edit"
        icon="build"
        id="content-edit"
        label="${this.t.edit}"
        ?disabled="${!this.activeTagName||""==this.activeTagName||!this.activeNode||!this.activeNode.tagName}"
        voice-command="(modify)(configure)(edit) selected"
        data-simple-tour-stop
        data-stop-title="label"
        controls="tray-detail"
        show-text-label
        icon-position="top"
        tooltip="${this.t.editSelected} ${this.activeTagName}"
        toggles
        ?toggled="${"content-edit"===this.trayDetail}"
      >
        <div slot="tour" data-stop-content>
          When you want to add any content to the page from text, to images, to
          anything more advanced; you can always find items to add under the Add
          content menu. Click to expand, then either drag and drop items into
          the page or click and have them placed near whatever you are actively
          working on.
        </div>
      </hax-tray-button>
      <hax-tray-button
        event-name="content-add"
        icon="add-box"
        id="content-add"
        label="${this.t.blocks}"
        voice-command="blocks"
        show-text-label
        icon-position="top"
        data-simple-tour-stop
        data-stop-title="label"
        controls="tray-detail"
        toggles
        ?toggled="${"content-add"===this.trayDetail}"
      >
        <div slot="tour" data-stop-content>
          When you want to add any content to the page from text, to images, to
          anything more advanced; you can always find items to add under the Add
          content menu. Click to expand, then either drag and drop items into
          the page or click and have them placed near whatever you are actively
          working on.
        </div>
      </hax-tray-button>
      <hax-tray-button
        event-name="media-add"
        icon="image:collections"
        id="media-add"
        label="${this.t.media}"
        show-text-label
        icon-position="top"
        voice-command="Media"
        data-simple-tour-stop
        data-stop-title="label"
        controls="tray-detail"
        toggles
        ?toggled="${"media-add"===this.trayDetail}"
      >
        <div slot="tour" data-stop-content>
          Search for media and content anywhere that your copy of HAX has access
          to. Pick what to search, perform the search and then click or drag the
          item into the contnet.
        </div>
      </hax-tray-button>`}get mapButton(){return e`
      <hax-tray-button
        event-name="content-map"
        icon="icons:toc"
        id="content-map"
        label="${this.t.structure}"
        show-text-label
        icon-position="top"
        voice-command="open map"
        data-simple-tour-stop
        data-stop-title="label"
        controls="tray-detail"
        toggles
        ?toggled="${"content-map"===this.trayDetail}"
      >
        <div data-stop-content>
          This is a simple list of all the block areas of the page that are
          clickable to jump through items quickly as well as review some simple
          overview stats.
        </div>
      </hax-tray-button>
    `}get settingsButton(){return e`
      <hax-tray-button
        ?hidden="${this.hidePreferencesButton}"
        id="advanced-settings"
        event-name="advanced-settings"
        icon="settings"
        label="${this.t.settings}"
        voice-command="open preferences"
        show-text-label
        icon-position="top"
        data-simple-tour-stop
        data-stop-title="label"
        controls="tray-detail"
        toggles
        ?toggled="${"advanced-settings"===this.trayDetail}"
      >
        <div data-stop-content>
          Some advanced options for developers and experimental purposes.
        </div>
      </hax-tray-button>
    `}get trayToolbarTemplate(){return e` <hax-toolbar class="quick-buttons tray-detail-ops">
      <div id="contentgroup" class="group">${this.contentButtons}</div>
      <div id="mapgroup" class="group">${this.mapButton}</div>
      <div id="settingsgroup" class="group">${this.settingsButton}</div>
    </hax-toolbar>`}get trayDetailTemplate(){return e` <div
      id="tray-detail"
      aria-live="polite"
      aria-disabled="${this.collapsed?"true":"false"}"
      tabindex="${this.collapsed?"-1":"0"}"
      selected-detail="${this.trayDetail}"
    >
      <h4>
        ${this.trayLabel||`${this.t.editSelected} ${this.activeTagName}`}
      </h4>
      ${this.advancedSettingsTemplate} ${this.contentMapTemplate}
      ${this.contentEditTemplate} ${this.contentAddTemplate}
      ${this.mediaTemplate}
    </div>`}get advancedSettingsTemplate(){return e` <hax-preferences-dialog
      id="advanced-settings-tray"
      ?hidden="${"advanced-settings"!==this.trayDetail}"
    ></hax-preferences-dialog>`}get contentEditTemplate(){return e` <simple-fields
      id="settingsform"
      disable-responsive
      code-theme="${"system"==this.haxUiTheme?"auto":"haxdark"==this.haxUiTheme?"vs-dark":"vs"}"
      ?hidden="${"content-edit"!==this.trayDetail}"
    ></simple-fields>`}get contentAddTemplate(){let t="content-add"!==this.trayDetail;return e` <hax-gizmo-browser
        id="gizmobrowser"
        ?hidden="${t}"
      ></hax-gizmo-browser>
      <h5 ?hidden="${t}">${this.t.templates}</h5>
      <hax-stax-browser
        id="staxbrowser"
        ?hidden="${t}"
      ></hax-stax-browser>`}get contentMapTemplate(){return e`<hax-map
      controls="content-map-tray"
      ?hidden="${"content-map"!==this.trayDetail}"
    ></hax-map>`}get mediaTemplate(){let t="media-add"!==this.trayDetail;return e` <hax-tray-upload ?hidden="${t}"></hax-tray-upload>
      <h5 ?hidden="${t}">${this.t.search}</h5>
      <hax-app-browser id="appbrowser" ?hidden="${t}"></hax-app-browser>`}__simpleFieldsClick(t){try{this.activeTab=this.shadowRoot.querySelector("#settingsform").shadowRoot.querySelector("simple-fields").activeTab}catch(t){this.activeTab="item-0"}}_refreshAddData(){this.shadowRoot.querySelector("#gizmobrowser").resetList(m(p.gizmoList)),this.shadowRoot.querySelector("#staxbrowser").staxList=[...m(p.staxList)]}_processTrayEvent(t){var e=l(t)[0];switch(t.detail.eventName){case"insert-stax":this.dispatchEvent(new CustomEvent("hax-insert-content-array",{bubbles:!0,cancelable:!0,composed:!0,detail:e.stax}));break;case"insert-tag":let a,i={tag:t.detail.value},o=p.haxSchemaFromTag(t.detail.value);if(e.getAttribute("data-demo-schema")&&o&&o.demoSchema&&o.demoSchema)a=o.demoSchema[0];else{let t=JSON.parse(e.getAttribute("event-properties")),o=e.getAttribute("event-content");null==t&&(t={}),null==o&&(o=""),a=p.haxElementPrototype(i,t,o)}this.dispatchEvent(new CustomEvent("hax-insert-content",{bubbles:!0,cancelable:!0,composed:!0,detail:a}));break;case"advanced-settings":this.trayDetail=t.detail.eventName,this.collapsed=!1;break;case"toggle-element-align":let s=["left","right","bottom-left","bottom-right"],n=s[t.detail.index]?s[t.detail.index]:"right";t.detail.index>1&&(this.collapsed=!0),this.style.setProperty("--hax-tray-custom-y",null),this.style.setProperty("--hax-tray-custom-x",null),this.elementAlign=n;break;case"toggle-tray-size":this.collapsed=!this.collapsed;break;case"content-map":case"content-edit":case"content-add":case"media-add":this.trayDetail=t.detail.eventName,this.collapsed=!1;break;case"start-tour":this.startTour();break;case"stop-tour":window.SimpleTourManager.requestAvailability().stopTour("hax");break;case"undo":p.activeHaxBody.undo();break;case"redo":p.activeHaxBody.redo();break;case"cancel":confirm("Changes have not been saved, Click OK to close HAX or Cancel to continue editing.")&&(p.editMode=!1,this.dispatchEvent(new CustomEvent("hax-cancel",{bubbles:!0,composed:!0,cancelable:!1,detail:t.detail})))}}startTour(){this.__tour=this.__tour||window.SimpleTourManager.requestAvailability(),window.addEventListener("tour-changed",this._handleTourChanged.bind(this)),this.__tour.startTour("hax")}stopTour(){this.__tour=this.__tour||window.SimpleTourManager.requestAvailability(),this.__tour.stopTour("hax"),window.removeEventListener("tour-changed",this._handleTourChanged.bind(this))}_handleTourChanged(t){this.tourOpened=t.detail.active==this.tourName}static get properties(){return{...super.properties,offsetMargin:{type:String,attribute:"offset-margin"},collapsed:{type:Boolean,reflect:!0},traySizeIcon:{type:String},activeValue:{type:Object},activeSchema:{type:Object},elementAlign:{type:String,reflect:!0,attribute:"element-align"},light:{type:Boolean,reflect:!0},canUndo:{type:Boolean,attribute:"can-undo"},canRedo:{type:Boolean,attribute:"can-redo"},haxUiTheme:{type:String},hidePreferencesButton:{type:Boolean,reflect:!0,attribute:"hide-preferences-button"},hidePanelOps:{type:Boolean,reflect:!0,attribute:"hide-panel-ops"},globalPreferences:{type:Object},activeNode:{type:Object},activeTagName:{type:String},activeGizmo:{type:Object},editMode:{type:Boolean,reflect:!0,attribute:"edit-mode"},trayDetail:{type:String},trayLabel:{type:String},tourOpened:{type:String},__tour:{type:Object}}}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),this.__setup||(this.shadowRoot.querySelector("#settingsform").schematizer=d,this.shadowRoot.querySelector("#settingsform").elementizer=c,setTimeout(()=>{this.shadowRoot.querySelector(".wrapper").style.margin=this.offsetMargin},1e3),this.__setup=!0,this.shadowRoot.querySelector("#settingsform").addEventListener("click",this.__simpleFieldsClick.bind(this)),this.shadowRoot.querySelector("#settingsform").addEventListener("value-changed",this.__valueChangedEvent.bind(this)),this.dispatchEvent(new CustomEvent("hax-register-core-piece",{bubbles:!0,cancelable:!0,composed:!0,detail:{piece:"haxTray",object:this}})),this.dispatchEvent(new CustomEvent("hax-add-voice-command",{bubbles:!0,composed:!0,cancelable:!1,detail:{command:":name: (collapse)(open)(expand)(toggle) Blocks (menu)",context:this.shadowRoot.querySelector("#content-add"),callback:"click"}})),this.dispatchEvent(new CustomEvent("hax-add-voice-command",{bubbles:!0,composed:!0,cancelable:!1,detail:{command:":name: (collapse)(open)(expand)(toggle) element settings (menu)",context:this.shadowRoot.querySelector("#advanced-settings"),callback:"click"}})),this.dispatchEvent(new CustomEvent("hax-add-voice-command",{bubbles:!0,composed:!0,cancelable:!1,detail:{command:":name: (collapse)(open)(expand)(toggle) search (menu)",context:this.shadowRoot.querySelector("#media-add"),callback:"click"}})))}updated(t){super.updated&&super.updated(t),t.forEach((t,e)=>{"editMode"==e&&(this.editMode&&p.refreshActiveNodeForm(),this._editModeChanged(this.editMode)),"offsetMargin"==e&&setTimeout(()=>{this.shadowRoot.querySelector(".wrapper").style.margin=this.offsetMargin},0),"trayDetail"==e&&this._updateTrayDetail(t),"collapsed"==e&&this[e]&&this._editModeChanged(this.editMode),"activeGizmo"==e&&(this.activeGizmo?(this.activeTagName=this.activeGizmo.title,t&&"content-edit"===this.trayDetail||"content-map"===this.trayDetail||(this.trayDetail="content-edit")):(this.activeTagName="","content-add"!==this.trayDetail&&(this.trayDetail="content-add"))),"activeNode"==e&&(this.activeNode&&this.activeNode.tagName?this.editMode&&p.refreshActiveNodeForm():this.activeTagName="")})}_dragEnd(t){let e=l(t)?l(t)[0]:void 0;e&&e.close(!0),this.collapsed=!0,this.style.setProperty("--hax-tray-custom-y",t.clientY+"px"),this.style.setProperty("--hax-tray-custom-x",t.clientX+"px"),this.elementAlign="custom"}_dragStart(t){t.stopPropagation(),t.stopImmediatePropagation();let e=l(t)?l(t)[0]:void 0;this.collapsed=!0,e&&e.close(!0)}_setupForm(){let t=this.activeNode;if(this._initial=!0,this.activeValue={settings:{layout:{__position:"hax-align-left",__scale:100},configure:{},advanced:{}}},this.shadowRoot.querySelector("#settingsform").fields=[],this.shadowRoot.querySelector("#settingsform").value={},t.tagName&&p.elementList[t.tagName.toLowerCase()]){let a=p.elementList[t.tagName.toLowerCase()];for(var e in void 0===a.gizmo.title?this.humanName=t.tagName.replace("-"," ").toLowerCase():this.humanName=a.gizmo.title,this.activeHaxElement.properties)a.settings.configure.forEach(t=>{t.property===e&&(this.activeValue.settings.configure[e]=this.activeHaxElement.properties[e]),t.attribute===e&&(this.activeValue.settings.configure[e]=this.activeHaxElement.properties[e]),t.slot===e&&(this.activeValue.settings.configure[e]=this.activeHaxElement.properties[e])}),a.settings.advanced.forEach(t=>{t.property===e&&(this.activeValue.settings.advanced[e]=this.activeHaxElement.properties[e]),t.attribute===e&&(this.activeValue.settings.advanced[e]=this.activeHaxElement.properties[e]),t.slot===e&&(this.activeValue.settings.advanced[e]=this.activeHaxElement.properties[e])});let i=document.createElement("div");i.innerHTML=this.activeHaxElement.content,i.childNodes.forEach(t=>{1===t.nodeType&&"undefined"!==t.innerHTML&&(a.settings.configure.forEach(e=>{e.slot===t.getAttribute("slot")?this.activeValue.settings.configure[e.slot]=t.innerHTML:""!=e.slot||null!=t.getAttribute("slot")&&"null"!=t.getAttribute("slot")||(this.activeValue.settings.configure[e.slot]=t.innerHTML)}),a.settings.advanced.forEach(e=>{e.slot===t.getAttribute("slot")?this.activeValue.settings.advanced[e.slot]=t.innerHTML:""!=e.slot||null!=t.getAttribute("slot")&&"null"!=t.getAttribute("slot")||(this.activeValue.settings.advanced[e.slot]=t.innerHTML)}))}),""!=t.style.width?this.activeValue.settings.layout.__scale=t.style.width.replace("%",""):this.activeValue.settings.layout.__scale=100,"block"==t.style.display&&"0px auto"==t.style.margin&&"right"==t.style.float?this.activeValue.settings.layout.__position="hax-align-right":"block"==t.style.display&&"0px auto"==t.style.margin?this.activeValue.settings.layout.__position="hax-align-center":this.activeValue.settings.layout.__position="hax-align-left",this.activeHaxElement.properties.__scale=this.activeValue.settings.layout.__scale,this.activeHaxElement.properties.__position=this.activeValue.settings.layout.__position,a.settings.configure.forEach((t,e)=>{a.settings.configure[e].attribute&&(a.settings.configure[e].property=a.settings.configure[e].attribute),a.settings.configure[e].slot&&(a.settings.configure[e].property=a.settings.configure[e].slot)}),a.settings.advanced.forEach((t,e)=>{a.settings.advanced[e].attribute&&(a.settings.advanced[e].property=a.settings.advanced[e].attribute),a.settings.advanced[e].slot&&(a.settings.advanced[e].property=a.settings.advanced[e].slot)}),a.settings.layout=[],a.canPosition&&a.settings.layout.push({property:"__position",title:this.t.alignment,inputMethod:"select",value:this.activeValue.settings.layout.__position,options:{"hax-align-left":this.t.left,"hax-align-center":this.t.center,"hax-align-right":this.t.right}}),a.canScale&&a.settings.layout.push({property:"__scale",title:this.t.width,inputMethod:"slider",value:this.activeValue.settings.layout.__scale,min:a.canScale.min?a.canScale.min:12.5,max:a.canScale.max?a.canScale.max:100,step:a.canScale.step?a.canScale.step:12.5}),this.activeSchema=[{property:"settings",inputMethod:"tabs",properties:[]}];a.settings.configure.length>0?this.activeSchema[0].properties.push({property:"configure",title:this.t.configure,properties:a.settings.configure}):this.activeSchema[0].properties.push({property:"configure",title:this.t.configure,disabled:!0}),a.settings.layout.length>0?this.activeSchema[0].properties.push({property:"layout",title:this.t.layout,properties:a.settings.layout}):this.activeSchema[0].properties.push({property:"layout",title:this.t.layout,disabled:!0}),a.settings.advanced.length>0?this.activeSchema[0].properties.push({property:"advanced",title:this.t.advanced,properties:a.settings.advanced}):this.activeSchema[0].properties.push({property:"advanced",title:this.t.advanced,disabled:!0}),this.__activePropSchema=a,this.shadowRoot.querySelector("#settingsform").fields=this.activeSchema,this.shadowRoot.querySelector("#settingsform").value=this.activeValue}}_toArray(t){return null==t?[]:Object.keys(t).map((function(e){return t[e]}))}updateMap(){this.shadowRoot&&this.shadowRoot.querySelector("hax-map")&&"content-map"==this.trayDetail&&this.shadowRoot.querySelector("hax-map").updateHAXMap()}_updateTrayDetail(t){"content-add"==this.trayDetail?(this.trayLabel=this.t.blocks,this._refreshAddData()):"media-add"==this.trayDetail?this.trayLabel=this.t.media:"content-map"==this.trayDetail?(this.trayLabel=this.t.structure,this.shadowRoot.querySelector("hax-map").updateHAXMap()):"advanced-settings"==this.trayDetail?(this.trayLabel=this.t.settings,this.shadowRoot.querySelector("hax-preferences-dialog").reloadPreferencesForm()):"content-edit"!=this.trayDetail||this.activeTagName&&""!=this.activeTagName&&this.activeNode&&this.activeNode.tagName?this.trayDetail&&""!=this.trayDetail?this.trayLabel=void 0:this.trayDetail="content-edit":this.trayDetail="content-add",this.requestUpdate()}__valueChangedEvent(t){if(this.editMode&&t.detail.value&&t.detail.value.settings){let r=t.detail.value.settings,l={advanced:"advanced",configure:"configure",layout:"layout"};var e;for(let d in l)for(let l in r[d])if(e=!1,null==r[d][l]||r[d][l].readOnly)this.activeNode.removeAttribute(o(l));else{if("prefix"===l&&""!=r[d][l])this.activeNode.setAttribute("prefix",r[d][l]),e=!0;else if("layout"===d&&"__position"===l)e=!0,this._initial||(clearTimeout(this.__contextValueDebounce),this.__contextValueDebounce=setTimeout(()=>{this.dispatchEvent(new CustomEvent("hax-context-item-selected",{bubbles:!0,composed:!0,detail:{eventName:r[d][l],value:r[d][l]}}))},50));else if("layout"===d&&"__scale"===l)e=!0,this._initial||(clearTimeout(this.__contextSizeDebounce),this.__contextSizeDebounce=setTimeout(()=>{this.dispatchEvent(new CustomEvent("hax-context-item-selected",{bubbles:!0,composed:!0,detail:{eventName:"hax-size-change",value:r[d][l]}}))},50));else if(this.activeNode.hasOwnProperty(l)||this.activeNode.properties&&this.activeNode.properties.hasOwnProperty(l)||null!=r[d][l]&&r[d][l].constructor===Array||null!=r[d][l]&&r[d][l].constructor===Object)try{r[d][l].constructor===Array?this.activeNode[l]=[...r[d][l]]:r[d][l].constructor===Object?this.activeNode[l]={...r[d][l]}:this.activeNode[l]=r[d][l],e=!0}catch(t){console.warn(t),e=!1}else for(var a in this.__activePropSchema.settings[d])if(this.__activePropSchema.settings[d][a].slot==l){let t="span";this.__activePropSchema.settings[d][a].slotWrapper?t=this.__activePropSchema.settings[d][a].slotWrapper:"code-editor"===this.activeNode.tagName.toLowerCase()&&(t="template");var i=document.createElement(t);if(this.__activePropSchema.settings[d][a].slotAttributes)for(var n in this.__activePropSchema.settings[d][a].slotAttributes)i.setAttribute(n,this.__activePropSchema.settings[d][a].slotAttributes[n]);""!==this.__activePropSchema.settings[d][a].slot&&(i.slot=this.__activePropSchema.settings[d][a].slot),i.innerHTML=r[d][l];const o=i.cloneNode(!0);e=!0,p.isTextElement(this.activeNode)?this.activeNode.innerHTML=i.innerHTML:(s(this.activeNode,this.__activePropSchema.settings[d][a].slot),this.activeNode.appendChild(o))}if(!e)try{!0===r[d][l]?this.activeNode.setAttribute(o(l),o(l)):!1===r[d][l]||""===r[d][l]?this.activeNode.removeAttribute(o(l)):this.activeNode.setAttribute(o(l),r[d][l])}catch(t){console.warn(t),console.warn(l,r[d][l])}}}setTimeout(()=>{this._initial&&(this._initial=!1)},51)}_editModeChanged(t){this.shadowRoot.querySelector("#button").icon=t?"save":"create"}_clickEditButton(t){p.editMode=!0,window.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,cancelable:!0,detail:{}}))}_clickSaveButton(t){p.editMode=!1,this.dispatchEvent(new CustomEvent("hax-save",{bubbles:!0,cancelable:!0,composed:!0,detail:t.detail})),window.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,cancelable:!0,detail:{}}))}}window.customElements.define(HaxTray.tag,HaxTray);export{HaxTray};