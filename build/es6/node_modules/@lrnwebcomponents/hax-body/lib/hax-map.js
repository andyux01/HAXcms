import{html as t,css as a,LitElement as i}from"../../../lit-element/lit-element.js";import"../../simple-icon/lib/simple-icon-lite.js";import"./hax-toolbar-item.js";import"../../hax-iconset/lib/simple-hax-iconset.js";import{HAXStore as o}from"./hax-store.js";import{normalizeEventPath as l}from"../../utils/utils.js";import{HaxTrayDetailHeadings as n}from"./hax-ui-styles.js";import{I18NMixin as s}from"../../i18n-manager/lib/I18NMixin.js";class HaxMap extends(s(i)){static get styles(){return[...n,a`
        :host {
          display: block;
        }
        .container {
          text-align: left;
        }
        table {
          font-size: var(--hax-ui-font-size-sm);
          border-collapse: collapse;
          width: calc(100% - 2px);
          max-width: calc(100% - 2px);
        }
        table,
        th,
        td {
          text-align: center;
          border: 1px solid var(--hax-ui-border-color);
        }
        th {
          font-weight: normal;
          font-size: var(--hax-ui-font-size-xs);
        }
        td {
          font-weight: bold;
          font-size: 150%;
        }
        ul {
          list-style: none;
          padding: 0;
          margin: 0;
        }
        ul li {
          margin: 0;
          padding: 0;
        }
        li > hax-toolbar-item {
          width: 100%;
        }
        li > hax-toolbar-item::part(button),
        li > hax-toolbar-item[icon="hax:h2"].heading-level-h2::part(button) {
          width: 100%;
          border: none;
          margin-left: 0px;
        }
        li > hax-toolbar-item.heading-level-h2::part(button),
        li > hax-toolbar-item[icon="hax:h3"].heading-level-h3::part(button) {
          width: calc(100% - 26px);
          margin-left: 26px;
        }
        li > hax-toolbar-item.heading-level-h3::part(button),
        li > hax-toolbar-item[icon="hax:h4"].heading-level-h4::part(button) {
          width: calc(100% - calc(2 * 26px));
          margin-left: calc(2 * 26px);
        }
        li > hax-toolbar-item.heading-level-h4::part(button),
        li > hax-toolbar-item[icon="hax:h5"].heading-level-h5::part(button) {
          width: calc(100% - calc(3 * 26px));
          margin-left: calc(3 * 26px);
        }
        li > hax-toolbar-item.heading-level-h5::part(button),
        li > hax-toolbar-item[icon="hax:h6"].heading-level-h6::part(button) {
          width: calc(100% - calc(4 * 26px));
          margin-left: calc(4 * 26px);
        }
        li > hax-toolbar-item.heading-level-h6::part(button) {
          width: calc(100% - calc(5 * 26px));
          margin-left: calc(5 * 26px);
        }
      `]}constructor(){super(),this.elementList=[],this.t={contentStatistics:"Content Statistics",words:"Words",headings:"Headings",paragraphs:"Paragraphs",widgets:"Widgets",characters:"Characters",listView:"List view"},this.registerLocalization({context:this,namespace:"hax"})}async updateHAXMap(t){let e=o.htmlToHaxElements(await o.activeHaxBody.haxToContent());this.calcStats(e);let a=[];for(var i=0;i<e.length;i++){let t=o.haxSchemaFromTag(e[i].tag);t.gizmo?a.push({icon:t.gizmo.icon,name:t.gizmo.title}):e[i].tag&&e[i].tag.includes("-")?a.push({icon:"hax:templates",name:"Widget"}):a.push({icon:"hax:paragraph",name:"HTML block"})}this.elementList=[...a]}calcStats(t){if(t&&o.activeHaxBody.innerText){let a={c:o.activeHaxBody.innerText.length,w:parseInt(o.activeHaxBody.innerText.split(/\s+/g).length-1),h:0,p:0,e:0};for(var e in t.forEach(t=>{switch(t.tag){case"blockquote":case"div":case"span":case"p":a.p++;break;case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":case"relative-heading":a.h++;break;default:a.e++}}),a)this[e+"Count"]=a[e]}}render(){return t`
      <div class="container">
        <table>
          <caption>
            ${this.t.contentStatistics}
          </caption>
          <thead>
            <tr>
              <th scope="col">${this.t.words}</th>
              <th scope="col">${this.t.headings}</th>
              <th scope="col">${this.t.paragraphs}</th>
              <th scope="col">${this.t.widgets}</th>
              <th scope="col">${this.t.characters}</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>${this.wCount}</td>
              <td>${this.hCount}</td>
              <td>${this.pCount}</td>
              <td>${this.eCount}</td>
              <td>${this.cCount}</td>
            </tr>
          </tbody>
        </table>
        <h5>${this.t.listView}</h5>
        <ul>
          ${this.indentedElements.map((e,a)=>t`
              <li>
                <hax-toolbar-item
                  align-horizontal="left"
                  class="heading-level-${e.parent||"h1"}"
                  @click="${t=>this.goToItem(a)}"
                  data-index="${a}"
                  icon="${e.icon}"
                  label="${e.name}"
                  show-text-label
                >
                </hax-toolbar-item>
              </li>
            `)}
        </ul>
      </div>
    `}get indentedElements(){let t="h1";return this.elementList.map(e=>{let a=e;if(a.parent=t,"Heading"==a.name){let e=a.icon.replace("hax:","").trim();a.parent=e,t=e}return a})}goToItem(t){if(t){let e=o.activeHaxBody.children[parseInt(t)];e.classList.add("blinkfocus"),"function"==typeof e.scrollIntoViewIfNeeded?e.scrollIntoViewIfNeeded(!0):e.scrollIntoView({behavior:"smooth",inline:"center"}),setTimeout(()=>{e.classList.remove("blinkfocus")},500)}}scrollInMap(){var t=l(e)[0];this.goToItem(t.getAttribute("data-index"))}static get tag(){return"hax-map"}static get properties(){return{opened:{type:Boolean},elementList:{type:Array},cCount:{type:String},wCount:{type:String},hCount:{type:String},pCount:{type:String},eCount:{type:String}}}}window.customElements.define(HaxMap.tag,HaxMap);export{HaxMap};