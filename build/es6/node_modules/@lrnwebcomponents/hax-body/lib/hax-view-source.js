import{LitElement as t,html as e,css as o}from"../../../lit/index.js";import{MtzFileDownloadBehaviors as a}from"../../dl-behavior/dl-behavior.js";import{stripMSWord as i,formatHTML as l,b64toBlob as n}from"../../utils/utils.js";import{HAXStore as r}from"./hax-store.js";import"./hax-toolbar.js";import{HaxComponentStyles as s}from"./hax-ui-styles.js";import{autorun as d,toJS as c}from"../../../mobx/dist/mobx.esm.js";import{I18NMixin as h}from"../../i18n-manager/lib/I18NMixin.js";import"../../simple-toolbar/lib/simple-toolbar-menu.js";import"../../simple-toolbar/lib/simple-toolbar-menu-item.js";import"./hax-tray-button.js";import{MicroFrontendRegistry as m}from"../../micro-frontend-registry/micro-frontend-registry.js";class HaxViewSource extends(h(a(t))){static get styles(){return[...s,o`
        :host,
        #wrapper {
          margin: 0;
          padding: 0;
          display: flex;
          flex-direction: column;
          align-items: stretch;
          position: relative;
          flex: 1 1 100%;
        }
        #spacer {
          flex: 1 1 100%;
          z-index: -1;
        }
        #textarea {
          position: absolute;
          top: 0;
          bottom: 0;
          margin: 0;
          padding: 0;
        }
        .updatecontent {
          background-color: var(--simple-colors-default-theme-green-1);
          color: var(--simple-colors-default-theme-green-8);
        }
        hax-toolbar {
          flex: 0 0 auto;
          background-color: var(--hax-ui-background-color);
        }
        hax-toolbar::part(buttons) {
          display: flex;
          justify-content: center;
          align-items: stretch;
          margin: 0 auto;
        }
        hax-tray-button {
          flex: 1 1 auto;
        }
        simple-toolbar-menu {
          --simple-toolbar-button-border-color: var(--hax-ui-border-color);
        }
        /** This is mobile layout for controls */
        @media screen and (max-width: 800px) {
          hax-tray-button {
            flex: 0 1 auto;
          }
        }
      `]}render(){return e`${this.hidden?"":e` <hax-toolbar>
            <hax-tray-button
              label="${this.t.updateHTML}"
              icon="icons:check"
              @click="${this.updateBodyFromHTML}"
              show-text-label
              icon-position="top"
              class="updatecontent"
            >
            </hax-tray-button>
            <hax-tray-button
              @click="${this.scrubContent}"
              icon="editor:format-clear"
              label="${this.t.cleanFormatting}"
              show-text-label
              icon-position="top"
            >
            </hax-tray-button>
            ${m.has("@core/prettyHtml")?e`
                  <hax-tray-button
                    label="${this.t.PrettifyHtml}"
                    icon="hax:format-textblock"
                    @click="${this.prettifyContent}"
                    show-text-label
                    icon-position="top"
                  >
                  </hax-tray-button>
                `:e``}
            <hax-tray-button
              @click="${this.selectBody}"
              icon="hax:html-code"
              label="${this.t.copyHTML}"
              show-text-label
              icon-position="top"
            >
            </hax-tray-button>
            <simple-toolbar-menu
              icon="icons:file-download"
              icon-position="top"
              label="${this.t.downloadContent}"
              @dblclick="${this.download}"
              show-text-label
            >
              <simple-toolbar-menu-item>
                <hax-tray-button
                  icon="hax:file-html"
                  icon-position="top"
                  label="${this.t.downloadHTML}"
                  @click="${this.download}"
                  show-text-label
                >
                </hax-tray-button>
              </simple-toolbar-menu-item>
              <simple-toolbar-menu-item>
                ${m.has("@core/htmlToDocx")?e`
                      <hax-tray-button
                        label="${this.t.downloadDOCX}"
                        icon="hax:file-docx"
                        @click="${this.downloadDOCXviaMicro}"
                        show-text-label
                        icon-position="top"
                      >
                      </hax-tray-button>
                    `:e`
                      <hax-tray-button
                        label="${this.t.downloadDOCX}"
                        icon="hax:file-docx"
                        @click="${this.downloadDOCX}"
                        show-text-label
                        icon-position="top"
                      >
                      </hax-tray-button>
                    `}
              </simple-toolbar-menu-item>
              ${m.has("@core/htmlToMd")?e`
                    <simple-toolbar-menu-item>
                      <hax-tray-button
                        label="${this.t.downloadMD}"
                        icon="hax:format-textblock"
                        @click="${this.downloadMDviaMicro}"
                        show-text-label
                        icon-position="top"
                      >
                      </hax-tray-button>
                    </simple-toolbar-menu-item>
                  `:e``}
              ${m.has("@core/htmlToPdf")?e`
                    <simple-toolbar-menu-item>
                      <hax-tray-button
                        label="${this.t.downloadPDF}"
                        icon="lrn:pdf"
                        @click="${this.downloadPDFviaMicro}"
                        show-text-label
                        icon-position="top"
                      >
                      </hax-tray-button>
                    </simple-toolbar-menu-item>
                  `:e``}
              <simple-toolbar-menu-item>
                <hax-tray-button
                  @click="${this.htmlToHaxElements}"
                  label="${this.t.haxSchema}"
                  icon="hax:code-json"
                  show-text-label
                  icon-position="top"
                ></hax-tray-button>
              </simple-toolbar-menu-item>
            </simple-toolbar-menu>
          </hax-toolbar>
          <div id="wrapper">
            <div id="spacer"></div>
            <textarea id="hiddentextarea" hidden></textarea>
            <code-editor
              id="textarea"
              theme="${"hax"==this.haxUiTheme?"vs":"haxdark"==this.haxUiTheme?"vs-dark":"auto"}"
              language="html"
              font-size="13"
              word-wrap
            ></code-editor>
          </div>`} `}static get tag(){return"hax-view-source"}refreshHTMLEditor(t){this.updateEditor()}async download(t){const e=await this.contentToFile(!1);this.downloadFromData(e,"html","my-new-code"),r.toast(this.t.fileDownloaded),this.close()}async downloadDOCX(t){import("../../file-system-broker/lib/docx-file-system-broker.js").then((async t=>{let e=await r.activeHaxBody.haxToContent();window.DOCXFileSystemBroker.requestAvailability().HTMLToDOCX(e,document.title),r.toast(this.t.fileDownloaded),this.close()}))}async downloadDOCXviaMicro(t){let e=await r.activeHaxBody.haxToContent();const o=await m.call("@core/htmlToDocx",{html:e});if(200==o.status){const t=document.createElement("a");t.href=window.URL.createObjectURL(n(`${o.data}`,"application/vnd.openxmlformats-officedocument.wordprocessingml.document")),t.download="PageContents.docx",t.target="_blank",this.appendChild(t),t.click(),this.removeChild(t),r.toast(this.t.fileDownloaded),this.close()}}async downloadMDviaMicro(t){let e=await r.activeHaxBody.haxToContent();const o=await m.call("@core/htmlToMd",{html:e});if(200==o.status&&o.data){const t=document.createElement("a");t.href=window.URL.createObjectURL(n(btoa(o.data),"text/markdown")),t.download="PageContents.md",t.target="_blank",this.appendChild(t),t.click(),this.removeChild(t),r.toast(this.t.fileDownloaded),this.close()}}async downloadPDFviaMicro(t){let e=await r.activeHaxBody.haxToContent();var o="";document.querySelector("base")&&(o=document.querySelector("base").href);const a=await m.call("@core/htmlToPdf",{base:o,html:e});if(200==a.status&&a.data){const t=document.createElement("a");t.href=window.URL.createObjectURL(n(a.data,"application/pdf")),t.download="PageContents.pdf",t.target="_blank",this.appendChild(t),t.click(),this.removeChild(t),r.toast(this.t.fileDownloaded),this.close()}}async downloadfull(t){const e=await this.contentToFile(!0);this.downloadFromData(e,"html","my-new-webpage"),r.toast(this.t.fileDownloaded),this.close()}async updateBodyFromHTML(t){let e=this.shadowRoot.querySelector("#textarea").value,o="slot"===r.activeHaxBody.shadowRoot.querySelector("#body").localName?r.activeHaxBody.shadowRoot.querySelector("#body").assignedNodes({flatten:!0}):[];if(o.length>0&&"PAGE-BREAK"===o[0].tagName&&!e.includes("<page-break")){e=await r.nodeToContent(o[0])+"\n"+e}r.activeHaxBody.importContent(e),r.haxTray.trayDetail=""}scrubContent(t){const e=this.shadowRoot.querySelector("#textarea").value;r.toast("Scrubbed, Content updated"),r.activeHaxBody.importContent(i(e)),this.close()}async prettifyContent(t){let e=await r.activeHaxBody.haxToContent();const o=await m.call("@core/prettyHtml",{html:e});200==o.status&&(this.shadowRoot.querySelector("#textarea").editorValue="",setTimeout((()=>{const t=o.data.replace(/^\s+|\s+$/gm,"");this.shadowRoot.querySelector("#textarea").editorValue=t}),0));const a=this.shadowRoot.querySelector("#textarea").value;r.toast("Formatting updated, Content updated"),r.activeHaxBody.importContent(a)}openSource(){window.customElements.get("code-editor")?setTimeout((()=>{this.updateEditor()}),1e3):import("../../code-editor/code-editor.js").then((()=>{this.updateEditor(),setTimeout((()=>{this.updateEditor()}),1e3)}))}selectBody(t){let e=this.shadowRoot.querySelector("#hiddentextarea");e.value=this.shadowRoot.querySelector("#textarea").value,e.removeAttribute("hidden"),e.focus(),e.select(),document.execCommand("copy"),e.setAttribute("hidden","hidden"),r.toast(this.t.copiedToClipboard)}async htmlToHaxElements(t){let e=await r.htmlToHaxElements(this.shadowRoot.querySelector("#textarea").value);var o=JSON.stringify(e,null,2);let a=this.shadowRoot.querySelector("#textarea").value,i=this.shadowRoot.querySelector("#hiddentextarea");i.removeAttribute("hidden"),i.value=o,i.focus(),i.select(),document.execCommand("copy"),i.value=a,i.setAttribute("hidden","hidden"),r.toast(this.t.copiedToClipboard),this.close()}close(){r.haxTray.trayDetail=""}updateEditor(){r.activeHaxBody&&this.shadowRoot&&this.shadowRoot.querySelector("#textarea")&&(this.shadowRoot.querySelector("#textarea").editorValue="",setTimeout((async()=>{const t=l(await r.activeHaxBody.haxToContent()).replace(/^\s+|\s+$/gm,"");this.shadowRoot.querySelector("#textarea").editorValue=t}),0))}async contentToFile(t){let e=await r.activeHaxBody.haxToContent();var o=e;return t&&(o=`\n        <!DOCTYPE html>\n        <html lang="en">\n          <head>\n            <meta charset="utf-8" />\n            <meta\n              name="viewport"\n              content="width=device-width, minimum-scale=1, initial-scale=1, user-scalable=yes"\n            />\n            <title>hax-body demo</title>\n            <script>window.WCGlobalCDNPath="https://cdn.webcomponents.psu.edu/cdn/"; <\/script> <script src="https://cdn.webcomponents.psu.edu/cdn/build.js"><\/script> \n            <style>\n              body {\n                padding: 32px;\n              }\n            </style>\n          </head>\n          <body>\n          ${e}\n          </body>\n        </html>\n      `),o}static get properties(){return{...super.properties,globalPreferences:{type:Object},hidden:{type:Boolean,reflect:!0},theme:{type:String}}}constructor(){super(),this.t={updateHTML:"Update HTML",copyHTML:"Copy HTML",downloadContent:"Download content",downloadHTML:"Download HTML",fileDownloaded:"File downloaded",downloadDOCX:"Download DOCX",downloadMD:"Download Markdown",downloadPDF:"Download PDF",PrettifyHtml:"Prettify HTML",cleanFormatting:"Clean Formatting",haxSchema:"HAXSchema"},this.registerLocalization({context:this,namespace:"hax"}),d((()=>{this.globalPreferences=c(r.globalPreferences),this.haxUiTheme=(this.globalPreferences||{}).haxUiTheme||"hax"}))}}customElements.define(HaxViewSource.tag,HaxViewSource);export{HaxViewSource};