import{DDD as t,DDDPulseEffectSuper as e}from"../../../../d-d-d/d-d-d.js";import{html as o,css as i}from"../../../../../lit/index.js";import{store as s}from"../../core/haxcms-site-store.js";import{toJS as a}from"../../../../../mobx/dist/mobx.esm.js";import{MicroFrontendRegistry as n}from"../../../../micro-frontend-registry/micro-frontend-registry.js";import{enableServices as r}from"../../../../micro-frontend-registry/lib/microServices.js";import"../../../../simple-icon/lib/simple-icon-button-lite.js";r(["haxcms"]),n.add({endpoint:"/api/apps/haxcms/aiChat",name:"@haxcms/aiChat",title:"AI Chat",description:"AI based chat agent that can answer questions about a site",params:{site:"location of the HAXcms site OR site.json data",type:"site for site.json or link for remote loading",question:"Question to ask of the AI"}});export class SiteAiChat extends(e(t)){static get tag(){return"site-ai-chat"}constructor(){super(),this.opened=!1,this.question=null,this.answers=[],this.loading=!1,this.dataPulse="1"}askQuestion(t){t.preventDefault(),this.question=this.shadowRoot.querySelector("#question").value}updated(t){if(super.updated&&super.updated(t),t.has("opened")&&(this.opened?this.shadowRoot.querySelector("dialog").showModal():this.shadowRoot.querySelector("dialog").close()),t.has("question")&&this.question){const t=a(s.manifest);var e="";globalThis.document.querySelector("base")&&(e=globalThis.document.querySelector("base").href);const o={type:"site",site:{file:e+"site.json",metadata:t.metadata},question:this.question};this.loading=!0,n.call("@haxcms/aiChat",o).then((t=>{200==t.status&&(this.answers=[...t.data.answers],this.question=t.data.question,this.loading=!1)}))}}render(){return o`
      <simple-icon-button-lite icon="hax:wizard-hat" @click="${this.openChat}"
        >Ask a question</simple-icon-button-lite>
      <dialog class="chat">
      <simple-icon-button-lite class="close" icon="close" @click="${this.closeChat}"
        >Close</simple-icon-button-lite>
      <form action="#">
      <simple-icon-lite class="hat" icon="${this.loading?"hax:loading":"hax:wizard-hat"}"></simple-icon-lite>
        <input id="question" type="text" placeholder="Ask your question.." /><button
          id="submit"
          type="submit"
          @click="${this.askQuestion}"
        >
          Ask question
        </button>
      </form>
        ${this.question?o`
        ${this.loading?"":o`
        <div>${this.answers.map(((t,e)=>o`<h3 data-primary="13" data-design-treatment="vert">Answer ${e+1}</h3><p>${t}</p>`))}</div>
        `}`:""}
      </dialog>
    `}closeChat(){this.opened=!1}openChat(){this.opened=!0,setTimeout((()=>{this.shadowRoot.querySelector("#question").focus(),this.shadowRoot.querySelector("#question").select()}),300)}static get styles(){return[super.styles,i`
        :host {
          display: block;
          position: absolute;
          bottom: 10px;
          right: 10px;
        }
        :host([opened]) {
          z-index: 100000;
        }
        :host([loading]) .loading {
          display: block;
        }
        simple-icon-lite,
        simple-icon-button-lite {
          --simple-icon-height: 48px;
          --simple-icon-width: 48px;
          color: var(--ddd-primary-13);
        }
        .hat {
          margin: 0 var(--ddd-spacing-4);
        }
        .close {
          position: absolute;
          top: 0;
          right: 0;
          --simple-icon-height: 24px;
          --simple-icon-width: 24px;
        }
        dialog[open] {
          opacity: 1;
          position: fixed;
          left: 25%;
          right: 25%;
          top: 25%;
          bottom: 25%;
          transform: scaleY(1);
        }
        dialog {
          opacity: 0;
          padding: var(--ddd-spacing-10);
          transform: scaleY(0);
          transition:
            opacity 0.7s ease-out,
            transform 0.7s ease-out,
            overlay 0.7s ease-out allow-discrete,
            display 0.7s ease-out allow-discrete;
        }
        input, button {
          font-size: var(--ddd-font-size-ms);
        }
        @starting-style {
          dialog[open] {
            opacity: 0;
            transform: scaleY(0);
          }
        }

        dialog::backdrop {
          background-color: rgb(0 0 0 / 0%);
          transition:
            display 0.7s allow-discrete,
            overlay 0.7s allow-discrete,
            background-color 0.7s;
        }

        dialog[open]::backdrop {
          background-color: rgb(0 0 0 / 25%);
        }
        @starting-style {
          dialog[open]::backdrop {
            background-color: rgb(0 0 0 / 0%);
          }
        }

      `]}static get properties(){return{...super.properties,question:{type:String},answers:{type:Array},opened:{type:Boolean,reflect:!0},loading:{type:Boolean,reflect:!0}}}}globalThis.customElements.define(SiteAiChat.tag,SiteAiChat);