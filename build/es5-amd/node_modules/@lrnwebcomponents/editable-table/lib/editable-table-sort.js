define(["exports", "../../../lit-element/lit-element.js", "./editable-table-behaviors.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, _litElement, _editableTableBehaviors, _simpleIconLite, _simpleIcons, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTableSort = void 0;

  function _templateObject2_f86f852090c411ebad41f72aa2c8c806() {
    var data = babelHelpers.taggedTemplateLiteral([""]);

    _templateObject2_f86f852090c411ebad41f72aa2c8c806 = function _templateObject2_f86f852090c411ebad41f72aa2c8c806() {
      return data;
    };

    return data;
  }

  function _templateObject_f86f852090c411ebad41f72aa2c8c806() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <button id=\"button\" class=\"cell-button\" @click=\"", "\">\n        <slot></slot>\n        <span class=\"sr-only asc\">(ascending)</span>\n        <span class=\"sr-only desc\">(descending)</span>\n        <span class=\"sr-only\"> Toggle sort mode.</span>\n        <simple-icon-lite\n          icon=\"", "\"\n        ></simple-icon-lite>\n      </button>\n    "]);

    _templateObject_f86f852090c411ebad41f72aa2c8c806 = function _templateObject_f86f852090c411ebad41f72aa2c8c806() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `editable-table-editor-sort`
   * A column header that functions as a three-state sort button (no sort, sort ascending, sort descending) for table-editor-display mode (table-editor-display.html).
   *
   * @demo ./demo/display.html
   * @customElement
   * @extends LitElement
   * @extends editableTableCellStyles
   */
  var EditableTableSort = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(EditableTableSort, _LitElement);

    var _super = _createSuper(EditableTableSort);

    babelHelpers.createClass(EditableTableSort, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_f86f852090c411ebad41f72aa2c8c806(), this._onSortClicked, this.sortMode == "asc" ? "arrow-drop-up" : this.sortMode == "desc" ? "arrow-drop-down" : "editable-table:sortable");
      }
    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableSort), "styles", this) || []), babelHelpers.toConsumableArray(_editableTableBehaviors.editableTableCellStyles), [(0, _litElement.css)(_templateObject2_f86f852090c411ebad41f72aa2c8c806())]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table-sort";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Sort ascending, descending or none
           */
          columnIndex: {
            attribute: "column-index",
            type: Number,
            reflect: true
          },

          /**
           * Sort mode: ascending, descending or none
           */
          sortMode: {
            attribute: "sort-mode",
            type: String,
            reflect: true
          },

          /**
           * Index of current sort column
           */
          sortColumn: {
            attribute: "sort-column",
            type: Number,
            reflect: true
          }
        };
      }
    }]);

    function EditableTableSort() {
      var _this;

      babelHelpers.classCallCheck(this, EditableTableSort);
      _this = _super.call(this);
      _this.sortMode = "none";
      _this.sortColumn = -1;
      return _this;
    }
    /**
     *
     * Whether column is being sorted
     * @readonly
     * @memberof EditableTableSort
     */


    babelHelpers.createClass(EditableTableSort, [{
      key: "_onSortClicked",

      /**
       * Fires when sort button is clicked
       * @event change-sort-mode
       */
      value: function _onSortClicked() {
        this.dispatchEvent(new CustomEvent("change-sort-mode", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * Changes sort mode
       * @param {string} mode sort mode: `asc` for ascending or `desc` for descending;
       */

    }, {
      key: "setSortMode",
      value: function setSortMode(mode) {
        this.sortMode = mode;
        this.__checked = mode === "asc" ? true : mode === "desc" ? mode : false;
      }
    }, {
      key: "sorting",
      get: function get() {
        return this.columnIndex === this.sortColumn;
      }
    }]);
    return EditableTableSort;
  }(_litElement.LitElement);

  _exports.EditableTableSort = EditableTableSort;
  window.customElements.define(EditableTableSort.tag, EditableTableSort);
});