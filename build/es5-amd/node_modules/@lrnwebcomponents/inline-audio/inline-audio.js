define(["exports", "meta", "../../lit/index.js", "../simple-colors/simple-colors.js", "../i18n-manager/lib/I18NMixin.js", "../simple-icon/lib/simple-icons.js", "../simple-icon/lib/simple-icon-button.js", "../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, meta, _index, _simpleColors, _I18NMixin2, _simpleIcons, _simpleIconButton, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.InlineAudio = void 0;
  meta = _interopRequireWildcard(meta);
  var _templateObject_16060270edcb11edb3e3ed4f0d506a4b, _templateObject2_16060270edcb11edb3e3ed4f0d506a4b;
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  /**
   * `inline-audio`
   * `A simple inline audio player to augment text`
   *
  ### Styling
  
  ::part()
  The following parts are available for styling:
  icon - the icon
  progress - the progress bar
  progress-bar - the progress bar container
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--inline-audio-padding | padding on the container of the player | 0px 4px
  `--inline-audio-margin | margin on the container | 0
  `--inline-audio-icon-padding | icon padding | 0px 4px 0px 0px
  `--inline-audio-width | width of the icon | 36px
  `--inline-audio-height | height of the icon | 36px
  `--inline-audio-button-focus-opacity | opacity of the button on focus | 0.8
   *
   * @demo demo/index.html
   * @element inline-audio
   * 
   */
  var InlineAudio = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(InlineAudio, _I18NMixin);
    var _super = _createSuper(InlineAudio);
    function InlineAudio() {
      var _this;
      babelHelpers.classCallCheck(this, InlineAudio);
      _this = _super.call(this);
      _this._haxstate = false;
      _this.playing = false;
      _this.shiny = false;
      _this.canPlay = false;
      _this.t = _this.t || {};
      _this.t.play = "Play";
      _this.t.pause = "Pause";
      _this.t.selectToPlayRelatedAudioClip = "Select to play related audio clip";
      _this.t.selectToPauseRelatedAudioClip = "Select to pause related audio clip";
      _this.source = "";
      _this.icon = "av:play-arrow";
      _this.aria = _this.t.selectToPlayRelatedAudioClip;
      _this.title = _this.t.play;
      _this.addEventListener('click', _this.__clickEvent);
      return _this;
    }
    babelHelpers.createClass(InlineAudio, [{
      key: "handleProgress",
      value: function handleProgress() {
        var _this2 = this;
        if (this.__audio.ended) {
          this.audioController(false);
        }
        var progress = this.__audio.currentTime / this.__audio.duration * 100;
        this.shadowRoot.querySelector(".progress").style.width = "".concat(progress, "%");
        if (!this.__audio.paused) {
          requestAnimationFrame(function () {
            return _this2.handleProgress();
          });
        }
      }
    }, {
      key: "handlePlaythrough",
      value: function handlePlaythrough() {
        var _this3 = this;
        setTimeout(function () {
          _this3.canPlay = true;
          _this3.audioController(true);
        }, 500);
      }
    }, {
      key: "audioController",
      value: function audioController(playState) {
        if (playState) {
          this.__audio.play();
          this.playing = true;
        } else {
          this.__audio.pause();
          this.playing = false;
        }
      }
    }, {
      key: "load",
      value: function load(source) {
        this.__audio.src = source;
        this.__audio.load();
      }
      // shortcuts for audio control
    }, {
      key: "play",
      value: function play() {
        this.audioController(true);
      }
    }, {
      key: "pause",
      value: function pause() {
        this.audioController(false);
      }
    }, {
      key: "__clickEvent",
      value: function __clickEvent(e) {
        if (this._haxstate) {
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();
        } else {
          try {
            if (!this.shadowRoot.getSelection().toString()) {
              if (!this.__audio.hasAttribute("src")) {
                this.icon = "hax:loading";
                this.load(this.source);
              } else if (this.canPlay) {
                if (this.__audio.paused) {
                  this.audioController(true);
                } else {
                  this.audioController(false);
                }
              }
            }
          } catch (e) {
            // do nothing if selection fails some how
          }
        }
      }
      /**
       * LitElement lifecycle
       */
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this4 = this;
        if (babelHelpers.get(babelHelpers.getPrototypeOf(InlineAudio.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(InlineAudio.prototype), "updated", this).call(this, changedProperties);
        }
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "playing" && oldValue !== undefined) {
            _this4.dispatchEvent(new CustomEvent('playing-changed', {
              detail: {
                value: _this4[propName]
              }
            }));
            if (_this4[propName]) {
              _this4.icon = "av:pause";
              _this4.title = _this4.t.pause;
              _this4.aria = _this4.t.selectToPauseRelatedAudioClip;
            } else {
              _this4.icon = "av:play-arrow";
              _this4.title = _this4.t.play;
              _this4.aria = _this4.t.selectToPlayRelatedAudioClip;
            }
          }
        });
      }
      /**
       * LitElement lifecycle
       */
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(InlineAudio.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(InlineAudio.prototype), "firstUpdated", this).call(this, changedProperties);
        }
        this.__audio = this.shadowRoot.querySelector('.player');
      }
      /**
       * LitElement lifecycle
       */
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_16060270edcb11edb3e3ed4f0d506a4b || (_templateObject_16060270edcb11edb3e3ed4f0d506a4b = babelHelpers.taggedTemplateLiteral(["\n    <div class=\"container\">\n      <simple-icon-button part=\"icon\" class=\"icon\" title=\"", "\" aria-label=\"", "\" icon=\"", "\"></simple-icon-button>\n      <slot></slot>\n      <audio class=\"player\" hidden type=\"audio/mpeg\" @canplaythrough=\"", "\" @timeupdate=\"", "\"></audio>\n      <div part=\"progress-bar\" class=\"progress-bar\"></div>\n      <div part=\"progress\" class=\"progress\"></div>\n    </div>"])), this.title, this.aria, this.icon, this.handlePlaythrough, this.handleProgress);
      }
      /**
      * haxProperties integration via file reference
      */
    }, {
      key: "haxHooks",
      value: function haxHooks() {
        return {
          editModeChanged: "haxeditModeChanged",
          activeElementChanged: "haxactiveElementChanged"
        };
      }
    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(element, value) {
        if (value) {
          this._haxstate = value;
        }
      }
    }, {
      key: "haxeditModeChanged",
      value: function haxeditModeChanged(value) {
        this._haxstate = value;
      }
    }], [{
      key: "tag",
      get:
      /**
       * convention
       */
      function get() {
        return 'inline-audio';
      }
      /**
       * LitElement lifecycle
       */
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(InlineAudio), "properties", this)), {}, {
          source: {
            type: String
          },
          icon: {
            type: String
          },
          aria: {
            type: String
          },
          title: {
            type: String
          },
          playing: {
            type: Boolean,
            reflect: true
          },
          shiny: {
            type: Boolean,
            reflect: true
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(InlineAudio), "styles", this)), [(0, _index.css)(_templateObject2_16060270edcb11edb3e3ed4f0d506a4b || (_templateObject2_16060270edcb11edb3e3ed4f0d506a4b = babelHelpers.taggedTemplateLiteral(["\n    :host {\n      display: inline-flex;\n      vertical-align: middle;\n      color: var(--simple-colors-default-theme-grey-12);\n      --inline-audio-padding: 0px 4px;\n      --inline-audio-margin: 0;\n      --inline-audio-icon-padding: 0px 4px 0px 0px;\n    }\n\n    .container {\n      display: inline-flex;\n      align-items: center;\n      padding: var(--inline-audio-padding);\n      margin: var(--inline-audio-margin);\n      background-color: var(--simple-colors-default-theme-grey-2);\n      min-width: 48px;\n      border-radius: 4px;\n      cursor: pointer;\n      position: relative;\n      z-index: 1;\n    }\n\n    :host([shiny]) .container {\n      background-color: var(--simple-colors-default-theme-accent-2);\n    }\n\n    .progress-bar {\n      height: 100%;\n      background-color: var(--simple-colors-default-theme-accent-5);\n      transition: width 0.1s;\n      position: absolute;\n      border-radius: 4px;\n      top: 0;\n      left: 0;\n      z-index: -1;\n    }\n\n    .progress {\n      height: 100%;\n      background-color: var(--simple-colors-default-theme-accent-5);\n      position: absolute;\n      border-radius: 4px;\n      top: 0;\n      left: 0;\n      z-index: -1;\n      animation: progress-bar 1s linear forwards;\n    }\n\n    .container:focus-within {\n      outline: 2px solid var(--simple-colors-default-theme-accent-6);\n    }\n\n    .icon {\n      padding: var(--inline-audio-icon-padding);\n      --simple-icon-color: var(--simple-colors-default-theme-grey-12);\n      --simple-icon-button-border-radius: none;\n      --simple-icon-button-focus-color: var(--simple-colors-default-theme-grey-12);\n      --simple-icon-button-focus-opacity: var(--inline-audio-button-focus-opacity, .8);\n      --simple-icon-width: var(--inline-audio-width, 36px);\n      --simple-icon-height: var(--inline-audio-height, 36px);\n    }\n\n    .icon::part(button):focus {\n      outline: none;\n    }\n  "])))]);
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./lib/".concat(this.tag, ".haxProperties.json"), meta.url).href;
      }
    }]);
    return InlineAudio;
  }((0, _I18NMixin2.I18NMixin)(_simpleColors.SimpleColors));
  _exports.InlineAudio = InlineAudio;
  customElements.define(InlineAudio.tag, InlineAudio);
});