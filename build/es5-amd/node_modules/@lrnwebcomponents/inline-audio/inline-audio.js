define(["exports", "meta", "../../lit/index.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "../simple-icon/lib/simple-icon-button.js", "../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, meta, _index, _simpleIcon, _simpleIcons, _simpleIconButton, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.InlineAudio = void 0;
  meta = _interopRequireWildcard(meta);
  var _templateObject_e5e24130e46a11edbf2e2349c355f24c, _templateObject2_e5e24130e46a11edbf2e2349c355f24c;
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var InlineAudio = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(InlineAudio, _LitElement);
    var _super = _createSuper(InlineAudio);
    function InlineAudio() {
      var _this;
      babelHelpers.classCallCheck(this, InlineAudio);
      _this = _super.call(this);
      _this.source = "";
      _this.icon = "av:play-arrow";
      _this.playing = false;
      _this.canPlay = false;
      return _this;
    }
    babelHelpers.createClass(InlineAudio, [{
      key: "handleProgress",
      value: function handleProgress() {
        if (this.shadowRoot.querySelector(".player").ended) {
          this.audioController(false);
        }
        var audioDuration = this.shadowRoot.querySelector(".player").duration;
        var audioCurrentTime = this.shadowRoot.querySelector(".player").currentTime;
        var progressPercentage = audioCurrentTime / audioDuration * 100;
        this.shadowRoot.querySelector(".container").style.background = "linear-gradient(90deg, orange 0% ".concat(progressPercentage, "%, grey ").concat(progressPercentage, "% 100%)");
      }
    }, {
      key: "loadAudio",
      value: function loadAudio(source) {
        var audioFile = this.shadowRoot.querySelector(".player");
        audioFile.src = source;
        audioFile.load();
      }
    }, {
      key: "handlePlaythrough",
      value: function handlePlaythrough() {
        var _this2 = this;
        setTimeout(function () {
          console.log("Loading finished");
          _this2.canPlay = true;
          _this2.audioController(true);
        }, 500);
      }
    }, {
      key: "audioController",
      value: function audioController(playState) {
        var audio = this.shadowRoot.querySelector(".player");
        if (playState) {
          audio.play();
          this.playing = true;
          this.icon = "av:pause";
          console.log(this.playing);
        } else {
          audio.pause();
          this.playing = false;
          this.icon = "av:play-arrow";
          console.log(this.playing);
        }
      }
    }, {
      key: "handleClickEvent",
      value: function handleClickEvent() {
        var audio = this.shadowRoot.querySelector(".player");
        if (!audio.hasAttribute("src")) {
          this.icon = "hax:loading";
          this.loadAudio(this.source);
        }
        if (this.canPlay) {
          if (audio.paused) {
            this.audioController(true);
          } else {
            this.audioController(false);
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_e5e24130e46a11edbf2e2349c355f24c || (_templateObject_e5e24130e46a11edbf2e2349c355f24c = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"container\">\n        <simple-icon-button\n          class=\"icon-spacing\"\n          icon=\"", "\"\n          @click=\"", "\"\n        ></simple-icon-button>\n        <slot></slot>\n        <audio\n          class=\"player\"\n          type=\"audio/mpeg\"\n          @canplaythrough=\"", "\"\n          @timeupdate=\"", "\"\n        ></audio>\n        <div></div>\n      </div>\n    "])), this.icon, this.handleClickEvent, this.handlePlaythrough, this.handleProgress);
      }

      /**
       * haxProperties integration via file reference
       */
    }], [{
      key: "tag",
      get: function get() {
        return "inline-audio";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          source: {
            type: String,
            reflect: true
          },
          icon: {
            type: String
          },
          playing: {
            type: Boolean,
            reflect: true
          },
          canPlay: {
            type: Boolean,
            reflect: true
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_e5e24130e46a11edbf2e2349c355f24c || (_templateObject2_e5e24130e46a11edbf2e2349c355f24c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline;\n          vertical-align: middle;\n          color: #1a2b42;\n          max-width: 960px;\n          margin: 0 auto;\n          background-color: var(--inline-audio-background-color);\n        }\n        .container {\n          display: inline-flex;\n          align-items: center;\n          padding: 4px 4px 4px 0px;\n          background: grey;\n          border-radius: 4px;\n          min-width: 64px;\n          font-size: 18px;\n          /* cursor: pointer; */\n        }\n        .icon-spacing {\n          padding-right: 8px;\n        }\n      "])))];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./lib/".concat(this.tag, ".haxProperties.json"), meta.url).href;
      }
    }]);
    return InlineAudio;
  }(_index.LitElement);
  _exports.InlineAudio = InlineAudio;
  customElements.define(InlineAudio.tag, InlineAudio);
});