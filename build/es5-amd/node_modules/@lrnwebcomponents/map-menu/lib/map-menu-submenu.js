define(["exports", "../../../lit/index.js", "./map-menu-header.js", "../../a11y-collapse/a11y-collapse.js"], function (_exports, _index, _mapMenuHeader, _a11yCollapse) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MapMenuSubmenu = void 0;
  var _templateObject_0bdf9ed0e51211edbf9f41986c80248c, _templateObject2_0bdf9ed0e51211edbf9f41986c80248c;
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var MapMenuSubmenu = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(MapMenuSubmenu, _LitElement);
    var _super = _createSuper(MapMenuSubmenu);
    function MapMenuSubmenu() {
      var _this;
      babelHelpers.classCallCheck(this, MapMenuSubmenu);
      _this = _super.call(this);
      _this.iconLabel = null;
      _this.opened = false;
      _this.collapsable = true;
      _this.expandChildren = false;
      _this.avatarLabel = "";
      _this.label = "";
      _this.status = "";
      _this.itemtitle = "";
      _this.locked = false;
      _this.published = true;
      _this.icon = null;
      _this.__icon = "";
      setTimeout(function () {
        _this.addEventListener("active-item", _this.__activeChanged.bind(babelHelpers.assertThisInitialized(_this)));
        _this.addEventListener("toggle-header", _this.__toggleHeader.bind(babelHelpers.assertThisInitialized(_this)));
        _this.addEventListener("link-clicked", _this._headerClickHandler.bind(babelHelpers.assertThisInitialized(_this)));
        _this.addEventListener("map-menu-item-hidden-check", _this._mapMenuItemHiddenCheckHandler.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      return _this;
    }

    // align the collapse state w/ this state
    // ensure we block this moving up tho or we'll align too much :)
    babelHelpers.createClass(MapMenuSubmenu, [{
      key: "__alignCollapseState",
      value: function __alignCollapseState(e) {
        e.stopImmediatePropagation();
        e.preventDefault();
        e.stopPropagation();
        this.opened = e.detail.expanded;
      }
      /**
       * LitElement life cycle - render
       */
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_0bdf9ed0e51211edbf9f41986c80248c || (_templateObject_0bdf9ed0e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral(["\n      <a11y-collapse\n        id=\"container\"\n        ?expanded=\"", "\"\n        @a11y-collapse-click=\"", "\"\n      >\n        <map-menu-header\n          .avatar-label=\"", "\"\n          id=\"", "\"\n          itemtitle=\"", "\"\n          label=\"", "\"\n          ?opened=\"", "\"\n          url=\"", "\"\n          selected=\"", "\"\n          icon=\"", "\"\n          icon-label=\"", "\"\n          slot=\"heading\"\n          ?published=\"", "\"\n          ?locked=\"", "\"\n          status=\"", "\"\n        ></map-menu-header>\n        <slot></slot>\n      </a11y-collapse>\n    "])), this.opened, this.__alignCollapseState, this.avatarLabel, this.id, this.itemtitle, this.label, this.opened, this.url, this.selected, this.icon, this.iconLabel, this.published, this.locked, this.status);
      }
    }, {
      key: "_headerClickHandler",
      value: function _headerClickHandler(e) {
        if (!this.opened) {
          this.opened = !this.opened;
        }
      }
    }, {
      key: "_mapMenuItemHiddenCheckHandler",
      value: function _mapMenuItemHiddenCheckHandler(e) {
        var hiddenChild = e.detail.hiddenChild;
        var detail = Object.assign({}, e.detail);
        if (hiddenChild !== true && this.opened === false) {
          detail = Object.assign({}, detail, {
            hiddenChild: true
          });
        } else {
          detail = Object.assign({}, detail, {
            hiddenChild: false
          });
        }
        this.dispatchEvent(new CustomEvent("map-meu-item-hidden-check", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: detail
        }));
      }
    }, {
      key: "__toggleHeader",
      value: function __toggleHeader(e) {
        // catch the event and end propagation
        e.stopPropagation();
        this.opened = !this.opened;
        this.dispatchEvent(new CustomEvent("toggle-updated", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            opened: this.opened
          }
        }));
      }
    }, {
      key: "__activeChanged",
      value: function __activeChanged(e) {
        this.opened = true;
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject2_0bdf9ed0e51211edbf9f41986c80248c || (_templateObject2_0bdf9ed0e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          overflow: hidden;\n        }\n        :host([collapsable]) > map-menu-builder {\n          cursor: pointer;\n          display: block;\n        }\n        :host([opened]) map-menu-header {\n          /*border-left: 16px solid var(--map-menu-border-depth, rgba(0,0,0,.1));*/\n        }\n        #container {\n          margin: 0;\n        }\n        #container ::slotted(map-menu-builder) {\n          display: block;\n        }\n        #container ::slotted(map-menu-item),\n        #container ::slotted(map-menu-submenu) {\n          margin-left: 10px;\n        }\n        a11y-collapse {\n          --a11y-collapse-border: 0;\n          --a11y-collapse-horizontal-padding: 0;\n          --a11y-collapse-vertical-padding: 0;\n          color: var(--map-menu-item-a-color, inherit);\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "map-menu-submenu";
      }
      /**
       * LitElement life cycle - properties definition
       */
    }, {
      key: "properties",
      get: function get() {
        return {
          id: {
            type: String
          },
          itemtitle: {
            type: String
          },
          iconLabel: {
            type: String,
            attribute: "icon-label"
          },
          avatarLabel: {
            type: String,
            attribute: "avatar-label"
          },
          label: {
            type: String
          },
          icon: {
            type: String
          },
          url: {
            type: String
          },
          opened: {
            type: Boolean,
            attribute: "opened",
            reflect: true
          },
          collapsable: {
            type: Boolean
          },
          expandChildren: {
            type: Boolean,
            attribute: "expand-children"
          },
          selected: {
            type: String
          },
          published: {
            type: Boolean
          },
          locked: {
            type: Boolean
          },
          status: {
            type: String,
            reflect: true
          }
        };
      }
    }]);
    return MapMenuSubmenu;
  }(_index.LitElement);
  _exports.MapMenuSubmenu = MapMenuSubmenu;
  customElements.define(MapMenuSubmenu.tag, MapMenuSubmenu);
});