define(["exports", "meta", "require", "../../lit/index.js", "../simple-toolbar/lib/simple-toolbar-button.js", "../i18n-manager/lib/I18NMixin.js"], function (_exports, meta, _require, _index, _simpleToolbarButton, _I18NMixin2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MarkTheWords = void 0;
  meta = _interopRequireWildcard(meta);
  _require = _interopRequireWildcard(_require);
  var _templateObject_32b53720e8f211edb01b473406559cea, _templateObject2_32b53720e8f211edb01b473406559cea, _templateObject3_32b53720e8f211edb01b473406559cea, _templateObject4_32b53720e8f211edb01b473406559cea, _templateObject5_32b53720e8f211edb01b473406559cea, _templateObject6_32b53720e8f211edb01b473406559cea;
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var MarkTheWords = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(MarkTheWords, _I18NMixin);
    var _super = _createSuper(MarkTheWords);
    function MarkTheWords() {
      var _this;
      babelHelpers.classCallCheck(this, MarkTheWords);
      _this = _super.call(this);
      _this.answers = null;
      _this.correctAnswers = [];
      _this.wordList = _this.innerText.split(/\s+/g);
      _this.question = "Mark the words that are correct";
      _this.isEnabled = true;
      _this.numberCorrect = 0;
      _this.numberGuessed = 0;
      _this._haxstate = false;
      _this.demoMode = false;
      _this.t = {
        check: "Check",
        tryAgain: "Try Again",
        editMode: "Edit Mode",
        tryMode: "Try Mode"
      };
      return _this;
    }
    babelHelpers.createClass(MarkTheWords, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;
        babelHelpers.get(babelHelpers.getPrototypeOf(MarkTheWords.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "wordList") {
            _this2.rebuildContents(_this2[propName]);
          }
          if (propName === "answers" && _this2[propName]) {
            _this2.correctAnswers = _this2[propName].split(",");
            for (var i = 0; i < _this2.correctAnswers.length; i++) {
              _this2.correctAnswers[i] = _this2.correctAnswers[i].toUpperCase();
            }
          }
          if (propName === "numberCorrect" && _this2.numberCorrect === _this2.numberGuessed && _this2.numberCorrect !== 0 && _this2.numberGuessed !== 0) {
            new Promise(function (res, rej) {
              return _require.default(["../multiple-choice/lib/confetti-container.js"], res, rej);
            }).then(function (module) {
              setTimeout(function () {
                _this2.shadowRoot.querySelector("#confetti").setAttribute("popped", "");
              }, 0);
            });
          }
        });
      }
    }, {
      key: "rebuildContents",
      value: function rebuildContents(ary) {
        var _this3 = this;
        //wipe out inner
        this.shadowRoot.querySelector(".text").innerHTML = "";
        ary.forEach(function (word) {
          var span = document.createElement("span");
          span.innerText = word;
          span.setAttribute("tabindex", "-1");
          span.addEventListener("click", _this3.selectWord.bind(_this3));
          _this3.shadowRoot.querySelector(".text").appendChild(span);
        });
      }

      // CSS - specific to Lit
    }, {
      key: "selectWord",
      value: function selectWord(e) {
        if (e.target.getAttribute("data-selected")) {
          e.target.removeAttribute("data-selected");
        } else {
          e.target.setAttribute("data-selected", "data-selected");
        }
      }
    }, {
      key: "checkAnswer",
      value: function checkAnswer(e) {
        if (this.isEnabled) {
          this.isEnabled = false;
          for (var i = 0; i < this.wordList.length; i++) {
            if (this.correctAnswers.includes(this.wordList[i].replace(/[&#^,+()$~%.":*?<>{}]/g, "").toUpperCase())) {
              this.numberCorrect++;
            }
          }
          var selected = this.shadowRoot.querySelectorAll(".text span[data-selected]");
          for (var i = 0; i < selected.length; i++) {
            var el = selected[i];
            if (this.correctAnswers.includes(el.innerText.replace(/[&#^,+()$~%.":*?<>{}]/g, "").toUpperCase())) {
              el.setAttribute("data-status", "correct");
              this.numberGuessed++;
            } else {
              el.setAttribute("data-status", "incorrect");
              if (this.numberGuessed > 0) {
                this.numberGuessed--;
              }
            }
          }
          var allWords = this.shadowRoot.querySelectorAll(".text span");
          for (var i = 0; i < allWords.length; i++) {
            var _el = allWords[i];
            _el.setAttribute("check-mode", "active");
          }
        } else {
          this.isEnabled = true;
          this.numberGuessed = 0;
          this.numberCorrect = 0;
          var _selected = this.shadowRoot.querySelectorAll(".text span[data-selected]");
          for (var i = 0; i < _selected.length; i++) {
            var _el2 = _selected[i];
            if (_el2.getAttribute("data-status")) {
              _el2.removeAttribute("data-status");
              _el2.removeAttribute("data-selected");
            }
          }
          var _allWords = this.shadowRoot.querySelectorAll(".text span");
          for (var i = 0; i < _allWords.length; i++) {
            var _el3 = _allWords[i];
            _el3.setAttribute("check-mode", "inactive");
          }
        }
      }

      // HTML - specific to Lit
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_32b53720e8f211edb01b473406559cea || (_templateObject_32b53720e8f211edb01b473406559cea = babelHelpers.taggedTemplateLiteral(["\n      <confetti-container id=\"confetti\">\n        <p class=\"question\">", "</p>\n        ", "\n        <div class=\"buttons\">\n          <simple-toolbar-button\n            @click=\"", "\"\n            icon=\"check\"\n            label=\"", "\"\n            show-text-label\n            icon-position=\"left\"\n            align-vertical=\"center\"\n            align-horizontal=\"center\"\n          ></simple-toolbar-button>\n          ", "\n          ", "\n        </div>\n      </confetti-container>\n    "])), this.question, this._haxstate && this.demoMode ? (0, _index.html)(_templateObject2_32b53720e8f211edb01b473406559cea || (_templateObject2_32b53720e8f211edb01b473406559cea = babelHelpers.taggedTemplateLiteral(["<slot></slot>"]))) : (0, _index.html)(_templateObject3_32b53720e8f211edb01b473406559cea || (_templateObject3_32b53720e8f211edb01b473406559cea = babelHelpers.taggedTemplateLiteral(["<div class=\"text\"></div>"]))), this.checkAnswer, this.isEnabled ? this.t.check : this.t.tryAgain, this.isEnabled ? "" : (0, _index.html)(_templateObject4_32b53720e8f211edb01b473406559cea || (_templateObject4_32b53720e8f211edb01b473406559cea = babelHelpers.taggedTemplateLiteral(["", "/", "\n              ", "%"])), this.numberGuessed, this.numberCorrect, Math.round(10 * (this.numberGuessed / this.numberCorrect * 100)) / 10), this._haxstate ? (0, _index.html)(_templateObject5_32b53720e8f211edb01b473406559cea || (_templateObject5_32b53720e8f211edb01b473406559cea = babelHelpers.taggedTemplateLiteral(["<simple-toolbar-button\n                @click=\"", "\"\n                icon=\"", "\"\n                label=\"", "\"\n                show-text-label\n                icon-position=\"left\"\n                align-vertical=\"center\"\n                align-horizontal=\"center\"\n              ></simple-toolbar-button>"])), this.toggleDemo, this.demoMode ? "av:play-circle-filled" : "image:edit", this.demoMode ? this.t.tryMode : this.t.editMode) : "");
      }
    }, {
      key: "toggleDemo",
      value: function toggleDemo() {
        this.demoMode = !this.demoMode;
        // rebuild wordList when we go OUT of demo mode
        if (!this.demoMode) {
          this.wordList = this.innerText.split(/\s+/g);
        }
      }
    }, {
      key: "haxHooks",
      value: function haxHooks() {
        return {
          editModeChanged: "haxeditModeChanged",
          activeElementChanged: "haxactiveElementChanged"
        };
      }
    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(element, value) {
        if (value) {
          this._haxstate = value;
        }
      }
    }, {
      key: "haxeditModeChanged",
      value: function haxeditModeChanged(value) {
        this._haxstate = value;
      }

      // HAX specific callback
      // This teaches HAX how to edit and work with your web component
    }], [{
      key: "tag",
      get: function get() {
        return "mark-the-words";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(MarkTheWords), "properties", this)), {}, {
          wordList: {
            type: Array
          },
          demoMode: {
            type: Boolean
          },
          answers: {
            type: String
          },
          correctAnswers: {
            type: Array
          },
          missedAnswers: {
            type: Array
          },
          question: {
            type: String
          },
          isEnabled: {
            type: Boolean
          },
          _haxstate: {
            type: Boolean
          },
          numberCorrect: {
            type: Number
          },
          numberGuessed: {
            type: Number
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject6_32b53720e8f211edb01b473406559cea || (_templateObject6_32b53720e8f211edb01b473406559cea = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: grid;\n          padding: 16px;\n          margin: 0px;\n          border: 2px solid black;\n        }\n        span {\n          display: inline-flex;\n          font-size: var(--x-ample-font-size, 24px);\n          padding: 2px;\n          margin: 0 2px;\n        }\n        span:hover,\n        span:focus {\n          outline: 2px dashed blue;\n          cursor: pointer;\n        }\n        span[data-selected] {\n          outline: 2px solid purple;\n        }\n        span[data-selected]:hover,\n        span[data-selected]:focus {\n          outline: 2px solid blue;\n        }\n        span[data-status=\"correct\"] {\n          outline: 2px solid purple;\n        }\n        span[data-status=\"correct\"]::after {\n          content: \"+1\";\n          font-size: 14px;\n          color: green;\n          font-weight: bold;\n          border-radius: 50%;\n          border: 2px solid purple;\n          padding: 4px;\n          margin-left: 8px;\n          line-height: 14px;\n        }\n        span[data-status=\"incorrect\"] {\n          outline: 2px solid red;\n        }\n        span[data-status=\"incorrect\"]::after {\n          content: \"-1\";\n          font-size: 14px;\n          color: red;\n          font-weight: bold;\n          border-radius: 50%;\n          border: 2px solid red;\n          padding: 4px;\n          margin-left: 8px;\n          line-height: 14px;\n        }\n        span[check-mode=\"active\"] {\n          pointer-events: none;\n        }\n        .buttons {\n          grid-column: 1;\n          grid-row: 3;\n          margin: 8px;\n        }\n        .correct {\n          grid-column: 1;\n          grid-row: 3;\n          margin-top: 20px;\n        }\n        .question {\n          margin-bottom: 0px;\n          margin-top: 0px;\n          grid-column: 1;\n          grid-row: 1;\n        }\n        .text {\n          grid-column: 1;\n          grid-row: 2;\n          margin-top: 0px;\n        }\n        .scoreExp {\n          margin-top: 1px;\n          margin-bottom: 1px;\n          text-decoration: underline;\n        }\n      "])))];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./lib/".concat(this.tag, ".haxProperties.json"), meta.url).href;
      }
    }]);
    return MarkTheWords;
  }((0, _I18NMixin2.I18NMixin)(_index.LitElement));
  _exports.MarkTheWords = MarkTheWords;
  customElements.define(MarkTheWords.tag, MarkTheWords);
});