define(["exports", "../../../lit/index.js", "../../simple-colors/simple-colors.js", "./simple-tag-lite.js", "./simple-fields-ui.js"], function (_exports, _index, _simpleColors, _simpleTagLite, _simpleFieldsUi) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleTag = void 0;
  var _templateObject_1000e6e0e51211edbf9f41986c80248c;
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var SimpleTag = /*#__PURE__*/function (_SimpleTagLiteSuper) {
    babelHelpers.inherits(SimpleTag, _SimpleTagLiteSuper);
    var _super = _createSuper(SimpleTag);
    function SimpleTag() {
      var _this;
      babelHelpers.classCallCheck(this, SimpleTag);
      _this = _super.call(this);
      _this.autoAccentColor = false;
      return _this;
    }
    babelHelpers.createClass(SimpleTag, [{
      key: "updated",
      value: function updated(changedProperties) {
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleTag.prototype), "updated", this).call(this, changedProperties);
        // updates to the value or autoAccentColor should trigger a color change
        // but we MUST have values in both
        if (this.shadowRoot && (changedProperties.has("autoAccentColor") || changedProperties.has("value")) && this.value && this.autoAccentColor) {
          this.accentColor = this.calculateAccentColor(this.value);
        }
      }
    }, {
      key: "calculateAccentColor",
      value: function calculateAccentColor(value) {
        // use the seed to generate a random number
        var seed = 54;
        for (var i = 0; i < value.length; i++) {
          // hard limit of 32 to be safe bc of calculation since seed is supposed to be like a word
          if (i < 32) {
            seed *= value.charCodeAt(i);
          }
        }
        // make seed into string
        seed = seed + "";
        if (seed.length > 8) {
          seed = seed.substring(5, 7);
        }
        var colorName = Array.from(Object.keys(this.colors))[seed[0]];
        // shade is whatever the 2nd value is here
        var shade = parseInt(seed[1]) !== 0 ? parseInt(seed[1]) : 1;
        // avoid nuetral middle shades for higher contrasting text
        if ([5, 6, 7].includes(shade)) {
          shade = shade - 3;
        } else if ([8, 9].includes(shade)) {
          shade = shade + 2;
        }
        // set accent shade by figuring out which contrastic colors will be valid
        var contrast = this.getContrastingColors(colorName, shade, false);
        var contrastLevel = contrast.grey[0];
        // highest contrast if a dark starting tone
        if (shade < 5) {
          contrastLevel = contrast.grey.pop();
        }
        this.style.setProperty('--simple-fields-button-background-color', "var(--simple-colors-default-theme-accent-".concat(shade, ", orange)"));
        this.style.setProperty('--simple-fields-button-color', "var(--simple-colors-default-theme-grey-".concat(contrastLevel, ", black)"));
        // set accent color
        return colorName;
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleTag), "properties", this)), {}, {
          autoAccentColor: {
            type: Boolean,
            attribute: "auto-accent-color"
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleTag), "styles", this)), [_simpleFieldsUi.SimpleFieldsButtonStyles, _simpleFieldsUi.SimpleFieldsTooltipStyles, (0, _index.css)(_templateObject_1000e6e0e51211edbf9f41986c80248c || (_templateObject_1000e6e0e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          --simple-fields-button-color: var(\n            --simple-colors-default-theme-accent-12,\n            #222222\n          );\n          --simple-fields-fieldset-border-color: var(\n            --simple-colors-default-theme-accent-3,\n            #eeeeee\n          );\n          --simple-fields-button-background-color: var(\n            --simple-colors-default-theme-accent-3,\n            #eeeeee\n          );\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "simple-tag";
      }
    }]);
    return SimpleTag;
  }((0, _simpleTagLite.SimpleTagLiteSuper)(_simpleColors.SimpleColors));
  _exports.SimpleTag = SimpleTag;
  customElements.define(SimpleTag.tag, SimpleTag);
});