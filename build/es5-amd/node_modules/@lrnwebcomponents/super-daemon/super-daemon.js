define(["exports", "../../lit/index.js", "../simple-icon/lib/simple-icon-button.js", "../../web-dialog/index.js", "../absolute-position-behavior/absolute-position-behavior.js", "./lib/super-daemon-ui.js"], function (_exports, _index, _simpleIconButton, _index2, _absolutePositionBehavior, _superDaemonUi) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SuperDaemonInstance = _exports.SuperDaemon = void 0;
  var _templateObject_5335b1e0ddf411ed96ad39cc5dd30a65, _templateObject2_5335b1e0ddf411ed96ad39cc5dd30a65, _templateObject3_5335b1e0ddf411ed96ad39cc5dd30a65, _templateObject4_5335b1e0ddf411ed96ad39cc5dd30a65;
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  /**
   * `super-daemon`
   * ``
   * @demo demo/index.html
   * @element super-daemon
   */
  var SuperDaemon = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(SuperDaemon, _LitElement);
    var _super = _createSuper(SuperDaemon);
    /**
     * HTMLElement
     */
    function SuperDaemon() {
      var _this;
      babelHelpers.classCallCheck(this, SuperDaemon);
      _this = _super.call(this);
      // used when in mini mode to know what to point to and how to focus after the fact
      _this.activeSelection = null;
      _this.activeRange = null;
      _this.activeNode = null;
      _this.value = '';
      _this.icon = "hardware:keyboard-return";
      _this.context = [];
      _this.opened = false;
      _this.items = [];
      _this.loading = false;
      _this.like = "";
      _this.mini = false;
      _this._programValues = {};
      _this.programSearch = "";
      _this.allItems = [];
      _this.programResults = [];
      _this.programName = null;
      _this.commandContext = "*";
      var isSafari = window.safari !== undefined;
      if (isSafari) {
        _this.key1 = "Ctrl";
      } else {
        _this.key1 = "Alt";
      }
      _this.key2 = "Shift";
      return _this;
    }
    babelHelpers.createClass(SuperDaemon, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SuperDaemon.prototype), "connectedCallback", this).call(this);
        window.addEventListener("keydown", this.keyHandler.bind(this));
        window.addEventListener("super-daemon-define-option", this.defineOptionEvent.bind(this));
        window.addEventListener("super-daemon-element-method", this.elementMethod.bind(this));
        window.addEventListener("super-daemon-element-click", this.elementClick.bind(this));
        window.addEventListener("super-daemon-run-program", this.runProgramEvent.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SuperDaemon.prototype), "connectedCallback", this).call(this);
        window.removeEventListener("keydown", this.keyHandler.bind(this));
        window.removeEventListener("click", this.clickOnMiniMode.bind(this), {
          once: true,
          passive: true
        });
        window.removeEventListener("super-daemon-define-option", this.defineOptionEvent.bind(this));
        window.removeEventListener("super-daemon-element-method", this.elementMethod.bind(this));
        window.removeEventListener("super-daemon-element-click", this.elementClick.bind(this));
        window.removeEventListener("super-daemon-run-program", this.runProgramEvent.bind(this));
      }
      // reset to filter for a specific term with something like runProgram('*',null,null,null, "Insert Blocks");
      // Run wikipedia search with runProgram('/',{method},'Wikipedia','Drupal');
    }, {
      key: "runProgram",
      value: function runProgram() {
        var _this2 = this;
        var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "/";
        var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var program = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var search = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
        var like = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
        this.commandContext = context;
        this._programToRun = program;
        this.programSearch = search;
        // used to force a search prepopulation
        if (like != null) {
          this.like = like;
        }
        // ensure we have a program as this could be used for resetting program state
        if (this._programToRun) {
          this.shadowRoot.querySelector("super-daemon-ui").setupProgram();
          setTimeout( /*#__PURE__*/babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  _this2.loading = true;
                  _context.next = 4;
                  return _this2._programToRun(_this2.programSearch, values);
                case 4:
                  _this2.programResults = _context.sent;
                  _this2.loading = false;
                  _context.next = 11;
                  break;
                case 8:
                  _context.prev = 8;
                  _context.t0 = _context["catch"](0);
                  _this2.loading = false;
                case 11:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[0, 8]]);
          })), 50);
        } else {
          this.programResults = [];
        }
        this.programName = name;
      }
      // run "program"
    }, {
      key: "runProgramEvent",
      value: function runProgramEvent(e) {
        if (e.detail) {
          var data = e.detail;
          this._programValues = data;
          this.like = "";
          this.runProgram(data.context, this._programValues, data.program, data.name, "");
        } else {
          this.runProgram("/");
          this._programValues = {};
        }
      }
      // allow generating an event on a target
    }, {
      key: "elementMethod",
      value: function elementMethod(e) {
        if (e.detail) {
          var _data$target;
          var data = e.detail;
          if (!data.args) {
            data.args = [];
          }
          (_data$target = data.target)[data.method].apply(_data$target, babelHelpers.toConsumableArray(data.args));
        }
      }
      // allow generating an event on a target
    }, {
      key: "elementClick",
      value: function elementClick(e) {
        if (e.detail) {
          e.detail.target.dispatchEvent(new MouseEvent("click", {
            bubbles: true,
            cancelable: true,
            view: window
          }));
        }
      }
      // take in via event
    }, {
      key: "defineOptionEvent",
      value: function defineOptionEvent(e) {
        this.defineOption(e.detail);
      }

      // minor validation of option; as we have a singleton this is faster when required
    }, {
      key: "defineOption",
      value: function defineOption(option) {
        if (option && option.value && option.title && option.eventName) {
          if (!option.tags) {
            option.tags = [];
          }
          if (!option.key) {
            option.key = "";
          }
          if (!option.path) {
            option.path = "";
          }
          if (!option.priority) {
            option.priority = 0;
          }
          // create new object from existing so we can build an index
          // remove icon, image, value, eventName as these are not searchable values
          // then create an idex by making everything else into a space separated string
          var indexBuilder = _objectSpread({}, option);
          delete indexBuilder.icon;
          delete indexBuilder.image;
          delete indexBuilder.value;
          delete indexBuilder.eventName;
          indexBuilder = Object.values(indexBuilder).filter(function (i) {
            if (!['boolean', 'number'].includes(babelHelpers.typeof(i)) && i !== "" && i !== null && i !== undefined) {
              return true;
            }
          });
          var index = [];
          indexBuilder.map(function (i) {
            if (typeof i === 'string') {
              // helps w/ splitting on / or else it's just a single item anyway
              var q = i.split('/');
              q.map(function (j) {
                if (!["", "*", "/", " ", "?", ">"].includes(j)) {
                  index.push(j.toLowerCase());
                }
              });
            } else if (Array.isArray(i)) {
              i.map(function (j) {
                if (!["", "*", "/", " ", "?", ">"].includes(j)) {
                  index.push(j.toLowerCase());
                }
              });
            } else {
              // this shouldn't be possible so ignore the value..
            }
          });
          // combine all the values into a single string removing silly things that might slip through
          var tmp = index.join(' ').replace(/\*/g, '').replace(/\?/g, '');
          // use a set to remove duplicates
          index = babelHelpers.toConsumableArray(new Set(tmp.split(" ")));
          // clean index of words :) but also include path as a whole phrase
          option.index = index.join(' ') + ' ' + option.path;
          this.allItems.push(option);
        }
      }
    }, {
      key: "keyHandler",
      value: function keyHandler(e) {
        // modifier required to activate
        if (this.allowedCallback()) {
          // open and close events
          if (this.key2 == "Shift" && e.shiftKey) {
            // platform specific additional modifier
            if (this.key1 == "Ctrl" && e.ctrlKey) {
              this.opened = !this.opened;
              // ensure we're not in mini mode if we are
              if (this.opened) {
                this.mini = false;
              }
            } else if (this.key1 == "Alt" && e.altKey) {
              this.opened = !this.opened;
              // ensure we're not in mini mode if we are
              if (this.opened) {
                this.mini = false;
              }
            }
          }
          if (e.key == "Escape" && this.opened) {
            this.miniCancel();
          }
        }
      }
      /**
       * LitElement style callback
       */
    }, {
      key: "close",
      value:
      /**
       * Close the modal and do some clean up
       */
      function close() {
        // clean up event for click away in mini mode if active
        this.opened = false;
        this.activeNode = null;
        this.loading = false;
        this.like = "";
        this.mini = false;
        this._programValues = {};
        this.programSearch = "";
        this.programResults = [];
        this.programName = null;
        this.commandContext = "*";
        var event = new MouseEvent("click", {
          view: window,
          bubbles: true,
          cancelable: true
        });
        document.dispatchEvent(event);
        window.removeEventListener("click", this.clickOnMiniMode.bind(this), {
          once: true,
          passive: true
        });
        if (window.ShadyCSS && !window.ShadyCSS.nativeShadow) {
          this.shadowRoot.querySelector("web-dialog").shadowRoot.querySelector("#backdrop").style.position = "relative";
        }
      }
    }, {
      key: "filterItems",
      value: function filterItems(items, context) {
        var _this3 = this;
        var tmpItems = items.filter(function (item) {
          // ensuire we have a context at all
          if (item.context) {
            // if we're in a global context, include all global context results
            var results = [];
            if (_this3.commandContext == "*") {
              results = context.filter(function (value) {
                return item.context.includes(value);
              });
            } else {
              results = [_this3.commandContext].filter(function (value) {
                return item.context.includes(value);
              });
            }
            return results.length !== 0;
          }
          return true;
        });
        // order alphabeticly
        tmpItems.sort(function (a, b) {
          var textA = a.title.toUpperCase();
          var textB = b.title.toUpperCase();
          return textA < textB ? -1 : textA > textB ? 1 : 0;
        });
        // then on priority
        return tmpItems.sort(function (a, b) {
          return a.priority < b.priority ? -1 : a.priority > b.priority ? 1 : 0;
        });
      }
      // can't directly set context
    }, {
      key: "appendContext",
      value: function appendContext(context) {
        if (context && !this.context.includes(context)) {
          this.context.push(context);
        }
      }
      // remove from context
    }, {
      key: "removeContext",
      value: function removeContext(context) {
        if (context && this.context.includes(context)) {
          this.context.splice(this.context.indexOf(context), 1);
        }
      }
      // if we click away, take the active value and apply it to the line
    }, {
      key: "clickOnMiniMode",
      value: function clickOnMiniMode(e) {
        if (e.target !== this) {
          this.miniCancel();
        }
      }
      // if we cancel out of mini mode there's a lot of UX enhancements we can do for the end user
    }, {
      key: "miniCancel",
      value: function miniCancel() {
        if (this.activeNode && this.activeNode.focus && this.mini && this.activeRange && this.activeSelection) {
          try {
            this.activeNode.textContent = this.value;
            this.activeNode.focus();
            this.activeRange.setStart(this.activeNode, 0);
            this.activeRange.collapse(true);
            this.activeSelection.removeAllRanges();
            this.activeSelection.addRange(this.activeRange);
            this.activeSelection.selectAllChildren(this.activeNode);
            this.activeSelection.collapseToEnd();
          } catch (e) {
            console.warn(e);
          }
        }
        this.close();
      }
    }, {
      key: "open",
      value: function open() {
        var _this4 = this;
        // filter to context
        this.items = this.filterItems(this.allItems, this.context);
        this.opened = true;
        var wd = this.shadowRoot.querySelector("web-dialog");
        if (wd) {
          // modal mode kills off the ability to close the dialog
          wd.$backdrop.addEventListener("click", wd.onBackdropClick);
          wd.addEventListener("keydown", wd.onKeyDown, {
            capture: true,
            passive: true
          });
          if (window.ShadyCSS && !window.ShadyCSS.nativeShadow) {
            this.shadowRoot.querySelector("web-dialog").shadowRoot.querySelector("#backdrop").style.position = "fixed";
            this.shadowRoot.querySelector("web-dialog").shadowRoot.querySelector("#backdrop").style.top = 0;
            this.shadowRoot.querySelector("web-dialog").shadowRoot.querySelector("#backdrop").style.bottom = 0;
            this.shadowRoot.querySelector("web-dialog").shadowRoot.querySelector("#backdrop").style.left = 0;
            this.shadowRoot.querySelector("web-dialog").shadowRoot.querySelector("#backdrop").style.right = 0;
          }
        }
        window.removeEventListener("click", this.clickOnMiniMode.bind(this), {
          once: true,
          passive: true
        });
        setTimeout(function () {
          // ensure if we click away from the UI that we close and clean up
          if (_this4.mini) {
            window.addEventListener("click", _this4.clickOnMiniMode.bind(_this4), {
              once: true,
              passive: true
            });
          }
          _this4.shadowRoot.querySelector("super-daemon-ui").shadowRoot.querySelector("simple-fields-field").focus();
          _this4.shadowRoot.querySelector("super-daemon-ui").shadowRoot.querySelector("simple-fields-field").select();
        }, 0);
      }
    }, {
      key: "focusout",
      value: function focusout(e) {
        var _this5 = this;
        if (e) {
          var parent = e.relatedTarget;
          while (parent !== document.body && parent !== null) {
            if (parent === this.shadowRoot.querySelector("super-daemon-ui")) {
              return;
            }
            if (parent && parent.parentElement) {
              parent = parent.parentElement;
            } else {
              return;
            }
          }
          if (parent !== this.shadowRoot.querySelector("super-daemon-ui")) {
            setTimeout(function () {
              if (_this5.opened) {
                _this5.shadowRoot.querySelector("super-daemon-ui").shadowRoot.querySelector("simple-fields-field").focus();
                _this5.shadowRoot.querySelector("super-daemon-ui").shadowRoot.querySelector("simple-fields-field").select();
              }
            }, 0);
          }
        }
      }
      // if we have no results, allow for a slot to be applied via someone
      // consuming this in their app. example - providing a link to suggest a
      // new command be added
    }, {
      key: "noResultsSlot",
      value: function noResultsSlot(searchTerm) {
        return;
      }
      /**
       * LitElement render callback
       */
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_5335b1e0ddf411ed96ad39cc5dd30a65 || (_templateObject_5335b1e0ddf411ed96ad39cc5dd30a65 = babelHelpers.taggedTemplateLiteral(["", " "])), this.mini ? (0, _index.html)(_templateObject2_5335b1e0ddf411ed96ad39cc5dd30a65 || (_templateObject2_5335b1e0ddf411ed96ad39cc5dd30a65 = babelHelpers.taggedTemplateLiteral(["\n          <absolute-position-behavior\n            justify\n            position=\"bottom\"\n            allow-overlap\n            sticky\n            auto\n            .target=\"", "\"\n            ?hidden=\"", "\"\n          >\n            <super-daemon-ui\n              ?open=\"", "\"\n              ?mini=\"", "\"\n              icon=\"", "\"\n              ?loading=\"", "\"\n              like=\"", "\"\n              .items=\"", "\"\n              command-context=\"", "\"\n              program-name=\"", "\"\n              program-search=\"", "\"\n              @value-changed=\"", "\"\n              @super-daemon-close=\"", "\"\n              @super-daemon-command-context-changed=\"", "\"\n            ></super-daemon-ui>\n          </absolute-position-behavior>\n        "])), this.activeNode, !this.opened, this.opened, this.mini, this.icon, this.loading, this.like, this.itemsForDisplay(this.items, this.programResults), this.commandContext, this.programName, this.programSearch, this.inputfilterChanged, this.close, this.commandContextChanged) : (0, _index.html)(_templateObject3_5335b1e0ddf411ed96ad39cc5dd30a65 || (_templateObject3_5335b1e0ddf411ed96ad39cc5dd30a65 = babelHelpers.taggedTemplateLiteral(["\n          <web-dialog\n            id=\"dialog\"\n            center\n            role=\"dialog\"\n            part=\"dialog\"\n            aria-label=\"Super Daemon\"\n            aria-modal=\"true\"\n            ?open=\"", "\"\n            @open=\"", "\"\n            @close=\"", "\"\n            @focusout=\"", "\"\n          >\n            <super-daemon-ui\n              ?open=\"", "\"\n              icon=\"", "\"\n              ?loading=\"", "\"\n              like=\"", "\"\n              @like-changed=\"", "\"\n              .items=\"", "\"\n              command-context=\"", "\"\n              program-name=\"", "\"\n              program-search=\"", "\"\n              @value-changed=\"", "\"\n              @super-daemon-close=\"", "\"\n              @super-daemon-command-context-changed=\"", "\"\n              >", "</super-daemon-ui\n            >\n            <simple-icon-button\n              id=\"cancel\"\n              icon=\"cancel\"\n              @click=\"", "\"\n            ></simple-icon-button>\n          </web-dialog>\n        "])), this.opened, this.open, this.close, this.focusout, this.opened, this.icon, this.loading, this.like, this.likeChanged, this.itemsForDisplay(this.items, this.programResults), this.commandContext, this.programName, this.programSearch, this.inputfilterChanged, this.close, this.commandContextChanged, this.noResultsSlot(this.like || this.programSearch), this.close));
      }
    }, {
      key: "likeChanged",
      value: function likeChanged(e) {
        this.like = e.detail.value;
      }
    }, {
      key: "inputfilterChanged",
      value: function () {
        var _inputfilterChanged = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                // update this value as far as what's being typed no matter what it is
                this.value = e.detail.value;
                if (!(this.programName && this._programToRun)) {
                  _context2.next = 9;
                  break;
                }
                this.loading = true;
                _context2.next = 5;
                return this._programToRun(e.detail.value, this._programValues);
              case 5:
                this.programResults = _context2.sent;
                this.loading = false;
                _context2.next = 11;
                break;
              case 9:
                this.programResults = [];
                // we moved back out of a context, reset complete
                this.items = this.filterItems(this.allItems, this.context);
              case 11:
              case "end":
                return _context2.stop();
            }
          }, _callee2, this);
        }));
        function inputfilterChanged(_x) {
          return _inputfilterChanged.apply(this, arguments);
        }
        return inputfilterChanged;
      }()
    }, {
      key: "itemsForDisplay",
      value: function itemsForDisplay(items, programResults) {
        if (this.programName != null) {
          return programResults;
        }
        return items;
      }
    }, {
      key: "commandContextChanged",
      value: function commandContextChanged(e) {
        if (e.detail.value) {
          switch (e.detail.value) {
            case "/":
            case "*": // global context / anything
            case "?":
            case ">":
              this.commandContext = e.detail.value;
              this.items = this.filterItems(this.allItems, this.context);
              break;
          }
        } else {
          // context removed; most likely via backspace being hit
          this.commandContext = "*";
          this.items = this.filterItems(this.allItems, this.context);
        }
      }
      // override to block calling from global key commands
    }, {
      key: "allowedCallback",
      value: function allowedCallback() {
        return true;
      }
      /**
       * Convention we use
       */
    }], [{
      key: "properties",
      get: function get() {
        return {
          opened: {
            type: Boolean,
            reflect: true
          },
          loading: {
            type: Boolean,
            reflect: true
          },
          key1: {
            type: String
          },
          key2: {
            type: String
          },
          icon: {
            type: String
          },
          items: {
            type: Array
          },
          programResults: {
            type: Array
          },
          programName: {
            type: String
          },
          allItems: {
            type: Array
          },
          context: {
            type: Array
          },
          commandContext: {
            type: String
          },
          program: {
            type: String
          },
          programSearch: {
            type: String
          },
          like: {
            type: String
          },
          value: {
            type: String
          },
          mini: {
            type: Boolean
          },
          activeNode: {
            type: Object
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        // support for using in other classes
        var styles = [];
        if (babelHelpers.get(babelHelpers.getPrototypeOf(SuperDaemon), "styles", this)) {
          styles = babelHelpers.get(babelHelpers.getPrototypeOf(SuperDaemon), "styles", this);
        }
        return [].concat(babelHelpers.toConsumableArray(styles), [(0, _index.css)(_templateObject4_5335b1e0ddf411ed96ad39cc5dd30a65 || (_templateObject4_5335b1e0ddf411ed96ad39cc5dd30a65 = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: none;\n        }\n        :host([opened]) {\n          display: block;\n        }\n        web-dialog {\n          --dialog-border-radius: var(--simple-modal-border-radius, 2px);\n          z-index: var(--simple-modal-z-index, 1) !important;\n          padding: 0;\n        }\n        web-dialog::part(dialog) {\n          border: 1px solid var(--simple-modal-border-color, #222);\n          min-height: var(--simple-modal-min-height, unset);\n          min-width: var(--simple-modal-min-width, unset);\n          z-index: var(--simple-modal-z-index, 1000);\n          resize: var(--simple-modal-resize, unset);\n          padding: 0;\n          --dialog-height: var(--simple-modal-height, auto);\n          --dialog-width: var(--simple-modal-width, 75vw);\n          --dialog-max-width: var(--simple-modal-max-width, 100vw);\n          --dialog-max-height: var(--simple-modal-max-height, 100vh);\n        }\n        web-dialog.style-scope.simple-modal {\n          display: none !important;\n        }\n        web-dialog[open].style-scope.simple-modal {\n          display: flex !important;\n          position: fixed !important;\n          margin: auto;\n        }\n        :host([resize=\"none\"]) web-dialog[open].style-scope.simple-modal,\n        :host([resize=\"horizontal\"]) web-dialog[open].style-scope.simple-modal {\n          top: calc(50% - var(--simple-modal-height, auto) / 2);\n        }\n        :host([resize=\"none\"]) web-dialog[open].style-scope.simple-modal,\n        :host([resize=\"vertical\"]) web-dialog[open].style-scope.simple-modal {\n          left: calc(50% - var(--simple-modal-width, 75vw) / 2);\n        }\n        #cancel {\n          position: absolute;\n          right: 0px;\n          top: 0px;\n          z-index: 100000000;\n          display: block;\n          margin: 0;\n          --simple-icon-width: 24px;\n          --simple-icon-height: 24px;\n        }\n        absolute-position-behavior {\n          z-index: var(--simple-modal-z-index, 1000);\n          min-width: 280px;\n        }\n        absolute-position-behavior super-daemon-ui {\n          margin-top: -46px;\n          background-color: white;\n          width: 400px;\n          margin-left: 14px;\n          padding-top: 8px;\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "super-daemon";
      }
    }]);
    return SuperDaemon;
  }(_index.LitElement);
  _exports.SuperDaemon = SuperDaemon;
  customElements.define(SuperDaemon.tag, SuperDaemon);
  // register globally so we can make sure there is only one
  window.SuperDaemonManager = window.SuperDaemonManager || {};
  window.SuperDaemonManager.requestAvailability = function () {
    if (!window.SuperDaemonManager.instance) {
      window.SuperDaemonManager.instance = document.createElement("super-daemon");
      document.body.appendChild(window.SuperDaemonManager.instance);
    }
    return window.SuperDaemonManager.instance;
  };
  var SuperDaemonInstance = window.SuperDaemonManager.requestAvailability();
  _exports.SuperDaemonInstance = SuperDaemonInstance;
});