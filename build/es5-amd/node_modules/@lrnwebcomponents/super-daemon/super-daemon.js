define(["exports", "../../lit/index.js", "../../web-dialog/index.js", "./lib/super-daemon-ui.js"], function (_exports, _index, _index2, _superDaemonUi) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SuperDaemonInstance = _exports.SuperDaemon = void 0;
  var _templateObject_982a6d70b48911edaa972d5aad30d551, _templateObject2_982a6d70b48911edaa972d5aad30d551;
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  /**
   * `super-daemon`
   * ``
   * @demo demo/index.html
   * @element super-daemon
   */
  var SuperDaemon = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(SuperDaemon, _LitElement);
    var _super = _createSuper(SuperDaemon);
    /**
     * HTMLElement
     */
    function SuperDaemon() {
      var _this;
      babelHelpers.classCallCheck(this, SuperDaemon);
      _this = _super.call(this);
      _this.icon = "hardware:keyboard-return";
      _this.opened = false;
      _this.items = [];
      var isSafari = window.safari !== undefined;
      if (isSafari) {
        _this.key1 = "Ctrl";
      } else {
        _this.key1 = "Alt";
      }
      _this.key2 = "Shift";
      return _this;
    }
    babelHelpers.createClass(SuperDaemon, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SuperDaemon.prototype), "connectedCallback", this).call(this);
        window.addEventListener("keydown", this.keyHandler.bind(this));
        window.addEventListener("super-daemon-define-option", this.defineOptionEvent.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SuperDaemon.prototype), "connectedCallback", this).call(this);
        window.removeEventListener("keydown", this.keyHandler.bind(this));
        window.removeEventListener("super-daemon-define-option", this.defineOptionEvent.bind(this));
      }
      // take in via event
    }, {
      key: "defineOptionEvent",
      value: function defineOptionEvent(e) {
        this.defineOption(e.detail);
      }

      // minor validation of option; as we have a singleton this is faster when required
    }, {
      key: "defineOption",
      value: function defineOption(option) {
        if (option && option.value && option.title && option.eventName) {
          option.index = option.tags.join(" ") + " " + option.title + " " + option.key + " " + option.path;
          this.items.push(option);
        }
      }
    }, {
      key: "keyHandler",
      value: function keyHandler(e) {
        // modifier required to activate
        if (this.allowedCallback()) {
          // open and close events
          if (this.key2 == "Shift" && e.shiftKey) {
            // platform specific additional modifier
            if (this.key1 == "Ctrl" && e.ctrlKey) {
              this.opened = !this.opened;
            } else if (this.key1 == "Alt" && e.altKey) {
              this.opened = !this.opened;
            }
          }
          if (e.key == "Escape" && this.opened) {
            this.opened = false;
          }
          // if we hit enter while in the combo box, we should select the 1st option
          // or move between items as far as focus
          if (this.opened && this.shadowRoot.querySelector("super-daemon-ui").filtered.length > 0) {
            switch (e.key) {
              case "Enter":
                // @todo dont do this if we have focus on an item
                this.shadowRoot.querySelector("super-daemon-ui").shadowRoot.querySelector("super-daemon-row").selected();
                break;
              case "ArrowUp":
                // @todo get focus on the row via an "active" parameter so we can just target that in the UI
                this.shadowRoot.querySelector("super-daemon-ui").shadowRoot.querySelector("super-daemon-row").shadowRoot.querySelector("button").focus();
                break;
              case "ArrowDown":
                this.shadowRoot.querySelector("super-daemon-ui").shadowRoot.querySelector("super-daemon-row").shadowRoot.querySelector("button").focus();
                break;
            }
          }
        }
      }
      /**
       * LitElement style callback
       */
    }, {
      key: "close",
      value:
      /**
       * Close the modal and do some clean up
       */
      function close() {
        this.opened = false;
        if (window.ShadyCSS && !window.ShadyCSS.nativeShadow) {
          this.shadowRoot.querySelector("web-dialog").shadowRoot.querySelector("#backdrop").style.position = "relative";
        }
      }
    }, {
      key: "open",
      value: function open() {
        this.items = babelHelpers.toConsumableArray(this.items);
        this.opened = true;
        var wd = this.shadowRoot.querySelector("web-dialog");
        // modal mode kills off the ability to close the dialog
        if (this.modal) {
          wd.$backdrop.removeEventListener("click", wd.onBackdropClick);
          wd.removeEventListener("keydown", wd.onKeyDown, {
            capture: true
          });
        } else {
          wd.$backdrop.addEventListener("click", wd.onBackdropClick);
          wd.addEventListener("keydown", wd.onKeyDown, {
            capture: true,
            passive: true
          });
        }
        if (window.ShadyCSS && !window.ShadyCSS.nativeShadow) {
          this.shadowRoot.querySelector("web-dialog").shadowRoot.querySelector("#backdrop").style.position = "fixed";
          this.shadowRoot.querySelector("web-dialog").shadowRoot.querySelector("#backdrop").style.top = 0;
          this.shadowRoot.querySelector("web-dialog").shadowRoot.querySelector("#backdrop").style.bottom = 0;
          this.shadowRoot.querySelector("web-dialog").shadowRoot.querySelector("#backdrop").style.left = 0;
          this.shadowRoot.querySelector("web-dialog").shadowRoot.querySelector("#backdrop").style.right = 0;
        }
        this.shadowRoot.querySelector("super-daemon-ui").shadowRoot.querySelector("simple-fields-field").focus();
      }
      /**
       * LitElement render callback
       */
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_982a6d70b48911edaa972d5aad30d551 || (_templateObject_982a6d70b48911edaa972d5aad30d551 = babelHelpers.taggedTemplateLiteral(["\n      <web-dialog\n        id=\"dialog\"\n        center\n        role=\"dialog\"\n        part=\"dialog\"\n        aria-label=\"Super Daemon\"\n        aria-modal=\"true\"\n        ?open=\"", "\"\n        @open=\"", "\"\n        @close=\"", "\"\n      >\n        <super-daemon-ui\n          ?open=\"", "\"\n          icon=\"", "\"\n          .items=\"", "\"\n          @super-daemon-close=\"", "\"\n        ></super-daemon-ui>\n      </web-dialog>\n    "])), this.opened, this.open, this.close, this.opened, this.icon, this.items, this.close);
      }
      // override to block calling from global key commands
    }, {
      key: "allowedCallback",
      value: function allowedCallback() {
        return true;
      }
      /**
       * Convention we use
       */
    }], [{
      key: "properties",
      get: function get() {
        return {
          opened: {
            type: Boolean,
            reflect: true
          },
          key1: {
            type: String
          },
          key2: {
            type: String
          },
          icon: {
            type: String
          },
          items: {
            type: Array
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        // support for using in other classes
        var styles = [];
        if (babelHelpers.get(babelHelpers.getPrototypeOf(SuperDaemon), "styles", this)) {
          styles = babelHelpers.get(babelHelpers.getPrototypeOf(SuperDaemon), "styles", this);
        }
        return [].concat(babelHelpers.toConsumableArray(styles), [(0, _index.css)(_templateObject2_982a6d70b48911edaa972d5aad30d551 || (_templateObject2_982a6d70b48911edaa972d5aad30d551 = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: none;\n        }\n        :host([opened]) {\n          display: block;\n        }\n        web-dialog {\n          --dialog-border-radius: var(--simple-modal-border-radius, 2px);\n          z-index: var(--simple-modal-z-index, 1) !important;\n          padding: 0;\n        }\n        web-dialog::part(dialog) {\n          border: 1px solid var(--simple-modal-border-color, #222);\n          min-height: var(--simple-modal-min-height, unset);\n          min-width: var(--simple-modal-min-width, unset);\n          z-index: var(--simple-modal-z-index, 1000);\n          resize: var(--simple-modal-resize, unset);\n          padding: 0;\n          --dialog-height: var(--simple-modal-height, auto);\n          --dialog-width: var(--simple-modal-width, 75vw);\n          --dialog-max-width: var(--simple-modal-max-width, 100vw);\n          --dialog-max-height: var(--simple-modal-max-height, 100vh);\n        }\n        web-dialog.style-scope.simple-modal {\n          display: none !important;\n        }\n        web-dialog[open].style-scope.simple-modal {\n          display: flex !important;\n          position: fixed !important;\n          margin: auto;\n        }\n        :host([resize=\"none\"]) web-dialog[open].style-scope.simple-modal,\n        :host([resize=\"horizontal\"]) web-dialog[open].style-scope.simple-modal {\n          top: calc(50% - var(--simple-modal-height, auto) / 2);\n        }\n        :host([resize=\"none\"]) web-dialog[open].style-scope.simple-modal,\n        :host([resize=\"vertical\"]) web-dialog[open].style-scope.simple-modal {\n          left: calc(50% - var(--simple-modal-width, 75vw) / 2);\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "super-daemon";
      }
    }]);
    return SuperDaemon;
  }(_index.LitElement);
  _exports.SuperDaemon = SuperDaemon;
  customElements.define(SuperDaemon.tag, SuperDaemon);
  // register globally so we can make sure there is only one
  window.SuperDaemonManager = window.SuperDaemonManager || {};
  window.SuperDaemonManager.requestAvailability = function () {
    if (!window.SuperDaemonManager.instance) {
      window.SuperDaemonManager.instance = document.createElement("super-daemon");
      document.body.appendChild(window.SuperDaemonManager.instance);
    }
    return window.SuperDaemonManager.instance;
  };
  var SuperDaemonInstance = window.SuperDaemonManager.requestAvailability();
  _exports.SuperDaemonInstance = SuperDaemonInstance;
});