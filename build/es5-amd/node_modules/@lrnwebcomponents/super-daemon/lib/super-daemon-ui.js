define(["exports", "../../../lit/index.js", "../../simple-icon/lib/simple-icons.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-fields/lib/simple-fields-field.js", "../../simple-fields/lib/simple-tag.js", "../../simple-filter/simple-filter.js", "../../i18n-manager/lib/I18NMixin.js", "./super-daemon-row.js"], function (_exports, _index, _simpleIcons, _simpleIconLite, _simpleFieldsField, _simpleTag, _simpleFilter, _I18NMixin, _superDaemonRow) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SuperDaemonUI = void 0;
  var _templateObject_10b89e20e51211edbf9f41986c80248c, _templateObject2_10b89e20e51211edbf9f41986c80248c, _templateObject3_10b89e20e51211edbf9f41986c80248c, _templateObject4_10b89e20e51211edbf9f41986c80248c, _templateObject5_10b89e20e51211edbf9f41986c80248c, _templateObject6_10b89e20e51211edbf9f41986c80248c, _templateObject7_10b89e20e51211edbf9f41986c80248c, _templateObject8_10b89e20e51211edbf9f41986c80248c, _templateObject9_10b89e20e51211edbf9f41986c80248c, _templateObject10_10b89e20e51211edbf9f41986c80248c;
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var SuperDaemonUI = /*#__PURE__*/function (_SimpleFilterMixin) {
    babelHelpers.inherits(SuperDaemonUI, _SimpleFilterMixin);
    var _super = _createSuper(SuperDaemonUI);
    function SuperDaemonUI() {
      var _this;
      babelHelpers.classCallCheck(this, SuperDaemonUI);
      _this = _super.call(this);
      _this.multiMatch = true;
      _this._defaultTextEmpty = "No results for this term";
      _this.t.noResultsForThisTerm = _this._defaultTextEmpty;
      _this.t.whatAreYouLookingFor = "What are you looking for?";
      _this.t.filterCommands = "Filter commands";
      _this.t.commands = "Commands";
      _this.t.loadingResults = "Loading results";
      _this.t.commonTasksText = "Merlin helps show you what's possible. Here are some common answers..";
      _this.opened = false;
      _this.items = [];
      _this.mini = false;
      _this.loading = false;
      _this.programSearch = "";
      _this.commandContext = "*";
      _this.programName = null;
      _this.shadowRootOptions = _objectSpread(_objectSpread({}, _index.LitElement.shadowRootOptions), {}, {
        delegatesFocus: true
      });
      _this.where = "index";
      _this.icon = "hardware:keyboard-return";
      _this.questionTags = [{
        value: "*",
        label: "Show me what's possible!"
      }, {
        value: "help",
        label: "I need help!"
      }, {
        value: "media",
        label: "Insert media.."
      }, {
        value: "edit",
        label: "Edit this page"
      }];
      return _this;
    }
    babelHelpers.createClass(SuperDaemonUI, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;
        if (babelHelpers.get(babelHelpers.getPrototypeOf(SuperDaemonUI.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SuperDaemonUI.prototype), "updated", this).call(this, changedProperties);
        }
        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "opened") {
            if (_this2.opened) {
              _this2.shadowRoot.querySelector("#inputfilter").focus();
              // reset to top of results
              _this2.shadowRoot.querySelector(".results").scrollTo(0, 0);
            }
          }
          if (propName == "commandContext") {
            _this2.dispatchEvent(new CustomEvent("super-daemon-command-context-changed", {
              detail: {
                value: _this2[propName]
              }
            }));
          }
          if (propName == "like") {
            _this2.dispatchEvent(new CustomEvent("like-changed", {
              detail: {
                value: _this2[propName]
              }
            }));
          }
        });
      }
    }, {
      key: "setupProgram",
      value: function setupProgram() {
        this.programSearch = "";
        this.shadowRoot.querySelector("#inputfilter").focus();
        this.shadowRoot.querySelector("#inputfilter").select();
        // reset to top of results
        this.shadowRoot.querySelector(".results").scrollTo(0, 0);
      }
      // feed results to the program as opposed to the global context based on program running
    }, {
      key: "inputfilterChanged",
      value: function inputfilterChanged(e) {
        if (this.programName) {
          // don't set like if we're in a program
          this.programSearch = e.target.value;
        } else {
          this.like = e.target.value;
        }
      }
      // reset search values because we selected something
    }, {
      key: "itemSelected",
      value: function itemSelected(e) {
        this.like = "";
        this.programSearch = "";
      }
    }, {
      key: "_resultsKeydown",
      value: function _resultsKeydown(e) {
        if (this.filtered.length > 0 && this.shadowRoot.querySelector("super-daemon-row[active]")) {
          switch (e.key) {
            case "ArrowUp":
            case "ArrowLeft":
              // allow wrap around
              if (this.shadowRoot.querySelector("super-daemon-row[active]") === this.shadowRoot.querySelector("super-daemon-row")) {
                this.shadowRoot.querySelector("super-daemon-row:last-child").shadowRoot.querySelector("button").focus();
              } else {
                this.shadowRoot.querySelector("super-daemon-row[active]").previousElementSibling.shadowRoot.querySelector("button").focus();
              }
              break;
            case "ArrowDown":
            case "ArrowRight":
              // allow wrap around
              if (this.shadowRoot.querySelector("super-daemon-row[active]") === this.shadowRoot.querySelector("super-daemon-row:last-child")) {
                this.shadowRoot.querySelector("super-daemon-row").shadowRoot.querySelector("button").focus();
              } else {
                this.shadowRoot.querySelector("super-daemon-row[active]").nextElementSibling.shadowRoot.querySelector("button").focus();
              }
              break;
          }
        }
      }
      // keydown when we have focus on the input field
    }, {
      key: "_inputKeydown",
      value: function _inputKeydown(e) {
        if (this.filtered.length > 0) {
          switch (e.key) {
            case "Enter":
              this.shadowRoot.querySelector("super-daemon-row").selected();
              break;
            case "ArrowUp":
              // @todo get focus on the row via an "active" parameter so we can just target that in the UI
              this.shadowRoot.querySelector("super-daemon-row:last-child").shadowRoot.querySelector("button").focus();
              this.shadowRoot.querySelector("super-daemon-row:last-child").scrollIntoView({
                block: "end",
                inline: "nearest"
              });
              break;
            case "ArrowDown":
              this.shadowRoot.querySelector("super-daemon-row").shadowRoot.querySelector("button").focus();
              this.shadowRoot.querySelector("super-daemon-row").scrollIntoView({
                block: "start",
                inline: "nearest"
              });
              break;
          }
        }
        // account for global override keys
        switch (e.key) {
          case "!":
          case "/":
          case "\\":
          case ">":
          case "<":
          case "?":
            // support variations on "slash" and developer commands that should interpret as same thing
            if (e.key === "\\" && this.like == "") {
              this.commandContext = "/";
              e.preventDefault();
            } else if (e.key === "!" && this.like == "") {
              this.commandContext = "/";
              e.preventDefault();
            } else if (e.key === "<" && this.like == "") {
              this.commandContext = ">";
              e.preventDefault();
            } else if (this.like == "") {
              this.commandContext = e.key;
              e.preventDefault();
            }
            break;
          case "Backspace":
            // use this to back out of a program context
            if (this.programSearch == "" && this.programName) {
              // run this to unset the program context
              this.dispatchEvent(new CustomEvent("super-daemon-run-program", {
                bubbles: true,
                cancelable: true,
                composed: true,
                detail: false
              }));
              e.preventDefault();
            } else if (!this.programName && this.like == "" && this.commandContext) {
              this.commandContext = "*";
              e.preventDefault();
            }
            break;
        }
      }
    }, {
      key: "getActiveTitle",
      value: function getActiveTitle(context) {
        switch (context) {
          case "/":
            return this.t.slashCommandsActive;
          case ">":
            return this.t.developerConsoleActive;
          case "?":
            return this.t.helpActive;
        }
        return "";
      }
    }, {
      key: "getActiveIcon",
      value: function getActiveIcon(context) {
        switch (context) {
          case "/":
            return "hax:slash";
          case ">":
            return "hax:console-line";
          case "?":
            return "icons:help";
        }
        return "";
      }
    }, {
      key: "commonConcepts",
      value: function commonConcepts(value) {
        var sdi = window.SuperDaemonManager.requestAvailability();
        switch (value) {
          case "help":
            sdi.runProgram("?", {}, null, null, "", "");
            break;
          case "media":
            sdi.runProgram("/", {}, null, null, "", "sources");
            break;
          case "edit":
            sdi.runProgram("*", {}, null, null, "", "CMS/action/edit");
            break;
          case "*":
            sdi.runProgram("*", {}, null, null, "", "");
            break;
        }
      }
    }, {
      key: "tagClick",
      value: function tagClick(e) {
        this.commonConcepts(e.target.getAttribute("data-value"));
      }
    }, {
      key: "tagKeydown",
      value: function tagKeydown(e) {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          this.commonConcepts(e.target.getAttribute("data-value"));
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;
        return (0, _index.html)(_templateObject_10b89e20e51211edbf9f41986c80248c || (_templateObject_10b89e20e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"common-tasks-text\">", "</div>\n      <div class=\"question-tags\">\n        ", "\n      </div>\n      <div class=\"search\">\n        ", "\n        ", "\n        <simple-fields-field\n          id=\"inputfilter\"\n          @value-changed=\"", "\"\n          @keydown=\"", "\"\n          .value=\"", "\"\n          aria-controls=\"filter\"\n          label=\"", "\"\n          placeholder=\"", "\"\n          type=\"text\"\n          auto-validate=\"\"\n          autofocus\n          part=\"filter\"\n        ></simple-fields-field>\n        <simple-icon-lite icon=\"", "\" class=\"icon\"></simple-icon-lite>\n      </div>\n      <div class=\"results-stats\">\n        ", " / ", " ", "\n      </div>\n      <div\n        class=\"results\"\n        @keydown=\"", "\"\n        @super-daemon-row-selected=\"", "\"\n      >\n        ", "\n      </div>\n    "])), this.t.commonTasksText, this.questionTags.map(function (item, i) {
          return (0, _index.html)(_templateObject2_10b89e20e51211edbf9f41986c80248c || (_templateObject2_10b89e20e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral([" <simple-tag\n            tabindex=\"0\"\n            @keydown=\"", "\"\n            @click=\"", "\"\n            accent-color=\"grey\"\n            value=\"", "\"\n            part=\"tag tag-", "\"\n            data-value=\"", "\"\n          ></simple-tag>"])), _this3.tagKeydown, _this3.tagClick, item.label, i, item.value);
        }), this.commandContext != "*" ? (0, _index.html)(_templateObject3_10b89e20e51211edbf9f41986c80248c || (_templateObject3_10b89e20e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral(["<simple-icon-lite\n              title=\"", "\"\n              icon=\"", "\"\n              class=\"user-context-icon\"\n            ></simple-icon-lite>"])), this.getActiveTitle(this.commandContext), this.getActiveIcon(this.commandContext)) : "", this.programName ? (0, _index.html)(_templateObject4_10b89e20e51211edbf9f41986c80248c || (_templateObject4_10b89e20e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral(["<span class=\"program\">", "</span>"])), this.programName) : "", this.inputfilterChanged, this._inputKeydown, this.like, this.t.filterCommands, this.t.whatAreYouLookingFor, this.icon, this.filtered.length, this.items.length, this.t.commands, this._resultsKeydown, this.itemSelected, this.loading ? (0, _index.html)(_templateObject5_10b89e20e51211edbf9f41986c80248c || (_templateObject5_10b89e20e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral(["<div class=\"loading\">", "..</div>"])), this.t.loadingResults) : (0, _index.html)(_templateObject6_10b89e20e51211edbf9f41986c80248c || (_templateObject6_10b89e20e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral(["\n              ", "\n            "])), !this.filtered.length || this.filtered.length === 0 ? (0, _index.html)(_templateObject7_10b89e20e51211edbf9f41986c80248c || (_templateObject7_10b89e20e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral(["<div class=\"no-results\">\n                      ", "\n                    </div>\n                    <div class=\"slotted\"><slot></slot></div>"])), this.t.noResultsForThisTerm) : (0, _index.html)(_templateObject8_10b89e20e51211edbf9f41986c80248c || (_templateObject8_10b89e20e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral(["\n                    ", "\n                  "])), this.filtered.map(function (item, i) {
          return (0, _index.html)(_templateObject9_10b89e20e51211edbf9f41986c80248c || (_templateObject9_10b89e20e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral(["\n                        <super-daemon-row\n                          data-row-index=\"", "\"\n                          .value=\"", "\"\n                          icon=\"", "\"\n                          image=\"", "\"\n                          title=\"", "\"\n                          .tags=\"", "\"\n                          event-name=\"", "\"\n                          path=\"", "\"\n                          key=\"", "\"\n                          ?more=\"", "\"\n                          ?mini=\"", "\"\n                          >", "</super-daemon-row\n                        >\n                      "])), i, item.value, item.icon, item.image, item.title, item.tags, item.eventName, item.path, item.key, item.more && !_this3.mini, _this3.mini, item.more ? item.more : _index.nothing);
        }))));
      }
    }], [{
      key: "tag",
      get: function get() {
        return "super-daemon-ui";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SuperDaemonUI), "properties", this)), {}, {
          icon: {
            type: String
          },
          mini: {
            type: Boolean,
            reflect: true
          },
          loading: {
            type: Boolean,
            reflect: true
          },
          programSearch: {
            type: String,
            attribute: "program-search"
          },
          programName: {
            type: String,
            attribute: "program-name"
          },
          commandContext: {
            type: String,
            attribute: "command-context"
          },
          opened: {
            type: Boolean,
            reflect: true
          },
          questionTags: {
            type: Array,
            attribute: "question-tags"
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        var styles = [];
        if (babelHelpers.get(babelHelpers.getPrototypeOf(SuperDaemonUI), "styles", this)) {
          styles = babelHelpers.get(babelHelpers.getPrototypeOf(SuperDaemonUI), "styles", this);
        }
        return [].concat(babelHelpers.toConsumableArray(styles), [(0, _index.css)(_templateObject10_10b89e20e51211edbf9f41986c80248c || (_templateObject10_10b89e20e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        .question-tags {\n          display: flex;\n          justify-content: space-evenly;\n          padding: 8px;\n        }\n        .common-tasks-text {\n          font-size: 18px;\n          padding: 8px;\n        }\n        .search {\n          display: flex;\n        }\n        .search input {\n          display: inline-flex;\n          width: 100%;\n        }\n        .search .icon {\n          display: inline-flex;\n          --simple-icon-height: 50px;\n          --simple-icon-width: 100px;\n        }\n\n        .search .user-context-icon {\n          display: inline-flex;\n          --simple-icon-height: 50px;\n          --simple-icon-width: 30px;\n        }\n        :host([mini]) .search .user-context-icon {\n          --simple-icon-height: 24px;\n          --simple-icon-width: 24px;\n          margin-top: 0px;\n        }\n        .loading {\n          font-size: 24px;\n          font-family: \"Roboto Mono\", monospace;\n          font-style: italic;\n          margin: 16px;\n        }\n        .program {\n          display: inline-flex;\n          font-family: \"Roboto Mono\", monospace;\n          background-color: black;\n          color: white;\n          line-break: anywhere;\n          word-break: break-all;\n          word-wrap: break-word;\n          text-overflow: clip;\n          overflow: hidden;\n          line-height: 16px;\n          height: 16px;\n          padding: 2px 4px;\n          margin: 16px 0 0 -2px;\n          font-size: 10px;\n          width: 100%;\n          max-width: 100px;\n        }\n        :host([mini]) .program {\n          line-height: 12px;\n          font-size: 10px;\n          max-width: 50px;\n          height: 24px;\n          margin: 0;\n          padding: 2px;\n        }\n        .results-stats {\n          right: 0;\n          position: absolute;\n          font-size: 12px;\n          color: #666;\n          padding: 8px;\n          margin: 8px;\n        }\n        .results {\n          width: 100%;\n          display: block;\n          border: 2px solid black;\n          max-height: 50vh;\n          min-height: 30vh;\n          overflow-y: scroll;\n          scroll-snap-align: start;\n          scroll-snap-type: y mandatory;\n          padding: 32px 0px;\n        }\n        .no-results {\n          font-size: 32px;\n          font-weight: bold;\n          max-width: 90%;\n          word-break: break-all;\n          overflow: hidden;\n          line-height: 32px;\n          height: 32px;\n          margin: 16px auto;\n          border: 1px solid transparent;\n          box-shadow: none;\n          outline: 0px;\n        }\n        .slotted {\n          display: block;\n          max-width: 90%;\n          font-size: 20px;\n        }\n        .slotted ::slotted(a) {\n          color: blue;\n          font-weight: bold;\n          text-decoration: underline;\n          cursor: pointer;\n        }\n        :host([mini]) .no-results {\n          font-size: 14px;\n          margin: 8px auto;\n          line-height: 14px;\n        }\n        simple-fields-field {\n          line-height: 40px;\n          padding: 8px;\n          color: inherit;\n          line-height: normal;\n          font-family: inherit;\n          width: 100%;\n          margin: 0px;\n        }\n        simple-tag:hover,\n        simple-tag:focus {\n          cursor: pointer;\n          outline: 1px solid black;\n          outline-offset: 4px;\n        }\n        :host([mini]) simple-fields-field::part(option-input) {\n          font-size: 12px;\n        }\n        simple-fields-field::part(option-input) {\n          padding: 0px 2px;\n          font-size: 24px;\n        }\n        simple-fields-field::part(label) {\n          opacity: 0;\n          height: 0;\n          width: 0;\n          position: absolute;\n          pointer-events: none;\n        }\n\n        @media screen and (max-width: 800px) {\n          .results-stats,\n          .common-tasks-text,\n          .question-tags {\n            display: none;\n          }\n          .results {\n            padding: 0px;\n          }\n          simple-fields-field {\n            line-height: 20px;\n          }\n          .search .icon {\n            display: none;\n          }\n          super-daemon-row {\n            --super-daemon-row-icon: 32px;\n            margin: 8px;\n          }\n          super-daemon-row::part(button) {\n            padding: 4px;\n          }\n          super-daemon-row::part(action) {\n            font-size: 28px;\n            line-height: 28px;\n            height: 28px;\n          }\n          super-daemon-row::part(path) {\n            font-size: 16px;\n          }\n          super-daemon-row::part(tags) {\n            width: 20%;\n          }\n          super-daemon-row::part(tag) {\n            display: none;\n          }\n          super-daemon-row::part(tag-0) {\n            display: inline-flex !important;\n            --simple-fields-font-size: 12px;\n          }\n          super-daemon-row::part(key-combo) {\n            display: none;\n          }\n        }\n        @media screen and (max-width: 640px) {\n          super-daemon-row::part(path) {\n            font-size: 12px;\n          }\n          super-daemon-row::part(action) {\n            font-size: 24px;\n            line-height: 24px;\n            height: 24px;\n          }\n        }\n\n        :host([mini]) {\n          background-color: white;\n        }\n        :host([mini]) super-daemon-row {\n          --super-daemon-row-icon: 24px;\n          border-radius: 0px;\n        }\n        :host([mini]) .results-stats,\n        :host([mini]) .common-tasks-text,\n        :host([mini]) .question-tags {\n          display: none;\n        }\n        :host([mini]) .results {\n          padding: 4px 0px;\n          max-height: unset;\n          min-height: unset;\n          height: 200px;\n        }\n        :host([mini]) .search .icon {\n          display: none;\n        }\n      "])))]);
      }
    }]);
    return SuperDaemonUI;
  }((0, _simpleFilter.SimpleFilterMixin)((0, _I18NMixin.I18NMixin)(_index.LitElement)));
  _exports.SuperDaemonUI = SuperDaemonUI;
  customElements.define(SuperDaemonUI.tag, SuperDaemonUI);
});