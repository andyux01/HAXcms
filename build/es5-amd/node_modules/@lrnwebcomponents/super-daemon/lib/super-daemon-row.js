define(["exports", "../../../lit/index.js", "../../simple-icon/lib/simple-icons.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-fields/lib/simple-tag.js"], function (_exports, _index, _simpleIcons, _simpleIconLite, _simpleTag) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SuperDaemonRow = void 0;
  var _templateObject_aefb7df0b48911edaa972d5aad30d551, _templateObject2_aefb7df0b48911edaa972d5aad30d551, _templateObject3_aefb7df0b48911edaa972d5aad30d551, _templateObject4_aefb7df0b48911edaa972d5aad30d551;
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var SuperDaemonRow = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(SuperDaemonRow, _LitElement);
    var _super = _createSuper(SuperDaemonRow);
    function SuperDaemonRow() {
      var _this;
      babelHelpers.classCallCheck(this, SuperDaemonRow);
      _this = _super.call(this);
      _this.title = null;
      _this.path = null;
      _this.icon = null;
      _this.key = null;
      _this.eventName = null;
      _this.value = {};
      _this.tags = [];
      _this.shadowRootOptions = _objectSpread(_objectSpread({}, _index.LitElement.shadowRootOptions), {}, {
        delegatesFocus: true
      });
      return _this;
    }
    babelHelpers.createClass(SuperDaemonRow, [{
      key: "keyEvent",
      value: function keyEvent(e) {
        // ensure that the daemon dialog does not accidentally duplicate or get this
        // when our focus was on a specific item while using the keyboard
        if (e.type === "keydown" && e.code === "Enter" || e.code === "Space") {
          this.selected();
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();
        }
      }
    }, {
      key: "clickEvent",
      value: function clickEvent(e) {
        this.selected();
      }
    }, {
      key: "selected",
      value: function selected() {
        // execute the event
        this.dispatchEvent(new CustomEvent(this.eventName, {
          composed: true,
          bubbles: true,
          detail: this.value
        }));
        // close dialog bc we executed that command
        this.dispatchEvent(new CustomEvent("super-daemon-close", {
          composed: true,
          bubbles: true,
          detail: true
        }));
      }
    }, {
      key: "pickColor",
      value: function pickColor(val) {
        if (val === 0) {
          return "blue";
        }
        return "orange";
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;
        return (0, _index.html)(_templateObject_aefb7df0b48911edaa972d5aad30d551 || (_templateObject_aefb7df0b48911edaa972d5aad30d551 = babelHelpers.taggedTemplateLiteral(["\n      <button @click=\"", "\" @keydown=\"", "\">\n        <simple-icon-lite icon=\"", "\"></simple-icon-lite>\n        <div class=\"label-wrap\">\n          <div class=\"action\">", "</div>\n          <div class=\"path\">", "</div>\n        </div>\n        <div class=\"tags\">\n          ", "\n        </div>\n        <div class=\"key-combo\">\n          ", "\n        </div>\n      </button>\n    "])), this.clickEvent, this.keyEvent, this.icon, this.title, this.path, this.tags.map(function (tag, i) {
          return (0, _index.html)(_templateObject2_aefb7df0b48911edaa972d5aad30d551 || (_templateObject2_aefb7df0b48911edaa972d5aad30d551 = babelHelpers.taggedTemplateLiteral([" <simple-tag\n              accent-color=\"", "\"\n              value=\"", "\"\n            ></simple-tag>"])), _this2.pickColor(i), tag);
        }), this.key ? (0, _index.html)(_templateObject3_aefb7df0b48911edaa972d5aad30d551 || (_templateObject3_aefb7df0b48911edaa972d5aad30d551 = babelHelpers.taggedTemplateLiteral(["<kbd class=\"keyboard-shortcut\">", "</kbd>"])), this.key) : "");
      }
    }], [{
      key: "tag",
      get: function get() {
        return "super-daemon-row";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          title: {
            type: String
          },
          path: {
            type: String
          },
          icon: {
            type: String
          },
          key: {
            type: String
          },
          eventName: {
            type: String,
            attribute: "event-name"
          },
          value: {
            type: Object
          },
          tags: {
            type: Array
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        var styles = [];
        if (babelHelpers.get(babelHelpers.getPrototypeOf(SuperDaemonRow), "styles", this)) {
          styles = babelHelpers.get(babelHelpers.getPrototypeOf(SuperDaemonRow), "styles", this);
        }
        return [].concat(babelHelpers.toConsumableArray(styles), [(0, _index.css)(_templateObject4_aefb7df0b48911edaa972d5aad30d551 || (_templateObject4_aefb7df0b48911edaa972d5aad30d551 = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          margin: 8px 16px;\n        }\n        button:focus,\n        button:hover {\n          background-color: var(\n            --super-daemon-row-hover,\n            rgba(0, 100, 200, 0.1)\n          );\n          outline: 2px solid black;\n        }\n        button {\n          display: flex;\n          padding: 16px;\n          width: 100%;\n          border-radius: 8px;\n          border: none;\n          align-items: middle;\n          justify-content: space-between;\n          background-color: transparent;\n        }\n        :host simple-icon-lite {\n          display: inline-flex;\n          --simple-icon-height: 50px;\n          --simple-icon-width: 50px;\n        }\n        .label-wrap {\n          min-width: 50%;\n          overflow: hidden;\n          text-align: left;\n        }\n        .tags {\n          width: 30%;\n          line-height: 32px;\n          height: 64px;\n          overflow: hidden;\n        }\n        .label-wrap .action {\n          font-size: 32px;\n          font-weight: bold;\n        }\n        .label-wrap .path {\n          font-size: 20px;\n          font-style: italic;\n          margin-top: 8px;\n        }\n        .key-combo {\n          font-size: 42px;\n          font-weight: bold;\n          font-style: italic;\n        }\n        .keyboard-shortcut {\n          background-color: rgba(0, 0, 0, 0.1);\n          border-radius: 4px;\n          color: rgba(0, 0, 0, 0.7);\n          box-shadow: rgb(209 213 219) 0px -4px 0px inset,\n            rgb(0 0 0 / 40%) 0px 1px 1px;\n          padding: 6px 8px;\n          margin: 0px auto;\n          display: block;\n          font-size: 14px;\n          word-spacing: 1px;\n          letter-spacing: -2px;\n          font-family: \"Press Start 2P\", \"Trebuchet MS\", \"Lucida Sans Unicode\",\n            \"Lucida Grande\", \"Lucida Sans\", Arial, sans-serif;\n        }\n      "])))]);
      }
    }]);
    return SuperDaemonRow;
  }(_index.LitElement);
  _exports.SuperDaemonRow = SuperDaemonRow;
  customElements.define(SuperDaemonRow.tag, SuperDaemonRow);
});