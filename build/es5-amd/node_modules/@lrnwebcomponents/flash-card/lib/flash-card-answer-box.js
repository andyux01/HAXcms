define(["exports", "meta", "../../i18n-manager/lib/I18NMixin.js", "../../../lit/index.js", "../../simple-colors/simple-colors.js", "../../simple-icon/lib/simple-icons.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icon-button-lite.js"], function (_exports, meta, _I18NMixin2, _index, _simpleColors, _simpleIcons, _simpleIconLite, _simpleIconButtonLite) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FlashCardAnswerBox = void 0;
  meta = _interopRequireWildcard(meta);
  var _templateObject_f5e9b240e4f411ed85766367b4d3e9fc, _templateObject2_f5e9b240e4f411ed85766367b4d3e9fc, _templateObject3_f5e9b240e4f411ed85766367b4d3e9fc, _templateObject4_f5e9b240e4f411ed85766367b4d3e9fc, _templateObject5_f5e9b240e4f411ed85766367b4d3e9fc;
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var FlashCardAnswerBox = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(FlashCardAnswerBox, _I18NMixin);
    var _super = _createSuper(FlashCardAnswerBox);
    function FlashCardAnswerBox() {
      var _this;
      babelHelpers.classCallCheck(this, FlashCardAnswerBox);
      _this = _super.call(this);
      _this.back = false;
      _this.status = "pending";
      _this.correctAnswer = "";
      _this.showResult = false;
      _this.statusIcon = "";
      _this.sideToShow = "front";
      _this.userAnswer = "";
      _this.icon = "";
      _this.message = "";
      _this.t = {
        yourAnswer: "Your answer",
        checkAnswer: "Check answer",
        retry: "Retry"
      };
      _this.registerLocalization({
        context: babelHelpers.assertThisInitialized(_this),
        localesPath: new URL("../locales/", meta.url).href,
        locales: ["es", "fr", "ja"]
      });
      return _this;
    }
    babelHelpers.createClass(FlashCardAnswerBox, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;
        if (babelHelpers.get(babelHelpers.getPrototypeOf(FlashCardAnswerBox.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(FlashCardAnswerBox.prototype), "updated", this).call(this, changedProperties);
        }
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "status" && oldValue !== undefined) {
            _this2.dispatchEvent(new CustomEvent("flash-card-status-change", {
              detail: _this2.status,
              bubbles: true
            }));
          }
          if (propName === "back") {
            _this2.sideToShow = _this2[propName] ? "back" : "front";
          }
        });
      }

      // Need this instead of .toUpperCase() for i18n
    }, {
      key: "equalsIgnoringCase",
      value: function equalsIgnoringCase(text) {
        return text.localeCompare(this.shadowRoot.querySelector("input").value, undefined, {
          sensitivity: "base"
        }) === 0;
      }
    }, {
      key: "checkUserAnswer",
      value: function checkUserAnswer() {
        var side = this.back ? "front" : "back";
        var comparison = this.shadowRoot.querySelector("[name=\"".concat(side, "\"]")).assignedNodes({
          flatten: true
        })[0].querySelector("[name=\"".concat(side, "\"]")).assignedNodes({
          flatten: true
        })[0].innerText;
        this.correct = this.equalsIgnoringCase(comparison);
        this.status = this.equalsIgnoringCase(comparison) ? "correct" : "incorrect";
        this.icon = this.equalsIgnoringCase(comparison) ? "check" : "cancel";
        this.message = this.equalsIgnoringCase(comparison) ? "Correct!" : "Incorrect!";
        this.showResult = !this.equalsIgnoringCase(comparison);
        // reverse so that it swaps which slot is shown
        this.correctAnswer = !this.back ? this.shadowRoot.querySelector("[name=\"back\"]").assignedNodes({
          flatten: true
        })[0].querySelector("[name=\"back\"]").assignedNodes({
          flatten: true
        })[0].innerText : this.shadowRoot.querySelector("[name=\"front\"]").assignedNodes({
          flatten: true
        })[0].querySelector("[name=\"front\"]").assignedNodes({
          flatten: true
        })[0].innerText;
        this.shadowRoot.querySelector("#check").disabled = true;
        this.shadowRoot.querySelector("input").disabled = true;
      }

      // as the user types input, grab the value
      // this way we can react to disable state among other things
    }, {
      key: "inputChanged",
      value: function inputChanged(e) {
        this.userAnswer = e.target.value;
      }

      // reset the interaction to the defaults
    }, {
      key: "resetCard",
      value: function resetCard() {
        this.showResult = false;
        this.correct = false;
        this.userAnswer = "";
        this.status = "pending";
        this.sideToShow = this.back ? "back" : "front";
        this.correctAnswer = "";
        this.shadowRoot.querySelector("input").disabled = false;
        this.shadowRoot.querySelector("input").value = "";
      }

      // CSS - specific to Lit
    }, {
      key: "render",
      value:
      // HTML - specific to Lit
      function render() {
        var _this3 = this;
        return (0, _index.html)(_templateObject_f5e9b240e4f411ed85766367b4d3e9fc || (_templateObject_f5e9b240e4f411ed85766367b4d3e9fc = babelHelpers.taggedTemplateLiteral(["\n      <div>\n        <p id=\"question\">\n          <slot name=\"front\" id=\"front\"></slot>\n          <slot name=\"back\" id=\"back\"></slot>\n        </p>\n        ", "\n      </div>\n      <div class=\"answer-section\">\n        <input\n          id=\"answer\"\n          type=\"text\"\n          .placeholder=\"", "\"\n          @input=\"", "\"\n          @keypress=\"", "\"\n          .value=\"", "\"\n        />\n        ", "\n      </div>\n      <div class=\"retry\">\n        <simple-icon-button-lite icon=\"refresh\" @click=\"", "\"\n          >", "</simple-icon-button-lite\n        >\n      </div>\n    "])), this.showResult || this.correct ? (0, _index.html)(_templateObject2_f5e9b240e4f411ed85766367b4d3e9fc || (_templateObject2_f5e9b240e4f411ed85766367b4d3e9fc = babelHelpers.taggedTemplateLiteral(["<p class=\"answer-message\">\n              Correct Answer: ", "\n            </p>"])), this.correctAnswer) : "", this.t.yourAnswer, this.inputChanged, function (e) {
          return e.key === "Enter" ? _this3.checkUserAnswer() : "";
        }, this.userAnswer, this.status === "pending" ? (0, _index.html)(_templateObject3_f5e9b240e4f411ed85766367b4d3e9fc || (_templateObject3_f5e9b240e4f411ed85766367b4d3e9fc = babelHelpers.taggedTemplateLiteral(["<button\n              id=\"check\"\n              ?disabled=\"", "\"\n              @click=\"", "\"\n            >\n              ", "\n            </button>"])), this.userAnswer === "", this.checkUserAnswer, this.t.checkAnswer) : (0, _index.html)(_templateObject4_f5e9b240e4f411ed85766367b4d3e9fc || (_templateObject4_f5e9b240e4f411ed85766367b4d3e9fc = babelHelpers.taggedTemplateLiteral(["<span id=\"status-message\"\n              ><simple-icon-lite\n                id=\"status-icon\"\n                icon=\"", "\"\n              ></simple-icon-lite\n              >", "</span\n            >"])), this.icon, this.message), this.resetCard, this.t.retry);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "flash-card-answer-box";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(FlashCardAnswerBox), "properties", this)), {}, {
          back: {
            type: Boolean,
            reflect: true
          },
          sideToShow: {
            type: String,
            reflect: true,
            attribute: "side-to-show"
          },
          userAnswer: {
            type: String,
            attribute: "user-answer"
          },
          status: {
            type: String,
            reflect: true
          },
          showResult: {
            type: Boolean,
            attribute: "show-result",
            reflect: true
          },
          statusIcon: {
            type: String,
            attribute: false
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        return (0, _index.css)(_templateObject5_f5e9b240e4f411ed85766367b4d3e9fc || (_templateObject5_f5e9b240e4f411ed85766367b4d3e9fc = babelHelpers.taggedTemplateLiteral(["\n      :host {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n      .answer-section {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: space-between;\n        width: 300px;\n        height: 45px;\n        border-radius: 20px;\n        border: solid 1px var(--simple-colors-default-theme-accent-5);\n        background-color: white;\n        padding: 0;\n      }\n      .answer-section:focus-within {\n        border-color: var(--simple-colors-default-theme-accent-6);\n        box-shadow: 0 0 10px var(--simple-colors-default-theme-accent-6);\n      }\n      input {\n        border: none;\n        padding: 10px;\n        font-size: 14px;\n        height: 25px;\n        border-radius: 19px 0 0 19px;\n        margin: 0;\n        width: 11em;\n        background-color: white;\n      }\n      input:focus {\n        outline: none;\n      }\n      button#check {\n        background-color: var(--simple-colors-default-theme-accent-10);\n        color: var(--simple-colors-default-theme-grey-1);\n        font-size: 14px;\n        margin: none;\n        padding: 0px;\n        border-radius: 0 19px 19px 0;\n        border: none;\n        overflow: hidden;\n        width: 50em;\n        height: 45px;\n      }\n      .retry simple-icon-button-lite {\n        color: red;\n        --simple-icon-button-border-radius: none;\n        --simple-icon-button-padding: 4px;\n      }\n      button:hover {\n        opacity: 0.8;\n      }\n      button:disabled {\n        opacity: 0.5;\n        background-color: #dddddd;\n        color: black;\n      }\n      p {\n        font-family: Helvetica;\n        color: var(--simple-colors-default-theme-accent-12);\n        font-weight: normal;\n        font-size: 20px;\n        text-align: center;\n      }\n      :host([side-to-show=\"front\"]) slot[name=\"back\"] {\n        display: none;\n      }\n      :host([side-to-show=\"back\"]) slot[name=\"front\"] {\n        display: none;\n      }\n      :host([status=\"correct\"]) .retry,\n      :host([status=\"incorrect\"]) .retry {\n        display: flex;\n      }\n\n      :host([status=\"correct\"]) #status-message {\n        color: green;\n      }\n\n      :host([status=\"correct\"]) #status-icon {\n        color: green;\n      }\n\n      :host([status=\"incorrect\"]) #status-message {\n        color: red;\n      }\n\n      :host([status=\"incorrect\"]) #status-icon {\n        color: red;\n      }\n\n      simple-icon-lite {\n        --simple-icon-width: 35px;\n        --simple-icon-height: 35px;\n        color: var(--simple-colors-default-theme-accent-10);\n      }\n\n      .sr-only {\n        position: absolute;\n        left: -10000px;\n        top: auto;\n        width: 1px;\n        height: 1px;\n        overflow: hidden;\n      }\n\n      .retry {\n        display: none;\n        width: 100%;\n        justify-content: flex-end;\n        padding-top: 10px;\n      }\n\n      #status-message {\n        margin-right: 15px;\n        display: flex;\n        align-items: center;\n        font-family: Helvetica;\n      }\n\n      #status-icon {\n        --simple-icon-height: 25px;\n        --simple-icon-width: 25px;\n      }\n\n      .answer-message {\n        font-size: 10pt;\n      }\n    "])));
      }
    }]);
    return FlashCardAnswerBox;
  }((0, _I18NMixin2.I18NMixin)(_simpleColors.SimpleColors));
  _exports.FlashCardAnswerBox = FlashCardAnswerBox;
  customElements.define(FlashCardAnswerBox.tag, FlashCardAnswerBox);
});