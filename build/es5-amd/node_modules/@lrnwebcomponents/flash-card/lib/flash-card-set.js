define(["exports", "meta", "../../../lit/index.js", "../../simple-colors/simple-colors.js", "../../simple-icon/lib/simple-icons.js", "../../simple-icon/lib/simple-icon-lite.js", "../flash-card.js"], function (_exports, meta, _index, _simpleColors, _simpleIcons, _simpleIconLite, _flashCard) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FlashCardSet = void 0;
  meta = _interopRequireWildcard(meta);
  var _templateObject_f5f3c460e4f411ed85766367b4d3e9fc, _templateObject2_f5f3c460e4f411ed85766367b4d3e9fc;
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  var FlashCardSet = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(FlashCardSet, _SimpleColors);
    var _super = _createSuper(FlashCardSet);
    // HTMLElement life-cycle, built in; use this for setting defaults
    function FlashCardSet() {
      var _this;
      babelHelpers.classCallCheck(this, FlashCardSet);
      _this = _super.call(this);
      _this.questions = [];
      _this.currentQuestion = 0;
      _this.cardLength = 4;
      return _this;
    }

    // properties that you wish to use as data in HTML, CSS, and the updated life-cycle
    babelHelpers.createClass(FlashCardSet, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;
        if (babelHelpers.get(babelHelpers.getPrototypeOf(FlashCardSet.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(FlashCardSet.prototype), "firstUpdated", this).call(this, changedProperties);
        }
        this.renderTags();
        this.shadowRoot.querySelector(".arrow-left").addEventListener("click", function () {
          if (_this2.currentQuestion > 0) {
            _this2.currentQuestion -= 1;
            _this2.changeVisible();
          }
        });
        this.shadowRoot.querySelector(".arrow-right").addEventListener("click", function () {
          if (_this2.currentQuestion < _this2.questions.length / 4 - 1) {
            _this2.currentQuestion += 1;
            _this2.changeVisible();
          }
        });
      }
    }, {
      key: "getData",
      value: function getData() {
        var slotData2 = this.shadowRoot.querySelector("slot").assignedNodes({
          flatten: true
        })[1].childNodes;
        var questionData = ["", "", "", ""];
        // eslint-disable-next-line no-plusplus
        for (var i = 0; i < slotData2.length; i++) {
          if (i % 2 === 1) {
            // eslint-disable-next-line no-plusplus
            for (var j = 0; j < slotData2[i].childNodes.length; j++) {
              if (j % 2 === 1) {
                var slot = slotData2[i].childNodes[j].slot;
                if (slot === "front") {
                  questionData[0] = slotData2[i].childNodes[j].innerHTML;
                }
                if (slot === "back") {
                  questionData[1] = slotData2[i].childNodes[j].innerHTML;
                }
                if (slot === "image") {
                  questionData[2] = slotData2[i].childNodes[j].innerHTML;
                }
                if (slot === "attributes") {
                  questionData[3] = slotData2[i].childNodes[j].innerHTML;
                }
              }
            }
            // eslint-disable-next-line no-plusplus
            for (var k = 0; k < questionData.length; k++) {
              this.questions.push(questionData[k]);
            }
            // eslint-disable-next-line no-plusplus
            for (var l = 0; l < 4; l++) {
              questionData[l] = "";
            }
          }
        }
      }
    }, {
      key: "renderTags",
      value: function renderTags() {
        this.getData();
        for (var i = 0; i < this.questions.length; i += this.cardLength) {
          this.formatEl(i / this.cardLength, this.questions[i], this.questions[i + 1], this.questions[i + 2], this.questions[i + 3]);
        }
      }
    }, {
      key: "formatEl",
      value: function formatEl(number) {
        // console.log(this.currentQuestion, this.questions, this.cardLength);
        // create a new element
        var el = document.createElement("flash-card");
        el.setAttribute("id", "card".concat(number));
        if (number !== 0) {
          el.className = "hidden";
        }
        // add the text
        el.innerHTML = "\n      <p slot=\"front\">".concat(arguments[1], "</p>\n      <p slot=\"back\">").concat(arguments[2], "</p>");
        // eslint-disable-next-line prefer-rest-params
        el.setAttribute("img-source", arguments[3]);
        // eslint-disable-next-line prefer-rest-params
        if (arguments[4].includes("dark")) {
          el.setAttribute("dark", "");
        }
        // append it to the parent
        this.shadowRoot.querySelector("#content").appendChild(el);
      }
    }, {
      key: "changeVisible",
      value: function changeVisible() {
        for (var i = 0; i < this.questions.length; i += this.cardLength) {
          var el = this.shadowRoot.querySelector("#card".concat(i / this.cardLength));
          if (i / this.cardLength === this.currentQuestion) {
            el.className = "visible";
          } else {
            el.className = "hidden";
          }
        }
      }

      // CSS - specific to Lit
    }, {
      key: "render",
      value:
      // HTML - specific to Lit
      function render() {
        return (0, _index.html)(_templateObject_f5f3c460e4f411ed85766367b4d3e9fc || (_templateObject_f5f3c460e4f411ed85766367b4d3e9fc = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"container\">\n        <div style=\"display: inline-flex\">\n          <simple-icon-lite\n            tabindex=\"0\"\n            icon=\"arrow-back\"\n            class=\"arrow-left\"\n            onclick=\"", "\"\n          ></simple-icon-lite>\n          <div id=\"content\"></div>\n          <simple-icon-lite\n            tabindex=\"0\"\n            icon=\"arrow-forward\"\n            class=\"arrow-right\"\n          ></simple-icon-lite>\n        </div>\n        <slot style=\"display: none\"></slot>\n      </div>\n    "])), this.changeVisible());
      }

      // HAX specific callback
      // This teaches HAX how to edit and work with your web component
      /**
       * haxProperties integration via file reference
       */
    }], [{
      key: "tag",
      get: function get() {
        return "flash-card-set";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          questions: {
            type: Array
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        return (0, _index.css)(_templateObject2_f5f3c460e4f411ed85766367b4d3e9fc || (_templateObject2_f5f3c460e4f411ed85766367b4d3e9fc = babelHelpers.taggedTemplateLiteral(["\n      :host {\n        display: block;\n      }\n      .arrow-right {\n        transform: scale(2) translateY(100px) translateX(10px);\n      }\n      .arrow-left {\n        transform: scale(2) translateY(100px) translateX(-10px);\n      }\n      .visible {\n        transform: scale(1);\n        display: block;\n        transition: all 1s ease-in-out;\n        top: 0;\n        left: 0;\n      }\n      .hidden {\n        transform: scale(0);\n        display: none;\n        transition: all 1s ease-in-out;\n        top: 0;\n        left: 0;\n      }\n      #content {\n        position: relative;\n      }\n    "])));
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("../lib/flash-card.haxProperties.json", meta.url).href;
      }
    }]);
    return FlashCardSet;
  }(_simpleColors.SimpleColors);
  _exports.FlashCardSet = FlashCardSet;
  customElements.define(FlashCardSet.tag, FlashCardSet);
});