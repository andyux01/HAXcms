define(["exports", "../../../lit-element/lit-element.js", "../../simple-tooltip/simple-tooltip.js", "../../hax-iconset/lib/simple-hax-iconset.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../simple-icon/lib/simple-icon-button-lite.js", "../../i18n-manager/lib/I18NMixin.js"], function (_exports, _litElement, _simpleTooltip, _simpleHaxIconset, _simpleIconLite, _simpleIcons, _simpleIconButtonLite, _I18NMixin2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LearningComponent = void 0;
  _exports.iconFromPageType = iconFromPageType;
  _exports.learningComponentVerbs = _exports.learningComponentTypes = _exports.learningComponentNouns = _exports.learningComponentColors = void 0;
  var _templateObject_06f90af0e51211edbf9f41986c80248c, _templateObject2_06f90af0e51211edbf9f41986c80248c, _templateObject3_06f90af0e51211edbf9f41986c80248c;
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  // Defines the type options available in the HAX wiring, "Learning Objectives" is the default.
  var learningComponentNouns = {
    content: "Content",
    assessment: "Assessment",
    quiz: "Quiz",
    submission: "Submission",
    lesson: "Lesson",
    module: "Module",
    task: "Task",
    activity: "Activity",
    project: "Project",
    practice: "Practice",
    unit: "Unit",
    objectives: "Learning Objectives"
  };
  _exports.learningComponentNouns = learningComponentNouns;
  var learningComponentVerbs = {
    connection: "Connection",
    knowledge: "Did You Know?",
    strategy: "Learning Strategy",
    discuss: "Discuss",
    listen: "Listen",
    make: "Make",
    observe: "Observe",
    present: "Present",
    read: "Read",
    reflect: "Reflect",
    research: "Research",
    watch: "Watch",
    write: "Write"
  };
  _exports.learningComponentVerbs = learningComponentVerbs;
  var learningComponentTypes = _objectSpread(_objectSpread({}, learningComponentVerbs), learningComponentNouns);
  _exports.learningComponentTypes = learningComponentTypes;
  var learningComponentColors = {
    content: "blue-grey",
    assessment: "red",
    quiz: "blue",
    submission: "deep-purple",
    lesson: "purple",
    module: "red",
    task: "blue-grey",
    activity: "orange",
    project: "deep-orange",
    practice: "brown",
    unit: "light-green",
    objectives: "indigo",
    connection: "green",
    knowledge: "cyan",
    strategy: "teal",
    discuss: "blue",
    listen: "purple",
    make: "orange",
    observe: "yellow",
    present: "light-blue",
    read: "lime",
    reflect: "amber",
    research: "deep-orange",
    watch: "pink",
    write: "deep-purple"
  };
  _exports.learningComponentColors = learningComponentColors;
  function iconFromPageType(type) {
    switch (type) {
      case "content":
        return "lrn:page";
      case "assessment":
        return "lrn:assessment";
      case "quiz":
        return "lrn:quiz";
      case "submission":
        return "icons:move-to-inbox";
      case "lesson":
        return "hax:lesson";
      case "module":
        return "hax:module";
      case "unit":
        return "hax:unit";
      case "task":
        return "hax:task";
      case "activity":
        return "hax:ticket";
      case "project":
        return "hax:bulletin-board";
      case "practice":
        return "hax:shovel";
      case "connection":
        return "courseicons:chem-connection";
        break;
      case "knowledge":
        return "courseicons:knowledge";
        break;
      case "strategy":
        return "courseicons:strategy";
        break;
      case "discuss":
        return "courseicons:strategy";
        break;
      case "listen":
        return "courseicons:listen";
        break;
      case "make":
        return "courseicons:strategy";
        break;
      case "observe":
        return "courseicons:strategy";
        break;
      case "present":
        return "courseicons:strategy";
        break;
      case "reading":
        return "courseicons:strategy";
        break;
      case "reflect":
        return "courseicons:strategy";
        break;
      case "research":
        return "courseicons:strategy";
        break;
      case "watch":
        return "courseicons:strategy";
        break;
      case "write":
        return "lrn:write";
        break;
    }
    return "courseicons:learning-objectives";
  }

  /**
   * `learning-component`
   * `An element for displaying learning materials.`
   * @demo demo/index.html
   * @element learning-component
   */
  var LearningComponent = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(LearningComponent, _I18NMixin);
    var _super = _createSuper(LearningComponent);
    function LearningComponent() {
      var _thisSuper, _this;
      babelHelpers.classCallCheck(this, LearningComponent);
      _this = _super.call(this);
      _this.type = "objectives";
      _this.subtitle = null;
      _this.url = null;
      _this.t = _objectSpread(_objectSpread({}, babelHelpers.get((_thisSuper = babelHelpers.assertThisInitialized(_this), babelHelpers.getPrototypeOf(LearningComponent.prototype)), "t", _thisSuper)), {}, {
        readMore: "Read More"
      });
      return _this;
    }

    /**
     * CSS
     */
    babelHelpers.createClass(LearningComponent, [{
      key: "render",
      value:
      /**
       * HTML
       */
      function render() {
        return (0, _litElement.html)(_templateObject_06f90af0e51211edbf9f41986c80248c || (_templateObject_06f90af0e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"header\">\n        <div class=\"icon\">\n          <simple-icon-lite\n            icon=\"", "\"\n          ></simple-icon-lite>\n        </div>\n        <div class=\"title-wrap\">\n          <div class=\"sub-title\">", "</div>\n          <div class=\"title\">", "</div>\n        </div>\n      </div>\n      <div class=\"content\">\n        <slot></slot>\n        ", "\n      </div>\n    "])), iconFromPageType(this.type), this.subtitle, learningComponentTypes[this.type], this.url ? (0, _litElement.html)(_templateObject2_06f90af0e51211edbf9f41986c80248c || (_templateObject2_06f90af0e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral([" <div class=\"urlbutton\">\n              <a\n                href=\"", "\"\n                id=\"url\"\n                target=\"_blank\"\n                rel=\"nofollow noopener\"\n              >\n                <simple-icon-button-lite\n                  icon=\"icons:add-circle-outline\"\n                  label=\"", "\"\n                ></simple-icon-button-lite>\n              </a>\n              <simple-tooltip for=\"url\" animation-delay=\"0\"\n                >", "</simple-tooltip\n              >\n            </div>"])), this.url, this.t.readMore, this.t.readMore) : "");
      }

      // Implement HAX Wiring
    }], [{
      key: "tag",
      get:
      /**
       * Convention we use
       */
      function get() {
        return "learning-component";
      }

      /**
       * Properties
       */
    }, {
      key: "properties",
      get: function get() {
        return {
          type: {
            type: String,
            reflect: true
          },
          subtitle: {
            type: String
          },
          url: {
            type: String
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        var typeToColors = Object.keys(learningComponentColors).map(function (type) {
          var color = learningComponentColors[type];
          return "\n        :host([type=\"".concat(type, "\"]) .header {\n          --header-objectives-bg-color: var(--header-").concat(type, "-bg-color, var(--simple-colors-default-theme-").concat(color, "-8));\n        }\n        :host([type=\"").concat(type, "\"]) simple-icon-button-lite {\n          --simple-icon-color: var(--svg-url-").concat(type, "-fill-color, var(--simple-colors-default-theme-").concat(color, "-8));\n        }\n      ");
        });
        return [(0, _litElement.css)(_templateObject3_06f90af0e51211edbf9f41986c80248c || (_templateObject3_06f90af0e51211edbf9f41986c80248c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          font-family: \"Open Sans\", sans-serif;\n          border: 1px solid var(--card-border-color, #d9d9d9);\n          margin: 15px 0 15px;\n        }\n\n        ", "\n\n        .header {\n          display: flex;\n          align-items: center;\n          background-color: var(\n            --header-objectives-bg-color,\n            var(--simple-colors-default-theme-orange-7, #dc7927)\n          );\n          padding: 10px;\n          color: var(\n            --header-font-color,\n            var(--simple-colors-default-theme-grey-1, #fff)\n          );\n        }\n        .title {\n          margin: 0;\n          padding: 0;\n          font-weight: 600;\n          text-transform: uppercase;\n        }\n        .sub-title {\n          font-weight: 300;\n          text-transform: uppercase;\n        }\n        .icon {\n          display: flex;\n        }\n        .urlbutton {\n          margin: 25px 0 0 0;\n        }\n        .urlbutton a {\n          display: flex;\n          align-items: center;\n          text-decoration: none;\n          color: #000;\n        }\n        simple-icon-lite,\n        simple-icon-button-lite {\n          fill: var(\n            --header-svg-fill-color,\n            var(--simple-colors-default-theme-grey-1, #fff)\n          );\n          border-radius: 50%;\n          margin: 0 15px 0 10px;\n          padding: 5px;\n        }\n\n        @media screen and (min-width: 320px) {\n          .content {\n            padding: 25px 30px;\n          }\n          .title {\n            font-size: 18px;\n          }\n          .sub-title {\n            font-size: 14px;\n          }\n          .urlbutton {\n            display: flex;\n            justify-content: center;\n          }\n          simple-icon-lite {\n            --simple-icon-width: 24px;\n            --simple-icon-height: 24px;\n            height: 35px;\n            width: 35px;\n            border: 2px solid\n              var(\n                --header-svg-border-color,\n                var(--simple-colors-default-theme-grey-1, #fff)\n              );\n          }\n        }\n\n        @media screen and (min-width: 920px) {\n          .content {\n            padding: 25px 90px;\n          }\n          .title {\n            font-size: 28px;\n          }\n          .sub-title {\n            font-size: 24px;\n          }\n          .urlbutton {\n            display: flex;\n            justify-content: end;\n          }\n          simple-icon-lite,\n          simple-icon-button-lite {\n            --simple-icon-width: 36px;\n            --simple-icon-height: 36px;\n            height: 50px;\n            width: 50px;\n          }\n        }\n      "])), (0, _litElement.unsafeCSS)(typeToColors.join("\n")))];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          type: "grid",
          canScale: true,
          canPosition: false,
          canEditSource: true,
          gizmo: {
            title: "Learning Component",
            description: "A card for instructors to communicate pedagogy and instructional strategies.",
            icon: "icons:bookmark",
            color: "orange",
            tags: ["Instructional", "content", "design", "presentation"],
            handles: [],
            meta: {
              author: "HAXTheWeb core team"
            }
          },
          settings: {
            configure: [{
              property: "type",
              title: "Type",
              description: "The type of card to be used.",
              inputMethod: "select",
              options: learningComponentTypes,
              required: true
            }, {
              property: "subtitle",
              title: "Sub-Title",
              description: "The sub-title of the card.",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "url",
              title: "Link",
              description: "An optional link  for the card (Link not available for Learning Objectives).",
              inputMethod: "url",
              icon: "editor:insert-link"
            }, {
              slot: "",
              title: "Contents"
            }],
            advanced: []
          },
          demoSchema: [{
            tag: "learning-component",
            properties: {
              type: "objectives",
              subtitle: "Unit 1"
            },
            content: "<p>By the end of this lesson, you should be able to...</p>"
          }]
        };
      }
    }]);
    return LearningComponent;
  }((0, _I18NMixin2.I18NMixin)(_litElement.LitElement));
  _exports.LearningComponent = LearningComponent;
  customElements.define(LearningComponent.tag, LearningComponent);
});