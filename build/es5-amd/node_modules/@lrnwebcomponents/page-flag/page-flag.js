define(["exports", "meta", "../../lit/index.js", "../simple-colors/simple-colors.js", "../absolute-position-behavior/absolute-position-behavior.js", "./lib/page-flag-comment.js"], function (_exports, meta, _index, _simpleColors, _absolutePositionBehavior, _pageFlagComment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.pageFlagManagerEl = _exports.pageFlagManager = _exports.PageFlag = void 0;
  meta = _interopRequireWildcard(meta);
  var _templateObject_e7a06bf0e46a11edbf2e2349c355f24c, _templateObject2_e7a06bf0e46a11edbf2e2349c355f24c;
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  /**
   * `page-flag`
   * `visual flag for notes about a piece of content`
   * @demo demo/index.html
   * @element page-flag
   */
  var PageFlag = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(PageFlag, _SimpleColors);
    var _super = _createSuper(PageFlag);
    /**
     * HTMLElement
     */
    function PageFlag() {
      var _this;
      babelHelpers.classCallCheck(this, PageFlag);
      _this = _super.call(this);
      _this.label = "note";
      _this.opened = false;
      _this.accentColor = "cyan";
      _this.show = false;
      _this._haxState = false;
      return _this;
    }
    babelHelpers.createClass(PageFlag, [{
      key: "toggleOpen",
      value: function toggleOpen(e) {
        var _this2 = this;
        this.opened = !this.opened;
        this.dark = this.opened;
        this.querySelectorAll("page-flag-comment").forEach(function (comment) {
          comment.testCanUpdate(pageFlagManager.activeUser);
          comment.readOnly = !_this2._haxState;
        });
      }
      /**
       * LitElement render callback
       */
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_e7a06bf0e46a11edbf2e2349c355f24c || (_templateObject_e7a06bf0e46a11edbf2e2349c355f24c = babelHelpers.taggedTemplateLiteral([" <button class=\"arrow\" @click=\"", "\">\n        ", "\n      </button>\n      <absolute-position-behavior\n        justify\n        position=\"bottom\"\n        allow-overlap\n        auto\n        ?hidden=\"", "\"\n      >\n        <div\n          @page-flag-comment-edit=\"", "\"\n          @page-flag-comment-delete=\"", "\"\n          @page-flag-comment-reply=\"", "\"\n        >\n          <slot></slot>\n        </div>\n      </absolute-position-behavior>"])), this.toggleOpen, this.label, !this.opened, this.handleEdit, this.handleDelete, this.handleReply);
      }
    }, {
      key: "handleEdit",
      value: function handleEdit(e) {
        e.detail.editMode = !e.detail.editMode;
      }
    }, {
      key: "handleDelete",
      value: function handleDelete(e) {
        e.detail.remove();
        if (this.querySelectorAll("page-flag-comment").length === 0) {
          this.remove();
        }
      }
    }, {
      key: "handleReply",
      value: function handleReply(e) {
        var comment = document.createElement("page-flag-comment");
        comment.seed = pageFlagManager.activeUser;
        comment.timestamp = Date.now() / 1000;
        comment.canEdit = true;
        comment.readOnly = false;
        comment.reply = e.detail.reply + 1 < 2 ? e.detail.reply + 1 : 2;
        e.detail.insertAdjacentElement("afterend", comment);
        setTimeout(function () {
          comment.editMode = true;
        }, 0);
      }
      /**
       * Convention we use
       */
    }, {
      key: "haxeditModeChanged",
      value:
      /**
       * ensure that when we flip states here that we are actively switching the original level var
       */
      function haxeditModeChanged(value) {
        this.show = value;
        this._haxState = value;
      }
      /**
       * haxHooks
       */
    }, {
      key: "haxHooks",
      value: function haxHooks() {
        return {
          editModeChanged: "haxeditModeChanged",
          inlineContextMenu: "haxinlineContextMenu"
        };
      }
      /**
       * add buttons when it is in context
       */
    }, {
      key: "haxinlineContextMenu",
      value: function haxinlineContextMenu(ceMenu) {
        ceMenu.ceButtons = [{
          icon: "lrn:discuss",
          callback: "haxResolveThread",
          label: "Resolve thread"
        }];
      }
    }, {
      key: "haxResolveThread",
      value: function haxResolveThread(e) {
        this.remove();
        return true;
      }
      /**
       * LitElement ready
       */
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(PageFlag.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(PageFlag.prototype), "firstUpdated", this).call(this, changedProperties);
        }
        pageFlagManager.allFlags.push(this);
        if (pageFlagManager.activeUser) {
          this.show = true;
        } else {
          this.remove();
        }
        // arrow node for pointing to w/ the tooltip container
        this.shadowRoot.querySelector("absolute-position-behavior").target = this.shadowRoot.querySelector(".arrow");
        // ensure we have content, if not let's add a boilerplate one to get writing
        if (!this.querySelector("page-flag-comment")) {
          var comment = document.createElement("page-flag-comment");
          comment.seed = pageFlagManager.activeUser;
          comment.timestamp = Date.now() / 1000;
          comment.canEdit = true;
          comment.readOnly = false;
          this.appendChild(comment);
          setTimeout(function () {
            comment.editMode = true;
          }, 100);
        }
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(PageFlag), "properties", this)), {}, {
          /**
           * Label for the flag
           */
          label: {
            type: String
          },
          /**
           * Opened state
           */
          opened: {
            type: Boolean,
            reflect: true
          },
          show: {
            type: Boolean,
            reflect: true
          }
        });
      }
      /**
       * LitElement style callback
       */
    }, {
      key: "styles",
      get: function get() {
        // support for using in other classes
        var styles = [];
        if (babelHelpers.get(babelHelpers.getPrototypeOf(PageFlag), "styles", this)) {
          styles = babelHelpers.get(babelHelpers.getPrototypeOf(PageFlag), "styles", this);
        }
        return [].concat(babelHelpers.toConsumableArray(styles), [(0, _index.css)(_templateObject2_e7a06bf0e46a11edbf2e2349c355f24c || (_templateObject2_e7a06bf0e46a11edbf2e2349c355f24c = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: none;\n          float: right;\n          margin-right: -80px;\n        }\n        :host([show]) {\n          display: block;\n        }\n        .arrow {\n          border: 3px solid var(--simple-colors-default-theme-accent-4, #97d4e8);\n          border-radius: 4px;\n          background: var(--simple-colors-default-theme-accent-1, #c8e7f1);\n          color: var(--simple-colors-default-theme-accent-8, #2d7187);\n          padding: 8px;\n          text-align: center;\n          max-width: 100px;\n          font-size: 11px;\n          font-weight: bold;\n          position: relative;\n          cursor: pointer;\n        }\n\n        .arrow::after,\n        .arrow::before {\n          border: solid transparent;\n          content: \" \";\n          display: block;\n          height: 0;\n          position: absolute;\n          pointer-events: none;\n          width: 0;\n          right: 100%;\n        }\n        .arrow::before {\n          border-color: rgba(255, 255, 255, 0);\n          border-right-color: var(\n            --simple-colors-default-theme-accent-4,\n            #97d4e8\n          );\n          top: 50%;\n          margin-top: -14px;\n          border-width: 14px;\n        }\n        .arrow::after {\n          border-color: rgba(255, 255, 255, 0);\n          border-right-color: var(\n            --simple-colors-default-theme-accent-1,\n            #c8e7f1\n          );\n          top: 50%;\n          margin-top: -10px;\n          border-width: 10px;\n        }\n        absolute-position-behavior {\n          z-index: var(--simple-modal-z-index, 1000);\n          min-width: 280px;\n        }\n        absolute-position-behavior div {\n          color: black;\n          background-color: white;\n          font-size: 12px;\n          width: 300px;\n          margin-left: 160px;\n          padding-top: 8px;\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "page-flag";
      }
      /**
       * haxProperties integration via file reference
       */
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./lib/".concat(this.tag, ".haxProperties.json"), meta.url).href;
      }
    }]);
    return PageFlag;
  }(_simpleColors.SimpleColors);
  _exports.PageFlag = PageFlag;
  customElements.define(PageFlag.tag, PageFlag);
  var pageFlagManagerEl = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(pageFlagManagerEl, _HTMLElement);
    var _super2 = _createSuper(pageFlagManagerEl);
    function pageFlagManagerEl() {
      var _this3;
      babelHelpers.classCallCheck(this, pageFlagManagerEl);
      _this3 = _super2.call(this);
      _this3.activeUser = null;
      _this3.allFlags = [];
      return _this3;
    }
    babelHelpers.createClass(pageFlagManagerEl, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        window.addEventListener("haxcms-user-data-updated", this.userDataUpdated.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("haxcms-user-data-updated", this.userDataUpdated.bind(this));
      }
    }, {
      key: "userDataUpdated",
      value: function userDataUpdated(e) {
        this.activeUser = e.detail.userName;
        // ensure visibility of all flags
        this.allFlags.forEach(function (flag) {
          flag.show = true;
        });
      }
    }], [{
      key: "tag",
      get: function get() {
        return "page-flag-manager";
      }
    }]);
    return pageFlagManagerEl;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));
  _exports.pageFlagManagerEl = pageFlagManagerEl;
  customElements.define(pageFlagManagerEl.tag, pageFlagManagerEl);

  // register globally so we can make sure there is only one
  window.pageFlagManager = window.pageFlagManager || {};
  window.pageFlagManager.requestAvailability = function () {
    if (!window.pageFlagManager.instance) {
      window.pageFlagManager.instance = document.createElement(pageFlagManagerEl.tag);
      document.body.appendChild(window.pageFlagManager.instance);
    }
    return window.pageFlagManager.instance;
  };
  // most common way to access registry
  var pageFlagManager = window.pageFlagManager.requestAvailability();
  _exports.pageFlagManager = pageFlagManager;
});