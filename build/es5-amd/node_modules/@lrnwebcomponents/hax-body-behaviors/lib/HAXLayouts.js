define(["exports", "../../../lit-element/lit-element.js", "../../utils/utils.js"], function (_exports, _litElement, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxLayoutBehaviors = void 0;

  function _templateObject_84f572a091ad11eb950c05786044fa93() {
    var data = babelHelpers.taggedTemplateLiteral(["\n          :host {\n            display: block;\n          }\n          :host([ready]) .container {\n            transition: var(\n              --hax-layout-container-transition,\n              0.5s width ease-in-out,\n              0.5s padding ease-in-out,\n              0.5s margin ease-in-out\n            );\n          }\n          .container.active {\n            outline: var(--hax-layout-active-outline-width, 2px)\n              var(--hax-layout-active-outline-style, solid)\n              var(\n                --hax-layout-active-outline-color,\n                var(--hax-layout-accent-color, #009dc7)\n              ) !important;\n            outline-offset: var(--hax-layout-active-outline-offset, -2px);\n          }\n          .container.not-shown {\n            display: none;\n            outline: none;\n          }\n          :host([data-hax-ray]) .container.not-shown {\n            display: block;\n            opacity: 0.4;\n            width: 0;\n          }\n          :host([data-hax-ray]) .container.not-shown.has-nodes {\n            width: 100%;\n            transition: none;\n          }\n          :host([data-hax-ray]) .not-shown:hover {\n            opacity: 1;\n          }\n          :host([data-hax-ray]) .not-shown:hover::before {\n            content: \"Hidden by layout\";\n            position: sticky;\n            display: inline-flex;\n            background-color: black;\n            color: white;\n            padding: 0px 8px;\n            font-size: 12px;\n            line-height: 16px;\n            margin: 12px 13px;\n            float: right;\n            width: 124px;\n          }\n          /** this implies hax editing state is available **/\n          :host([data-hax-ray]) ::slotted(*) {\n            outline: var(--hax-layout-slotted-outline-width, 1px)\n              var(--hax-layout-slotted-outline-style, solid)\n              var(\n                --hax-layout-slotted-outline-color,\n                var(--hax-layout-slotted-faded-color, #eeeeee)\n              );\n            outline-offset: var(--hax-layout-slotted-outline-offset, -2px);\n          }\n          :host([data-hax-ray])\n            ::slotted([contenteditable][data-hax-ray]:empty)::before {\n            content: attr(data-hax-ray);\n            opacity: 0.2;\n            transition: 0.2s all ease-in-out;\n          }\n          :host([data-hax-ray]) ::slotted(*:hover) {\n            outline: var(--hax-layout-slotted-hover-outline-width, 1px)\n              var(--hax-layout-slotted-hover-outline-style, solid)\n              var(\n                --hax-layout-slotted-hover-outline-color,\n                var(--hax-layout-slotted-faded-color, #eeeeee)\n              );\n          }\n          :host([data-hax-ray]) .container {\n            outline: var(--hax-layout-container-outline-width, 1px)\n              var(--hax-layout-container-outline-style, solid)\n              var(\n                --hax-layout-container-outline-color,\n                var(--hax-layout-slotted-faded-color, #eeeeee)\n              );\n            outline-offset: var(--hax-layout-container-outline-offset, -2px);\n          }\n          :host([data-hax-ray]) .container:hover {\n            outline: var(--hax-layout-container-hover-outline-width, 1px)\n              var(--hax-layout-container-hover-outline-style, solid)\n              var(\n                --hax-layout-container-hover-outline-color,\n                var(--hax-layout-slotted-faded-color, #eeeeee)\n              );\n          }\n          :host([data-hax-ray]) ::slotted(*.active)::before {\n            outline: var(--hax-layout-slotted-active-outline-width, 1px)\n              var(--hax-layout-slotted-active-outline-style, solid)\n              var(\n                --hax-layout-slotted-active-outline-color,\n                var(--hax-layout-slotted-faded-color, #eeeeee)\n              );\n            background-color: inherit;\n            content: \" \";\n            width: 100%;\n            display: block;\n            position: relative;\n            margin: -10px 0 0 0;\n            z-index: 2;\n            height: 10px;\n          }\n          :host([data-hax-ray]) ::slotted(img.active),\n          :host([data-hax-ray]) ::slotted(*.active)::before {\n            background-color: var(\n              --hax-layout-slotted-active-outline-color,\n              var(--hax-layout-accent-color, #009dc7)\n            ) !important;\n            outline: var(--hax-layout-slotted-active-outline-width, 1px)\n              var(--hax-layout-slotted-active-outline-style, solid)\n              var(\n                --hax-layout-slotted-active-outline-color,\n                var(--hax-layout-accent-color, #009dc7)\n              );\n          }\n\n          @media screen and (min-color-index: 0) and(-webkit-min-device-pixel-ratio:0) {\n            :host([data-hax-ray]) ::slotted(*.active) {\n              background-color: var(\n                --hax-layout-slotted-active-outline-color,\n                var(--hax-layout-accent-color, #009dc7)\n              ) !important;\n              outline: var(--hax-layout-slotted-active-outline-width, 1px)\n                var(--hax-layout-slotted-active-outline-style, solid)\n                var(\n                  --hax-layout-slotted-active-outline-color,\n                  var(--hax-layout-accent-color, #009dc7)\n                );\n            }\n          }\n        "]);

    _templateObject_84f572a091ad11eb950c05786044fa93 = function _templateObject_84f572a091ad11eb950c05786044fa93() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  var HaxLayoutBehaviors = function HaxLayoutBehaviors(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      babelHelpers.createClass(_class, null, [{
        key: "styles",
        get: function get() {
          return [(0, _litElement.css)(_templateObject_84f572a091ad11eb950c05786044fa93())];
        }
      }]);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        _this.ready = false;
        _this.haxLayoutContainer = true;
        return _this;
      }
      /**
       * life cycle
       */


      babelHelpers.createClass(_class, [{
        key: "firstUpdated",
        value: function firstUpdated(changedProperties) {
          var _this2 = this;

          setTimeout(function () {
            _this2.ready = true;
          }, 100);
        }
      }, {
        key: "updated",
        value: function updated(changedProperties) {
          var _this3 = this;

          changedProperties.forEach(function (oldValue, propName) {
            if (propName === "dataHaxRay" && _this3.shadowRoot) {
              if (_this3[propName]) {
                // apply handlers to the columns themselves
                _this3.addEventListener("drop", _this3._dropEvent.bind(_this3));

                var containers = babelHelpers.toConsumableArray(_this3.shadowRoot.querySelectorAll("drag-enabled")),
                    slots = babelHelpers.toConsumableArray(_this3.shadowRoot.querySelectorAll("slot"));
                containers.forEach(function (container) {
                  container.addEventListener("dragenter", _this3._dragEnter.bind(_this3));
                  container.addEventListener("dragleave", _this3._dragLeave.bind(_this3));
                });
                slots.forEach(function (slot) {
                  return slot.addEventListener("slotchange", _this3._slotMonitor.bind(_this3));
                });
                _this3.observer = new MutationObserver(function (mutations) {
                  if (!_this3.__sorting) {
                    mutations.forEach(function (mutation) {
                      // this implies something was added dynamically or drag and drop
                      // from outside this element or dragging between grid plates
                      // so we need to disconnect the handlers from here and pick them
                      // up in the new plate
                      mutation.addedNodes.forEach(function (node) {
                        if (node.tagName && node !== _this3) {
                          // verify this has a slot set otherwise we need to set one on the fly
                          // otherwise this won't show up. This could be incorrectly formed HTML
                          // DOM that was pushed in via an outside system or edge cases of things
                          // dropping in without a slot set in anyway
                          // validate slot name, otherwise force it to col-1
                          if (node.parentElement && node.parentElement.tagName !== "HAX-BODY" && !_this3.validateElementSlot(node) && _this3.validElementSlots().length > 0) {
                            node.setAttribute("slot", _this3.validElementSlots()[0]);
                          }
                        }
                      });
                    });

                    _this3.__sortChildren();
                  }
                });

                _this3.observer.observe(_this3, {
                  childList: true
                });
              } else {
                if (_this3.observer) {
                  _this3.observer.disconnect();
                }

                _this3.removeEventListener("drop", _this3._dropEvent.bind(_this3));

                var _containers = babelHelpers.toConsumableArray(_this3.shadowRoot.querySelectorAll("drag-enabled")),
                    _slots = babelHelpers.toConsumableArray(_this3.shadowRoot.querySelectorAll("slot"));

                _containers.forEach(function (container) {
                  container.removeEventListener("dragenter", _this3._dragEnter.bind(_this3));
                  container.removeEventListener("dragleave", _this3._dragLeave.bind(_this3));
                });

                _slots.forEach(function (slot) {
                  return slot.removeEventListener("slotchange", _this3._slotMonitor.bind(_this3));
                });
              }
            } // if any of these changed, update col widths


            if (["responsiveSize", "layout", "layouts", "disableResponsive"].includes(propName)) {
              clearTimeout(_this3.__calcWidthLock);
              _this3.__calcWidthLock = setTimeout(function () {
                _this3.__columnWidths = _this3._getColumnWidths(_this3.responsiveSize, _this3.layout, _this3.layouts, _this3.disableResponsive);
              }, 0);
            }

            switch (propName) {
              // observer, ensure we are sized correctly after widths change
              case "__columnWidths":
                // widths changed because of layout somehow, wait for the resize transition
                // to have processed, then fire a resize event which we are listening
                _this3.resize();

                break;

              case "disableResponsive":
                // fire an event that this is a core piece of the system
                _this3.dispatchEvent(new CustomEvent("disable-responsive-changed", {
                  detail: _this3[propName]
                }));

                break;
            }
          });
        }
      }, {
        key: "_dragEnter",
        value: function _dragEnter(e) {
          console.log(e.target);
          e.target.classList.add("active");
        }
      }, {
        key: "_dragLeave",
        value: function _dragLeave(e) {
          e.target.classList.remove("active");
        }
      }, {
        key: "_dropEvent",
        value: function _dropEvent(e) {
          this.querySelectorAll(".active").forEach(function (el) {
            el.classList.remove("active");
          });
          this.shadowRoot.querySelectorAll(".active").forEach(function (el) {
            el.classList.remove("active");
          });
        }
      }, {
        key: "_getSlotOrder",
        value: function _getSlotOrder(item) {
          var slot = item.getAttribute("slot"),
              container = this.shadowRoot.querySelector("[slot=".concat(slot, "]")),
              order = parseInt(container.getAttribute("data-move-order") || -1);
          return order;
        }
        /**
         * Use slot events to track which slots have nodes and apply to the shadowRoot
         * column wrappers. This helps with trasitions and animations
         */

      }, {
        key: "_slotMonitor",
        value: function _slotMonitor(e) {
          // sanity, we have a local slot
          var eventPath = (0, _utils.normalizeEventPath)(e);

          if (eventPath[0] && eventPath[0].assignedNodes && eventPath[0].assignedNodes().length) {
            // has nodes so we can make sure to track this elsewhere
            eventPath[0].parentNode.classList.add("has-nodes");
          } else {
            eventPath[0].parentNode.classList.remove("has-nodes");
          }
        }
        /**
         * Determines if the item can move a set number of slots.
         *
         * @param {object} the item
         * @param {number} -1 for left or +1 for right
         * @returns {boolean} if the item can move a set number of slots
         */

      }, {
        key: "canMoveSlot",
        value: function canMoveSlot(item, before) {
          var dir = before ? -1 : 1,
              order = this.this._getSlotOrder(item),
              containers = babelHelpers.toConsumableArray(this.shadowRoot.querySelectorAll(".container")).map(function (container) {
            return parseInt(container.getAttribute("data-move-order") || -1);
          }).sort(function (a, b) {
            return a - b;
          }),
              dest = order[1] + dir;

          return dest >= containers[0] && dest <= containers[containers.length - 1];
        }
        /**
         * Moves an item a set number of slots.
         *
         * @param {object} the item
         * @param {number} -1 for left or +1 for right
         */

      }, {
        key: "moveSlot",
        value: function moveSlot(item, before) {
          var dir = before ? -1 : 1,
              order = this.this._getSlotOrder(item),
              dest = order[1] + dir,
              container = this.shadowRoot.querySelector("[data-move-order=".concat(dest, "]")),
              slot = container.getAttribute("data-slot-name");

          item.setAttribute("slot", slot);
        }
        /**
         * Validate the slot name
         */

      }, {
        key: "validateElementSlot",
        value: function validateElementSlot(node) {
          return this.validElementSlots().includes(node.getAttribute("slot"));
        }
      }, {
        key: "validElementSlots",
        value: function validElementSlots() {
          return this.shadowRoot ? babelHelpers.toConsumableArray(this.shadowRoot.querySelectorAll(".container")).map(function (container) {
            return container.getAttribute("data-slot-name");
          }) : [];
        }
        /**
         * Sort children based on slot order
         */

      }, {
        key: "__sortChildren",
        value: function () {
          var _sortChildren = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            var _this4 = this;

            var children;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    this.__sorting = true;
                    _context.prev = 1;
                    // select all direct children w/ a slot attribute and convert to an Array
                    children = Array.prototype.reduce.call(this.querySelectorAll("[slot]"), function (acc, e) {
                      return acc;
                    }, []); // sort the children by slot id being low to high

                    children = children.sort(function (a, b) {
                      if (this._getSlotOrder(a) < this._getSlotOrder(b)) {
                        return -1;
                      }

                      return 1;
                    }); // loop through and append these back into the grid plate.
                    // which will put them in the right order

                    _context.next = 6;
                    return children.forEach(function (el) {
                      // sanity check that we only move things that are a direct child
                      if (el.parentNode === _this4) {
                        _this4.appendChild(el);
                      }
                    });

                  case 6:
                    _context.next = 11;
                    break;

                  case 8:
                    _context.prev = 8;
                    _context.t0 = _context["catch"](1);
                    console.warn(_context.t0);

                  case 11:
                    this.__sorting = false;

                  case 12:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[1, 8]]);
          }));

          function __sortChildren() {
            return _sortChildren.apply(this, arguments);
          }

          return __sortChildren;
        }()
      }], [{
        key: "properties",
        get: function get() {
          return {
            ready: {
              type: Boolean,
              reflect: true
            },
            dataHaxRay: {
              type: String,
              reflect: true,
              attribute: "data-hax-ray"
            },
            haxLayoutContainer: {
              type: Boolean,
              reflect: true,
              attribute: "hax-layout-container"
            }
          };
        }
      }]);
      return _class;
    }(SuperClass);
  };

  _exports.HaxLayoutBehaviors = HaxLayoutBehaviors;
});