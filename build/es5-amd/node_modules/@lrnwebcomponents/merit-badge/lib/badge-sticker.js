define(["exports", "../../../lit/index.js", "../../simple-icon/simple-icon.js", "../../simple-icon/lib/simple-icons.js", "../../simple-icon/lib/simple-icon-button.js", "../../absolute-position-behavior/absolute-position-behavior.js", "../../simple-colors/simple-colors.js", "./date-title.js", "./locked-badge.js"], function (_exports, _index, _simpleIcon, _simpleIcons, _simpleIconButton, _absolutePositionBehavior, _simpleColors, _dateTitle, _lockedBadge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.BadgeSticker = void 0;
  var _templateObject_2ac17960edcb11edb3e3ed4f0d506a4b, _templateObject2_2ac17960edcb11edb3e3ed4f0d506a4b, _templateObject3_2ac17960edcb11edb3e3ed4f0d506a4b;
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }
  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
  /**
   * `badge-sticker`
   * `visual badge to communicate obtaining a skill`
   * @demo demo/index.html
   * @element merit-badge
   */
  var BadgeSticker = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(BadgeSticker, _SimpleColors);
    var _super = _createSuper(BadgeSticker);
    /**
     * HTMLElement
     */
    function BadgeSticker() {
      var _this;
      babelHelpers.classCallCheck(this, BadgeSticker);
      _this = _super.call(this);
      var currentDate = new Date();
      _this.badgeDate = currentDate.toLocaleDateString();
      _this.badgeImage = "";
      _this.badgeTitle = "";
      _this.badgeDetails = "";
      _this.hyperLink = "";
      _this.badgeSkills = "";
      _this.skillsOpened = false;
      _this.detailsOpened = false;
      _this.skillsArray = [];
      _this.badgeColor = "";
      return _this;
    }
    /**
     * LitElement style callback
     */
    babelHelpers.createClass(BadgeSticker, [{
      key: "render",
      value:
      /**
       * LitElement render callback
       */
      function render() {
        return (0, _index.html)(_templateObject_2ac17960edcb11edb3e3ed4f0d506a4b || (_templateObject_2ac17960edcb11edb3e3ed4f0d506a4b = babelHelpers.taggedTemplateLiteral(["\n  <div class=\"badge\" style=\"--badge-color: ", "\">\n    <date-title class=\"date-title\" title=\"", "\" date=\"", "\"></date-title>\n\n    <img class=\"badgepic\" src=\"", "\" alt=\"image\">\n\n    <div class=\"details\">\n      <div class=\"button\" @click=\"", "\">\n        <i class=\"fas fa-info-circle\"></i> \n        <img class=\"detailsicon\" src=\"https://www.iconpacks.net/icons/1/free-information-icon-348-thumb.png\"\n        alt=\"linkicons\" height= 20px width= 20px >\n    </div>\n  </div>\n    <div class=\"verificationlink\">\n      <a href=\"", "\" target=\"_blank\">\n      <img class=\"linkicon\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Chain_link_icon_slanted.png/800px-Chain_link_icon_slanted.png\" alt=\"detailsicons\"\n        height= 20px width= 20px>\n      </a>\n    </div>\n  </div>\n  <absolute-position-behavior\n    class=\"popover\"\n    justify\n    position=\"bottom\"\n    allow-overlap\n    sticky\n    auto\n    .target=\"", "\"\n    ?hidden=\"", "\"\n  >\n    <h3>Details</h3>\n    <p>", "</p>\n    <h3>Skills</h3>\n    ", "\n  </absolute-position-behavior>\n"])), this.badgeColor, this.badgeTitle, this.badgeDate, this.badgeImage, this.skillClick, this.hyperLink, this.activeNode, !this.skillsOpened, this.badgeDetails, this.skillsArray.map(function (item) {
          return (0, _index.html)(_templateObject2_2ac17960edcb11edb3e3ed4f0d506a4b || (_templateObject2_2ac17960edcb11edb3e3ed4f0d506a4b = babelHelpers.taggedTemplateLiteral(["\n    <ul>\n      <li>", "</li>\n    </ul>\n    "])), item);
        }));
      }
      /**
       * Convention we use
       */
    }, {
      key: "firstUpdated",
      value:
      /**
       * LitElement ready
       */
      function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(BadgeSticker.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(BadgeSticker.prototype), "firstUpdated", this).call(this, changedProperties);
        }
        this.activeNode = this.shadowRoot.querySelector(".badge");
        this.skillsArray = this.badgeSkills.split(",");
      }
    }, {
      key: "skillClick",
      value: function skillClick(e) {
        this.skillsOpened = !this.skillsOpened;
      }
    }], [{
      key: "styles",
      get: function get() {
        // support for using in other classes
        var styles = [];
        if (babelHelpers.get(babelHelpers.getPrototypeOf(BadgeSticker), "styles", this)) {
          styles = babelHelpers.get(babelHelpers.getPrototypeOf(BadgeSticker), "styles", this);
        }
        return [].concat(babelHelpers.toConsumableArray(styles), [(0, _index.css)(_templateObject3_2ac17960edcb11edb3e3ed4f0d506a4b || (_templateObject3_2ac17960edcb11edb3e3ed4f0d506a4b = babelHelpers.taggedTemplateLiteral(["\n  :host {\n    display: block;\n  }\n  .badge {\n    color: white;\n    margin: 20px;\n    width: 200px;\n    height: 200px;\n    border-radius: 50%\n    padding: 20px;\n    background: var(--badge-color, var(--simple-colors-default-theme));\n    font-size: 21px;\n    font-weight: bold;\n    line-height: 1.3em;\n    border: 2px dashed #fff;\n    border-radius: 50%;\n    box-shadow: 0 0 0 4px var(--badge-color, var(--simple-colors-default-theme)), 3px 1.5px 9px 6px var(--simple-colors-default-theme-grey-9);\n    font-weight: normal;\n    position: relative;    \n    font-family: \"Monaco\";\n  }\n\n  .badgeImage {\n    width: 75px;\n    height: 75px;\n    position: absolute;\n    top: -24%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  .date-title {\n    color: white;\n    position: absolute;\n    top: -24%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  .badgepic {\n    max-width: 75px;\n    max-height: 75px;\n    position: absolute;\n    top: 32%;\n    left: 32%;\n  }\n\n  .linkicon {\n    position: absolute;\n    top: 32%;\n    left: 12%;\n  }\n  .detailsicon {\n    position: absolute;\n    top: 32%;\n    left: 82%;\n  }\n  .button {\n    position: absolute;\n    top: 33%;\n    left: 82%;\n    cursor: pointer;\n  }\n  .button i {\n    margin-right: 8px;\n  }\n  .popover {\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 200px;\n    padding: 10px;\n    background-color: lightgray;\n    border: 1px solid black;\n    border-radius: 4px;\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);\n    color: black;\n    text-shadow: none;\n    font-size: 15px;\n    font-family: \"Monaco\";\n    box-shadow: rgba(0, 0, 0, 0.2) 0px 60px 40px -7px;\n    border-radius: 15px;\n  }\n"])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(BadgeSticker), "properties", this)), {}, {
          badgeDate: {
            type: String
          },
          badgeImage: {
            type: String
          },
          badgeTitle: {
            type: String
          },
          badgeDetails: {
            type: String
          },
          hyperLink: {
            type: String
          },
          badgeSkills: {
            type: String
          },
          skillsOpened: {
            type: Boolean
          },
          detailsOpened: {
            type: Boolean
          },
          badgeColor: {
            type: String
          }
        });
      }
    }, {
      key: "tag",
      get: function get() {
        return "badge-sticker";
      }
    }]);
    return BadgeSticker;
  }(_simpleColors.SimpleColors);
  _exports.BadgeSticker = BadgeSticker;
  customElements.define(BadgeSticker.tag, BadgeSticker);
});