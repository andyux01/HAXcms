define(["exports", "../../../lit-element/lit-element.js", "../../a11y-menu-button/lib/a11y-menu-button-item.js"], function (_exports, _litElement, _a11yMenuButtonItem) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleToolbarMenuItem = void 0;

  function _templateObject2_179d1400930211eb82a7a575782a1009() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          --simple-toolbar-button-min-width: 100% !important;\n        }\n        ::slotted(*) {\n          --simple-toolbar-border-radius: 0px;\n          display: flex;\n        }\n      "]);

    _templateObject2_179d1400930211eb82a7a575782a1009 = function _templateObject2_179d1400930211eb82a7a575782a1009() {
      return data;
    };

    return data;
  }

  function _templateObject_179d1400930211eb82a7a575782a1009() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <li role=\"none\">\n        <slot></slot>\n      </li>\n    "]);

    _templateObject_179d1400930211eb82a7a575782a1009 = function _templateObject_179d1400930211eb82a7a575782a1009() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-toolbar-menu`
   * `An icon / button that has support for multiple options via drop down.`
   *
   * @microcopy - the mental model for this element
   * - panel - the flyout from left or right side that has elements that can be placed
   * - button - an item that expresses what interaction you will have with the content.
   *
   * @element simple-toolbar-menu-item
   * @extends A11yMenuButtonItemBehaviors
   */
  var SimpleToolbarMenuItem = /*#__PURE__*/function (_A11yMenuButtonItemBe) {
    babelHelpers.inherits(SimpleToolbarMenuItem, _A11yMenuButtonItemBe);

    var _super = _createSuper(SimpleToolbarMenuItem);

    function SimpleToolbarMenuItem() {
      babelHelpers.classCallCheck(this, SimpleToolbarMenuItem);
      return _super.call(this);
    }

    babelHelpers.createClass(SimpleToolbarMenuItem, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_179d1400930211eb82a7a575782a1009());
      }
    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleToolbarMenuItem), "styles", this)), [(0, _litElement.css)(_templateObject2_179d1400930211eb82a7a575782a1009())]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "simple-toolbar-menu-item";
      }
    }]);
    return SimpleToolbarMenuItem;
  }((0, _a11yMenuButtonItem.A11yMenuButtonItemBehaviors)(_litElement.LitElement));

  _exports.SimpleToolbarMenuItem = SimpleToolbarMenuItem;
  window.customElements.define(SimpleToolbarMenuItem.tag, SimpleToolbarMenuItem);
});