define(["exports", "../../lit-element/lit-element.js", "../simple-colors/simple-colors.js", "./lib/simple-iconset.js"], function (_exports, _litElement, _simpleColors, _simpleIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleIcon = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject3_0b4f610025d711eb84c50318a4e90b0e() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          position: relative;\n          vertical-align: middle;\n          height: var(--simple-icon-height, 24px);\n          width: var(--simple-icon-width, 24px);\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        svg {\n          height: var(--simple-icon-height, 24px);\n          width: var(--simple-icon-width, 24px);\n        }\n        image {\n          height: var(--simple-icon-height, 24px);\n          width: var(--simple-icon-width, 24px);\n        }\n        :host([accent-color=\"white\"]) {\n          --simple-colors-default-theme-accent-8: black;\n        }\n        :host([dark][accent-color=\"white\"]) {\n          --simple-colors-default-theme-accent-8: white;\n        }\n        feFlood {\n          flood-color: var(\n            --simple-icon-color,\n            var(--simple-colors-default-theme-accent-8, #000000)\n          );\n        }\n        svg {\n          pointer-events: none;\n        }\n      "]);

    _templateObject3_0b4f610025d711eb84c50318a4e90b0e = function _templateObject3_0b4f610025d711eb84c50318a4e90b0e() {
      return data;
    };

    return data;
  }

  function _templateObject2_0b4f610025d711eb84c50318a4e90b0e() {
    var data = babelHelpers.taggedTemplateLiteral(["<feFlood result=\"COLOR\" />"]);

    _templateObject2_0b4f610025d711eb84c50318a4e90b0e = function _templateObject2_0b4f610025d711eb84c50318a4e90b0e() {
      return data;
    };

    return data;
  }

  function _templateObject_0b4f610025d711eb84c50318a4e90b0e() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <svg xmlns=\"http://www.w3.org/2000/svg\">\n        <filter\n          color-interpolation-filters=\"sRGB\"\n          x=\"0\"\n          y=\"0\"\n          height=\"100%\"\n          width=\"100%\"\n        >\n          ", "\n          <feComposite operator=\"in\" in=\"COLOR\" in2=\"SourceAlpha\" />\n        </filter>\n        <image\n          xlink:href=\"\"\n          width=\"100%\"\n          height=\"100%\"\n          focusable=\"false\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        ></image>\n      </svg>\n    "]);

    _templateObject_0b4f610025d711eb84c50318a4e90b0e = function _templateObject_0b4f610025d711eb84c50318a4e90b0e() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-icon`
   * `Render an SVG based icon`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @demo demo/index.html
   * @element simple-icon
   */
  var SimpleIcon = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(SimpleIcon, _SimpleColors);

    var _super = _createSuper(SimpleIcon);

    babelHelpers.createClass(SimpleIcon, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.svg)(_templateObject_0b4f610025d711eb84c50318a4e90b0e(), !this.noColorize ? (0, _litElement.svg)(_templateObject2_0b4f610025d711eb84c50318a4e90b0e()) : "");
      } // properties available to the custom element for data binding

    }], [{
      key: "tag",

      /**
       * This is a convention, not the standard
       */
      get: function get() {
        return "simple-icon";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleIcon), "styles", this)), [(0, _litElement.css)(_templateObject3_0b4f610025d711eb84c50318a4e90b0e())]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleIcon), "properties", this)), {}, {
          src: {
            type: String
          },
          noColorize: {
            type: Boolean,
            attribute: "no-colorize"
          },
          icon: {
            type: String,
            reflect: true
          }
        });
      }
    }]);

    function SimpleIcon() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleIcon);
      _this = _super.call(this);
      _this.noColorize = false;
      _this.accentColor = "white";
      return _this;
    }

    babelHelpers.createClass(SimpleIcon, [{
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleIcon.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SimpleIcon.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        var randomId = "f-" + Math.random().toString().slice(2, 10);
        this.shadowRoot.querySelector("image").style.filter = "url(#".concat(randomId, ")");
        this.shadowRoot.querySelector("filter").setAttribute("id", randomId);
      }
      /**
       * Set the src by the icon property
       */

    }, {
      key: "setSrcByIcon",
      value: function setSrcByIcon(context) {
        this.src = _simpleIconset.SimpleIconsetStore.getIcon(this.icon, context);
        return this.src;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleIcon.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SimpleIcon.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "icon") {
            if (_this2[propName]) {
              _this2.setSrcByIcon(_this2);
            } else {
              _this2.src = null;
            }
          }

          if (propName == "src") {
            // look this up in the registry
            if (_this2[propName]) {
              _this2.shadowRoot.querySelector("image").setAttribute("xlink:href", "".concat(_this2[propName]));
            }
          }
        });
      }
    }]);
    return SimpleIcon;
  }(_simpleColors.SimpleColors);

  _exports.SimpleIcon = SimpleIcon;
  customElements.define(SimpleIcon.tag, SimpleIcon);
});