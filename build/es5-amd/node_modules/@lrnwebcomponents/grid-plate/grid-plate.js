define(["exports", "../../lit-element/lit-element.js", "../responsive-utility/responsive-utility.js", "../hax-body-behaviors/lib/HAXLayouts.js"], function (_exports, _litElement, _responsiveUtility, _HAXLayouts) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GridPlate = void 0;

  function _templateObject3_ecdabcc090c411ebad41f72aa2c8c806() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            <div\n              class=\"column container ", "\"\n              id=\"col", "\"\n              data-label=\"column ", "\"\n              data-move-order=\"", "\"\n              data-slot-name=\"col-", "\"\n              .style=\"", "\"\n            >\n              <slot name=\"col-", "\"></slot>\n            </div>\n          "]);

    _templateObject3_ecdabcc090c411ebad41f72aa2c8c806 = function _templateObject3_ecdabcc090c411ebad41f72aa2c8c806() {
      return data;
    };

    return data;
  }

  function _templateObject2_ecdabcc090c411ebad41f72aa2c8c806() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"row\">\n        ", "\n      </div>\n    "]);

    _templateObject2_ecdabcc090c411ebad41f72aa2c8c806 = function _templateObject2_ecdabcc090c411ebad41f72aa2c8c806() {
      return data;
    };

    return data;
  }

  function _templateObject_ecdabcc090c411ebad41f72aa2c8c806() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        :host .row {\n          width: 100%;\n          overflow-wrap: break-word;\n          display: flex;\n          flex-wrap: wrap;\n          justify-content: space-between;\n          align-items: stretch;\n          margin: var(--grid-plate-row-margin, 0px);\n          padding: var(--grid-plate-row-padding, 0px);\n        }\n        :host([disable-responsive]) .column {\n          overflow: hidden;\n        }\n        :host .column {\n          width: 100%;\n          flex: 0 0 auto;\n          min-height: 50px;\n        }\n        /* make sure that animation for nothing to 2 col doesn't jar layout */\n        :host([layout=\"1-1\"]) #col1 {\n          width: 50%;\n        }\n        :host([layout=\"1-1-1\"]) #col1 {\n          width: 33.33%;\n        }\n        :host([layout=\"1-1-1-1\"]) #col1 {\n          width: 25%;\n        }\n        :host([layout=\"1-1-1-1-1\"]) #col1 {\n          width: 20%;\n        }\n        :host([layout=\"1-1-1-1-1-1\"]) #col1 {\n          width: 16.66%;\n        }\n        .column.not-shown {\n          min-height: unset;\n        }\n        :host .column ::slotted(*) {\n          margin: var(--grid-plate-item-margin, 15px);\n          padding: var(--grid-plate-item-padding, 15px);\n          max-width: calc(100% - 60px);\n          max-width: -webkit-fill-available;\n        }\n      "]);

    _templateObject_ecdabcc090c411ebad41f72aa2c8c806 = function _templateObject_ecdabcc090c411ebad41f72aa2c8c806() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  // need to make this an object so that HAX can listen for it correctly
  var GridPlateLayoutOptions = function GridPlateLayoutOptions() {
    babelHelpers.classCallCheck(this, GridPlateLayoutOptions);
    this.resizeTimer = null;
    this.layouts = {
      1: {
        columnLayout: "1: full width",
        xs: ["100%"],
        sm: ["100%"],
        md: ["100%"],
        lg: ["100%"],
        xl: ["100%"]
      },
      "1-1": {
        columnLayout: "2: equal width",
        xs: ["100%", "100%"],
        sm: ["50%", "50%"],
        md: ["50%", "50%"],
        lg: ["50%", "50%"],
        xl: ["50%", "50%"]
      },
      "2-1": {
        columnLayout: "2: wide & narrow",
        xs: ["100%", "100%"],
        sm: ["50%", "50%"],
        md: ["66.6666667%", "33.3333337%"],
        lg: ["66.6666667%", "33.3333337%"],
        xl: ["66.6666667%", "33.3333337%"]
      },
      "1-2": {
        columnLayout: "2: narrow & wide",
        xs: ["100%", "100%"],
        sm: ["50%", "50%"],
        md: ["33.3333333%", "66.6666667%"],
        lg: ["33.3333333%", "66.6666667%"],
        xl: ["33.3333333%", "66.6666667%"]
      },
      "3-1": {
        columnLayout: "2: wider & narrower",
        xs: ["100%", "100%"],
        sm: ["50%", "50%"],
        md: ["75%", "25%"],
        lg: ["75%", "25%"],
        xl: ["75%", "25%"]
      },
      "1-3": {
        columnLayout: "2: narrower & wider",
        xs: ["100%", "100%"],
        sm: ["50%", "50%"],
        md: ["25%", "75%"],
        lg: ["25%", "75%"],
        xl: ["25%", "75%"]
      },
      "1-1-1": {
        columnLayout: "3: equal width",
        xs: ["100%", "100%", "100%"],
        sm: ["100%", "100%", "100%"],
        md: ["33.3333333%", "33.3333333%", "33.3333333%"],
        lg: ["33.3333333%", "33.3333333%", "33.3333333%"],
        xl: ["33.3333333%", "33.3333333%", "33.3333333%"]
      },
      "2-1-1": {
        columnLayout: "3: wide, narrow, and narrow",
        xs: ["100%", "100%", "100%"],
        sm: ["100%", "50%", "50%"],
        md: ["50%", "25%", "25%"],
        lg: ["50%", "25%", "25%"],
        xl: ["50%", "25%", "25%"]
      },
      "1-2-1": {
        columnLayout: "3: narrow, wide, and narrow",
        xs: ["100%", "100%", "100%"],
        sm: ["100%", "100%", "100%"],
        md: ["25%", "50%", "25%"],
        lg: ["25%", "50%", "25%"],
        xl: ["25%", "50%", "25%"]
      },
      "1-1-2": {
        columnLayout: "3: narrow, narrow, and wide",
        xs: ["100%", "100%", "100%"],
        sm: ["50%", "50%", "100%"],
        md: ["25%", "25%", "50%"],
        lg: ["25%", "25%", "50%"],
        xl: ["25%", "25%", "50%"]
      },
      "1-1-1-1": {
        columnLayout: "4: equal width",
        xs: ["100%", "100%", "100%", "100%"],
        sm: ["50%", "50%", "50%", "50%"],
        md: ["25%", "25%", "25%", "25%"],
        lg: ["25%", "25%", "25%", "25%"],
        xl: ["25%", "25%", "25%", "25%"]
      },
      "1-1-1-1-1": {
        columnLayout: "5: equal width",
        xs: ["100%", "100%", "100%", "100%", "100%"],
        sm: ["50%", "50%", "50%", "50%", "50%"],
        md: ["20%", "20%", "20%", "20%", "20%"],
        lg: ["20%", "20%", "20%", "20%", "20%"],
        xl: ["20%", "20%", "20%", "20%", "20%"]
      },
      "1-1-1-1-1-1": {
        columnLayout: "6: equal width",
        xs: ["100%", "100%", "100%", "100%", "100%", "100%"],
        sm: ["50%", "50%", "50%", "50%", "50%", "50%"],
        md: ["33.3333333%", "33.3333333%", "33.3333333%", "33.3333333%", "33.3333333%", "33.3333333%"],
        lg: ["16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%"],
        xl: ["16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%"]
      }
    };
    this.options = {};
    var layoutFlip = Object.keys(this.layouts); // loop through all the supplied layouts to get the HAX layout options & descriptions

    for (var i = 1; i < layoutFlip.length; i++) {
      this.options[layoutFlip[i]] = this.layouts[layoutFlip[i]].columnLayout;
    }
  };
  /**
   * `grid-plate`
   * `A grid plate based on a layout that manipulates it.`
   * @demo demo/index.html
   * @element grid-plate
   */


  var GridPlate = /*#__PURE__*/function (_HaxLayoutBehaviors) {
    babelHelpers.inherits(GridPlate, _HaxLayoutBehaviors);

    var _super = _createSuper(GridPlate);

    babelHelpers.createClass(GridPlate, null, [{
      key: "styles",

      /**
       * LitElement render styles
       */
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(GridPlate), "styles", this)), [(0, _litElement.css)(_templateObject_ecdabcc090c411ebad41f72aa2c8c806())]);
      }
    }]);

    function GridPlate() {
      var _this;

      babelHelpers.classCallCheck(this, GridPlate);
      _this = _super.call(this);
      _this.ready = false;
      _this.breakpointSm = 900;
      _this.breakpointMd = 1200;
      _this.breakpointLg = 1500;
      _this.breakpointXl = 1800;
      _this.columns = 6;
      _this.disableResponsive = false;
      _this.layout = "1-1";
      _this.layouts = new GridPlateLayoutOptions().layouts;
      _this.responsiveSize = "xs";
      window.ResponsiveUtility.requestAvailability();
      return _this;
    }
    /**
     * LitElement render
     */


    babelHelpers.createClass(GridPlate, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _litElement.html)(_templateObject2_ecdabcc090c411ebad41f72aa2c8c806(), [1, 2, 3, 4, 5, 6].map(function (num) {
          return (0, _litElement.html)(_templateObject3_ecdabcc090c411ebad41f72aa2c8c806(), _this2.columns < num ? "not-shown" : "drag-enabled", num, num, num, num, _this2._getColumnWidth(num - 1, _this2.__columnWidths), num);
        }));
      }
    }, {
      key: "firstUpdated",

      /**
       * life cycle
       */
      value: function (_firstUpdated) {
        function firstUpdated(_x) {
          return _firstUpdated.apply(this, arguments);
        }

        firstUpdated.toString = function () {
          return _firstUpdated.toString();
        };

        return firstUpdated;
      }(function (changedProperties) {
        this.resize();
        window.dispatchEvent(new CustomEvent("responsive-element", {
          detail: {
            element: this,
            attribute: "responsive-size",
            relativeToParent: false,
            sm: this.breakpointSm,
            md: this.breakpointMd,
            lg: this.breakpointLg,
            xl: this.breakpointXl
          }
        }));
        this.__columnWidths = this._getColumnWidths(this.responsiveSize, this.layout, this.layouts, this.disableResponsive);
        if (babelHelpers.get(babelHelpers.getPrototypeOf(GridPlate.prototype), "firstUpdated", this)) firstUpdated(changedProperties);
      })
      /**
       * Wire to HAX
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(GridPlate.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(GridPlate.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          // if any of these changed, update col widths
          if (["responsiveSize", "layout", "layouts", "disableResponsive"].includes(propName)) {
            clearTimeout(_this3.__calcWidthLock);
            _this3.__calcWidthLock = setTimeout(function () {
              _this3.__columnWidths = _this3._getColumnWidths(_this3.responsiveSize, _this3.layout, _this3.layouts, _this3.disableResponsive);
            }, 0);
          }

          switch (propName) {
            // observer, ensure we are sized correctly after widths change
            case "__columnWidths":
              // widths changed because of layout somehow, wait for the resize transition
              // to have processed, then fire a resize event which we are listening
              _this3.resize();

              break;

            case "disableResponsive":
              // fire an event that this is a core piece of the system
              _this3.dispatchEvent(new CustomEvent("disable-responsive-changed", {
                detail: _this3[propName]
              }));

              break;
          }
        });
      }
    }, {
      key: "resize",
      value: function resize() {
        window.dispatchEvent(new Event("resize"));
      }
      /**
       * gets the column widths based on selected layout and current responsive width
       *
       * @param {string} a string that describes the current responsive width
       * @param {string} the name of selected layout
       * @param {object} predefined layouts of column sizes and various responsive widths
       * @param {boolean} disable responsive sizing?
       * @returns {object} an object with a layout's column sizes at the current responsive width
       */

    }, {
      key: "_getColumnWidths",
      value: function _getColumnWidths() {
        var responsiveSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "sm";
        var layout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "1-1";
        var layouts = arguments.length > 2 ? arguments[2] : undefined;
        var disableResponsive = arguments.length > 3 ? arguments[3] : undefined;

        if (layouts) {
          var newl = layouts[layout],
              //how old layout names map to the new ones
          oldLayouts = {
            12: "1",
            "8/4": "2-1",
            "6/6": "1-1",
            "4/8": "1-2",
            "4/4/4": "1-1-1",
            "3/3/3/3": "1-1-1-1"
          },
              size = disableResponsive !== false ? "xl" : responsiveSize;
          var oldl = oldLayouts[layout];

          if (newl !== undefined && newl[size] !== undefined) {
            //return the layout
            return layouts[layout][size];
          } else if (layouts[oldl] !== undefined && layouts[oldl][size] !== undefined) {
            //return new layout that maps to old one
            return layouts[oldl][size];
          } else if (babelHelpers.typeof(layouts["1-1"]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            //return 2-column layout
            return layouts["1-1"][size];
          }
        }
      }
      /**
       * gets a given column's current width based on layout and current responsive width
       *
       * @param {number} the index of the column
       * @param {object} an object with a layout's column sizes at the current responsive width
       * @returns {string} a given column's current width based on layout and current responsive width
       */

    }, {
      key: "_getColumnWidth",
      value: function _getColumnWidth(column, __columnWidths) {
        return __columnWidths !== undefined && __columnWidths[column] !== undefined ? "width:" + __columnWidths[column] : "min-height: unset";
      }
      /**
       * gets a given column's current width based on layout and current responsive width
       *
       * @param {string} the name of selected layout
       * @returns {number} the number of columns in this layout
       */

    }, {
      key: "_getColumns",
      value: function _getColumns(__columnWidths) {
        return __columnWidths.length;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "grid-plate";
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          type: "grid",
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Grid layout",
            description: "Simple card in a cool retro design",
            icon: "hax:3-3-3-3",
            color: "grey",
            groups: ["Layout"],
            handles: [],
            meta: {
              author: "ELMS:LN",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              property: "layout",
              title: "Column Layout",
              description: "Style to present these items (may change for small screens)",
              inputMethod: "select",
              options: new GridPlateLayoutOptions().options
            }, {
              property: "disableResponsive",
              title: "Disable responsive",
              description: "Check box to force layout to stick regardless of screen breakpoins",
              inputMethod: "boolean"
            }],
            advanced: [{
              property: "breakpointSm",
              title: "Small Breakpoint",
              description: "Anything less than this number (in pixels) will render with the smallest version of this layout",
              inputMethod: "textfield",
              validationType: "number"
            }, {
              property: "breakpointMd",
              title: "Medium Breakpoint",
              description: "Anything less than this number (in pixels) will render with the small version of this layout",
              inputMethod: "textfield",
              validationType: "number"
            }, {
              property: "breakpointLg",
              title: "Large Breakpoint",
              description: "Anything less than this number (in pixels) will render with the medium version of this layout.",
              inputMethod: "textfield",
              validationType: "number"
            }, {
              property: "breakpointXl",
              title: "Extra-Large Breakpoint",
              description: "Anything less than this number (in pixels) will render with the large version of this layout. Anything greater than or equal to this number will display with the maximum number of columns for this layout.",
              inputMethod: "textfield",
              validationType: "number"
            }]
          },
          saveOptions: {
            unsetAttributes: ["ready", "layouts", "columns", "options", "responsive-width"]
          }
        };
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Custom small breakpoint for the layouts; only updated on attached
           */
          breakpointSm: {
            type: Number,
            attribute: "breakpoint-sm"
          },

          /**
           * Custom medium breakpoint for the layouts; only updated on attached
           */
          breakpointMd: {
            type: Number,
            attribute: "breakpoint-md"
          },

          /**
           * Custom large breakpoint for the layouts; only updated on attached
           */
          breakpointLg: {
            type: Number,
            attribute: "breakpoint-lg"
          },

          /**
           * Custom extra-large breakpoint for the layouts; only updated on attached
           */
          breakpointXl: {
            type: Number,
            attribute: "breakpoint-xl"
          },

          /**
           * number of columns at this layout / responsive size
           */
          columns: {
            type: Number,
            reflect: true
          },

          /**
           * disables responsive layouts
           */
          disableResponsive: {
            type: Boolean,
            attribute: "disable-responsive"
          },

          /**
           * an object with a layout's column sizes
           * at the current responsive width
           */
          layout: {
            type: String,
            reflect: true
          },

          /**
           * Predefined layouts of column sizes and various responsive widths. 
           * For example:```
          {
          "1-1-1-1": {                         //the name of the layout
          "xs": ["100%","100%","100%","100%] //the responsive width of each column when the grid is extra small
          "sm": ["50%","50%","50%","50%"]    //the responsive width of each column when the grid is small
          "md": ["50%","50%","50%","50%"]    //the responsive width of each column when the grid is medium
          "lg": ["25%","25%","25%","25%"]    //the responsive width of each column when the grid is large
          "xl": ["25%","25%","25%","25%"]    //the responsive width of each column when the grid is extra large
          },
          {...}
          }```
          */
          layouts: {
            type: Object
          },

          /**
           * Responsive size as `xs`, `sm`, `md`, `lg`, or `xl`
           */
          responsiveSize: {
            type: String,
            reflect: true,
            attribute: "responsive-size"
          },

          /**
           * name of selected layout
           */
          __columnWidths: {
            type: String
          }
        };
      }
    }]);
    return GridPlate;
  }((0, _HAXLayouts.HaxLayoutBehaviors)(_litElement.LitElement));

  _exports.GridPlate = GridPlate;
  window.customElements.define(GridPlate.tag, GridPlate);
});